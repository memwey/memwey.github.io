<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Mem.Wey&#x27;s Github Pages</title>
    <subtitle>Tsukkomi Lolicon&#x27;s GitHub Pages Blog</subtitle>
    <link rel="self" type="application/atom+xml" href="https://memwey.github.io/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://memwey.github.io"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2025-10-31T12:14:35+09:00</updated>
    <id>https://memwey.github.io/atom.xml</id>
    <entry xml:lang="en">
        <title>PlayStation 4 Pro 拾遗</title>
        <published>2025-10-30T19:38:09+09:00</published>
        <updated>2025-10-31T12:14:35+09:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://memwey.github.io/posts/playstation-4-pro-rediscovering/"/>
        <id>https://memwey.github.io/posts/playstation-4-pro-rediscovering/</id>
        
        <content type="html" xml:base="https://memwey.github.io/posts/playstation-4-pro-rediscovering/">&lt;p&gt;这台 PlayStation 4 Pro 其实也买了挺久了, 当时还是买的国行版本, 然后因为长时间的租房生活, 并没有什么条件和时间来玩, 最终长期的吃灰, 甚至借给朋友玩了好长时间 (当然他买的&lt;code&gt;怪物猎人世界: 冰原&lt;&#x2F;code&gt;在还机器的时候一并送我了)&lt;&#x2F;p&gt;
&lt;p&gt;带来日本后, 最近又捡起来了, 得益于秋叶原线下的二手交易市场, 发现其实还是比较可玩的. &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Eighth_generation_of_video_game_consoles&quot;&gt;第八世代&lt;&#x2F;a&gt;其实是个比较特别的世代. 一方面, 主流游戏玩法已经日趋成熟, 画面也有比较大的提升, 很多音画体验时至今日也不算过时; 另一方面, 此时开发成本还没有像近些年来一样飙升, 一些有意思的小品作品还有相对较大的生存空间; 同时在这个世代, 主机还处于相对优势, 大量作品还是主要以主机平台为核心开发的.&lt;&#x2F;p&gt;
&lt;p&gt;综上所述, 下面会列出一些还比较值得在 PlayStation 4 Pro 上体验的游戏, 其中个人喜好比较重, 仅供参考, 主要在 1080P 的屏幕下. 如果涉及多平台, 主要对比的对象是 PC 和 &lt;code&gt;Nintendo Switch&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ge-ren-tui-jian&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#ge-ren-tui-jian&quot; aria-label=&quot;Anchor link for: ge-ren-tui-jian&quot;&gt;个人推荐&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;ni-er-zi-dong-ren-xing-nia-otomata-nier-automata&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#ni-er-zi-dong-ren-xing-nia-otomata-nier-automata&quot; aria-label=&quot;Anchor link for: ni-er-zi-dong-ren-xing-nia-otomata-nier-automata&quot;&gt;尼尔: 自动人形 (ニーア オートマタ, NieR:Automata)&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;白金工作室, 标志性头套本体横尾太郎总监的动作角色扮演作品, 当年性感可爱的 &lt;code&gt;2B&lt;&#x2F;code&gt; 小姐姐几乎成为线下漫展 Cosplay 的象征. 虽然在 Steam 上也有(&lt;a href=&quot;https:&#x2F;&#x2F;store.steampowered.com&#x2F;app&#x2F;524220&#x2F;NieRAutomata&#x2F;&quot;&gt;在这里&lt;&#x2F;a&gt;), 推荐在 PlayStation 4 Pro 上体验的原因是日本厂商游戏的高定价, 涨价风波和分割商法, 另外, 在 PC 上体验很差, 移植比较暴力优化不佳, 无中文, 而且操作逻辑偏向手柄操作. 在 PS4 Pro 上可以达到不稳定的 60 帧, 也自带繁体中文.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;huang-ye-da-biao-ke-jiu-shu-red-dead-redemption&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#huang-ye-da-biao-ke-jiu-shu-red-dead-redemption&quot; aria-label=&quot;Anchor link for: huang-ye-da-biao-ke-jiu-shu-red-dead-redemption&quot;&gt;荒野大镖客: 救赎 (Red Dead Redemption)&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Rockstar 的经典西部开放世界作品, 剧情颇受好评. 在 PS4 和 Switch 上移植, 也有登陆 Steam (&lt;a href=&quot;https:&#x2F;&#x2F;store.steampowered.com&#x2F;app&#x2F;2668510&#x2F;Red_Dead_Redemption&#x2F;&quot;&gt;在这里&lt;&#x2F;a&gt;), 本身是第七世代的作品, 有一些在现代玩家中不太讨喜的设计, 移植可以说是原汁原味了. PlayStation 4 Pro 上比 Switch 画面效果和流畅度好太多了. 而移植后本身无联网要素, PC 上却需要很讨厌的 Rockstar 启动器.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;long-teng-shi-ji-shen-pan-dragon-age-inquisition&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#long-teng-shi-ji-shen-pan-dragon-age-inquisition&quot; aria-label=&quot;Anchor link for: long-teng-shi-ji-shen-pan-dragon-age-inquisition&quot;&gt;龙腾世纪: 审判 (Dragon Age: Inquisition)&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;BioWare 的代表作, TGA 的 2014 年度游戏, 第八世代早期的作品, 登陆 Steam (&lt;a href=&quot;https:&#x2F;&#x2F;store.steampowered.com&#x2F;app&#x2F;1222690&#x2F;_&#x2F;&quot;&gt;在这里&lt;&#x2F;a&gt;). PC 上没有中文, 还要安装 EA 的启动器, 还有额外的 DRM. 在 PS4 Pro 自带繁体中文.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ci-ke-xin-tiao-ao-de-sai-assassin-s-creed-odyssey&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#ci-ke-xin-tiao-ao-de-sai-assassin-s-creed-odyssey&quot; aria-label=&quot;Anchor link for: ci-ke-xin-tiao-ao-de-sai-assassin-s-creed-odyssey&quot;&gt;刺客信条: 奥德赛 (Assassin&#x27;s Creed Odyssey)&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;育碧年货, 但是古希腊的背景蛮吸引人的. 登陆 Steam (&lt;a href=&quot;https:&#x2F;&#x2F;store.steampowered.com&#x2F;app&#x2F;812140&#x2F;Assassins_Creed_Odyssey&#x2F;&quot;&gt;在这里&lt;&#x2F;a&gt;). PC 上需要 Ubisoft 的启动器和额外的 DRM.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;lover-ravuaru&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#lover-ravuaru&quot; aria-label=&quot;Anchor link for: lover-ravuaru&quot;&gt;LoveR (ラヴアール)&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;和美少女谈恋爱并且给美少女拍照的游戏. &lt;code&gt;爱相随&lt;&#x2F;code&gt; 的人设, &lt;code&gt;圣诞之吻&lt;&#x2F;code&gt;, &lt;code&gt;写真女友&lt;&#x2F;code&gt; 的制作人, 好耶! 目前只有 Switch 和 PS4 版本, 原本计划登陆 Steam, 但是因为某些大人的原因取消了. Switch 版本虽然性感元素更多, 但是画质会差一些.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wang-da-yu-ju-xiang-wandatoju-xiang-shadow-of-the-colossus&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#wang-da-yu-ju-xiang-wandatoju-xiang-shadow-of-the-colossus&quot; aria-label=&quot;Anchor link for: wang-da-yu-ju-xiang-wandatoju-xiang-shadow-of-the-colossus&quot;&gt;汪达与巨像 (ワンダと巨像, Shadow of the Colossus)&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;PlayStation 系独占的经典作品, 本身是 PS2 上的游戏, 在 PS3 上高清化,在 PS4 上推出完全重制版, 目前体验的唯一最佳途径. 虽然某些操作在现代玩家看来略显笨拙, 但是游戏给人带来的非常艺术化的沉浸式的体验和史诗感是绝对物有所值的.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;kai-se-lin-nong-yu-kou-gan-catherine-full-body&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#kai-se-lin-nong-yu-kou-gan-catherine-full-body&quot; aria-label=&quot;Anchor link for: kai-se-lin-nong-yu-kou-gan-catherine-full-body&quot;&gt;凯瑟琳 浓郁口感 (CATHERINE Full Body)&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Atlus 推出的推箱子解谜游戏, 原版是第七世代的作品, 本作为其后推出的强化版. 玩法不那么受欢迎的实验性质的作品, 但是剧情和对于两性关系的刻画与思考蛮有意思. 虽然也登陆了 Steam (&lt;a href=&quot;https:&#x2F;&#x2F;store.steampowered.com&#x2F;app&#x2F;893180&#x2F;Catherine_Classic&#x2F;&quot;&gt;在这里&lt;&#x2F;a&gt;), 但那是原版而非强化版, 而且移植蛮糟糕的. 强化版在 Switch 上也可体验.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zhong-li-yi-xiang-shi-jie-wan-jie-pian-gravity-daze-2-zhong-li-de-xuan-yun-wan-jie-bian-shang-ceng-henogui-huan-noguo-te-bi-nu-nonei-yu-zhou-nishou-lian-sitaxuan-ze&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#zhong-li-yi-xiang-shi-jie-wan-jie-pian-gravity-daze-2-zhong-li-de-xuan-yun-wan-jie-bian-shang-ceng-henogui-huan-noguo-te-bi-nu-nonei-yu-zhou-nishou-lian-sitaxuan-ze&quot; aria-label=&quot;Anchor link for: zhong-li-yi-xiang-shi-jie-wan-jie-pian-gravity-daze-2-zhong-li-de-xuan-yun-wan-jie-bian-shang-ceng-henogui-huan-noguo-te-bi-nu-nonei-yu-zhou-nishou-lian-sitaxuan-ze&quot;&gt;重力异想世界完结篇 (GRAVITY DAZE 2&#x2F;重力的眩暈完結編:上層への帰還の果て、彼女の内宇宙に収斂した選択)&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;PS4 独占. 这是二代, PS4 上也有从 PS Vita 移植的一代. 体感和手柄的重力操控玩法和日式美术风格, 带来独特体验的作品.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ao-ding-ling-yu-li-pu-te-la-xi-er-odeinsuhuia-reivusurasiru-odin-sphere-leifthrasir&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#ao-ding-ling-yu-li-pu-te-la-xi-er-odeinsuhuia-reivusurasiru-odin-sphere-leifthrasir&quot; aria-label=&quot;Anchor link for: ao-ding-ling-yu-li-pu-te-la-xi-er-odeinsuhuia-reivusurasiru-odin-sphere-leifthrasir&quot;&gt;奥丁领域: 里普特拉西尔 (オーディンスフィア レイヴスラシル, Odin Sphere: Leifthrasir)&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;PlayStation 系独占, 从 PS2 上的原版重制而来. 香草社无需多言, 华丽的手绘风格的 2D 横版卷轴动作游戏.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;sui-sui-nian&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#sui-sui-nian&quot; aria-label=&quot;Anchor link for: sui-sui-nian&quot;&gt;碎碎念&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;虽然其实很早就接触主机游戏了, 小时候在&lt;del&gt;富裕&lt;&#x2F;del&gt;表哥家里玩过 &lt;code&gt;SFC&lt;&#x2F;code&gt;, &lt;code&gt;Mega Drive&lt;&#x2F;code&gt; 和 &lt;code&gt;PlayStation 2&lt;&#x2F;code&gt;, 掌机也曾拥有过 &lt;code&gt;Gameboy Advance&lt;&#x2F;code&gt;, &lt;code&gt;PlayStation Portable&lt;&#x2F;code&gt; 和 &lt;code&gt;Nintendo DS&lt;&#x2F;code&gt;, 但是第八世代的游戏留下的印象还是颇为深刻. 主要还是因为那时上了大学, 有比较充足的时间玩游戏. 与此同时, Steam 开始支持人民币支付, 购买游戏方便了很多, 我还记得之前通过 &lt;code&gt;骑马与砍杀中文网&lt;&#x2F;code&gt; 买一份正版的 &amp;lt;骑马与砍杀&amp;gt; 多么不方便. 那个世代的游戏, 也有那个世代的特征, 不重视中文玩家, 主机独占策略, 主机优先导致的优化以及操作问题, 部分厂商激进的联网化和平台化策略, 防盗版策略. 不过还是希望能有更多人, 能体会到那个世代的游戏的快乐.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;can-kao&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#can-kao&quot; aria-label=&quot;Anchor link for: can-kao&quot;&gt;参考&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bbs.oldmantvg.net&#x2F;thread-12311.htm&quot;&gt;555余款游戏在PS4、PS4 PRO、PS5上的分辨率帧数统计汇总&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>炸鸡与西瓜</title>
        <published>2025-08-07T21:46:01+09:00</published>
        <updated>2025-08-07T21:46:01+09:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://memwey.github.io/posts/watermelon-and-fried-chicken/"/>
        <id>https://memwey.github.io/posts/watermelon-and-fried-chicken/</id>
        
        <content type="html" xml:base="https://memwey.github.io/posts/watermelon-and-fried-chicken/">&lt;p&gt;在美国, 炸鸡和西瓜有特别的意义.&lt;&#x2F;p&gt;
&lt;p&gt;奴隶制时期, 西瓜和鸡因为廉价, 是少数黑人奴隶可以接触的食物. 随着黑人奴隶的解放, 西瓜和炸鸡也成为了许多非裔美国人的生计, 代表他们的自由与经济独立. 同时, 许多白人种族主义者以炸鸡和西瓜来丑化和侮辱非裔美国人, 塑造他们原始, 懒惰, 贪婪和粗俗的形象.&lt;&#x2F;p&gt;
&lt;p&gt;虽然黑人民权运动后非裔美国人的状况已有显著改善, 西瓜和炸鸡在特定语境下仍可能被用于重现历史上的种族刻板印象.&lt;&#x2F;p&gt;
&lt;p&gt;不过, 好吃的就是好吃的, 更不必说这其中寄托着对自由和平等的追求更添美味, 给我再来一份葡萄汽水.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;memwey.github.io&#x2F;posts&#x2F;watermelon-and-fried-chicken&#x2F;images&#x2F;pic.jpg&quot; alt=&quot;pic&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Windsurf 入门指南</title>
        <published>2025-06-14T18:30:10+09:00</published>
        <updated>2025-07-28T10:58:23+09:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://memwey.github.io/posts/first-step-with-windsurf/"/>
        <id>https://memwey.github.io/posts/first-step-with-windsurf/</id>
        
        <content type="html" xml:base="https://memwey.github.io/posts/first-step-with-windsurf/">&lt;h2 id=&quot;wei-shen-me-shi-windsurf&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#wei-shen-me-shi-windsurf&quot; aria-label=&quot;Anchor link for: wei-shen-me-shi-windsurf&quot;&gt;为什么是 Windsurf&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;曾经叫 &lt;code&gt;Codeium&lt;&#x2F;code&gt;, 在 2022 年还是 &lt;code&gt;Github Copilot&lt;&#x2F;code&gt; 的时代即提供支持 &lt;code&gt;VS Code&lt;&#x2F;code&gt; 和 &lt;code&gt;JetBrains&lt;&#x2F;code&gt; 的 AI 编程工具插件; 于 2024 年推出类似于 &lt;code&gt;Cursor&lt;&#x2F;code&gt; 的基于 &lt;code&gt;VS Code&lt;&#x2F;code&gt; 的 IDE &lt;code&gt;Windsurf&lt;&#x2F;code&gt;, 随后将公司更名&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;免费的基础使用和更便宜的订阅价格&lt;&#x2F;li&gt;
&lt;li&gt;和 &lt;code&gt;Cursor&lt;&#x2F;code&gt; &lt;del&gt;互相抄&lt;&#x2F;del&gt; 功能没太大区别&lt;&#x2F;li&gt;
&lt;li&gt;被 &lt;code&gt;OpenAI&lt;&#x2F;code&gt; 以约30亿美元收购&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;目前告吹, 公司核心成员被 &lt;code&gt;Google&lt;&#x2F;code&gt; 挖走后开发 &lt;code&gt;Devin AI&lt;&#x2F;code&gt; 的 &lt;code&gt;Cognition&lt;&#x2F;code&gt; 收购了公司, &lt;del&gt;然后开始了疯狂加班&lt;&#x2F;del&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;被 &lt;code&gt;Anthropic&lt;&#x2F;code&gt; 断供&lt;del&gt;高端的 AI 商战&lt;&#x2F;del&gt;, 目前不能使用 &lt;code&gt;Claude 4&lt;&#x2F;code&gt;, &lt;del&gt;被收购之后恢复了&lt;&#x2F;del&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Cursor&lt;&#x2F;code&gt; 相关的信息污染太厉害了, 乔戈里峰问题&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;最近我发现 &lt;code&gt;TREA&lt;&#x2F;code&gt; 好像更好用, 问题似乎出在 &lt;code&gt;Windsurf&lt;&#x2F;code&gt; 配置的上下文太短了, &lt;del&gt;Kiro 大法好&lt;&#x2F;del&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zhu-yao-gong-neng&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#zhu-yao-gong-neng&quot; aria-label=&quot;Anchor link for: zhu-yao-gong-neng&quot;&gt;主要功能&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;相比插件更好的代码上下文感知 &lt;code&gt;Context Awareness&lt;&#x2F;code&gt;, 记忆能力, 调用第三方工具能力&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tab&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#tab&quot; aria-label=&quot;Anchor link for: tab&quot;&gt;Tab&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;补全, 跳转, 导入&lt;&#x2F;p&gt;
&lt;h3 id=&quot;command&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#command&quot; aria-label=&quot;Anchor link for: command&quot;&gt;Command&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;唤出输入框输入指令, 适用于当前文件范围内的修改, 作用于当前游标位置或选中的代码段&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;小技巧, 在注释中写入指令, 然后 &lt;code&gt;Cmd&#x2F;Ctrl+I&lt;&#x2F;code&gt; 随后使用类似 &lt;code&gt;do it&lt;&#x2F;code&gt; 这样的简单指令即可&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;cascade&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#cascade&quot; aria-label=&quot;Anchor link for: cascade&quot;&gt;Cascade&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;项目范围的大规模理解与调整, 可以运行命令行, 网络检索等工具, 也可以通过 &lt;code&gt;MCP&lt;&#x2F;code&gt; 协议调用外部工具&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Planning Mode: 将计划输出到 Markdown 文件, 便于调整和长流程处理&lt;&#x2F;li&gt;
&lt;li&gt;Browser: 读文档, 获取网页内容; 前端开发&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;zong-jie&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#zong-jie&quot; aria-label=&quot;Anchor link for: zong-jie&quot;&gt;总结&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;三个功能从上到下, 需要的人工的输入越来越多, 上下文感知要求越来越强, 流程和处理时间越来越长, 根据适当情况选择适当的功能&lt;&#x2F;p&gt;
&lt;h2 id=&quot;yuan-li-yu-ju-xian&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#yuan-li-yu-ju-xian&quot; aria-label=&quot;Anchor link for: yuan-li-yu-ju-xian&quot;&gt;原理与局限&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;神经网络的仿生学原理, 生物神经系统存在大量通过突触连接的神经元, 特定神经活动使关联的神经元突触产生可塑性变化, 是记忆和认知的基础; 神经网络通过数学模型, 用于编码输入与输出之间的概率关联, 本质是数据统计上的关联; 生物的神经系统的学习过程是持续发生的, 学习与使用并非截然分开, 而当前的大语言模型通常将&quot;训练&quot;与&quot;推理&quot;严格分离, 参数在训练后即固定, 所以不要尝试&quot;教会&quot;它, 因为它知道错了也不会改, 而是要通过 &lt;code&gt;prompt&lt;&#x2F;code&gt; 提供上下文信息, 使其在有限的上下文窗口中做出合理响应&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;上下文能力长度的限制, 上下文限制不仅在输入端, 同时在中间状态与输出端, 所以大模型能精准利用的有效上下文会明显比标示的上下文 &lt;code&gt;token&lt;&#x2F;code&gt; 参数小&lt;&#x2F;li&gt;
&lt;li&gt;注意力机制, &lt;code&gt;&amp;lt;Attention is All You Need&amp;gt;&lt;&#x2F;code&gt;, 但是 &lt;code&gt;Attention&lt;&#x2F;code&gt; 不是 &lt;code&gt;Understanding&lt;&#x2F;code&gt;, 无法主动区分重点与细节, 只是根据训练统计模式做 &lt;code&gt;token&lt;&#x2F;code&gt; 级别的预测&lt;&#x2F;li&gt;
&lt;li&gt;缺乏长期记忆机制, 不能自发积累跨 &lt;code&gt;Session&lt;&#x2F;code&gt; 经验和知识, 需要外部记忆模块&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;严格来说模型是可以做轻量微调(PEFT)的&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;大语言模型是高性能的统计关联引擎, 其输出本质是&quot;有结构的幻觉&quot; - 杨立昆的观点&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zui-jia-shi-jian&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#zui-jia-shi-jian&quot; aria-label=&quot;Anchor link for: zui-jia-shi-jian&quot;&gt;最佳实践&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;bi-yu&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#bi-yu&quot; aria-label=&quot;Anchor link for: bi-yu&quot;&gt;比喻&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;用 minori 的 &amp;lt;ef - a fairy tale of the two.&amp;gt; 的情节来描述大模型非常合适. 新藤千寻在 12 岁时由于事故患上顺行性遗忘症, 从那以后的事情她只能记住从当时往前推算的 13 个小时. 每一个清晨醒来, 她都必须重新阅读自己的日记，从中寻找&quot;我&quot;的线索, 并在日记本上不断续写她自己. 少年麻生莲治在车站与其相遇, 两人的距离在不断的相识与遗忘中逐渐缩短, 经过挣扎和犹豫两个人最终走到了一起. 这段爱情也带着某种悖论式的悲伤, 对于莲治来说, 他无比喜欢千寻, 但是某种意义上来说, 千寻只是在扮演日记本中那个喜欢莲治的自己.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ri-ji-ben&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#ri-ji-ben&quot; aria-label=&quot;Anchor link for: ri-ji-ben&quot;&gt;日记本&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;所以归根到底, 是要给&lt;del&gt;美少女&lt;&#x2F;del&gt;大模型提供优化过的&lt;del&gt;日记本&lt;&#x2F;del&gt;&lt;code&gt;prompt&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;总是使用 Markdown 写文档, 大语言模型对其有优化&lt;&#x2F;li&gt;
&lt;li&gt;一致的项目结构与命名规范&lt;&#x2F;li&gt;
&lt;li&gt;提供项目的结构和功能的描述, &lt;code&gt;User Story&lt;&#x2F;code&gt;, &lt;code&gt;Product Requirement Document&lt;&#x2F;code&gt;, 记录决策与约定&lt;&#x2F;li&gt;
&lt;li&gt;显式且准确的提供完成任务所需的上下文内容和工具调用, 善用&lt;code&gt;@&lt;&#x2F;code&gt;提示&lt;&#x2F;li&gt;
&lt;li&gt;积极的使用 &lt;code&gt;Workflow&lt;&#x2F;code&gt; 和 &lt;code&gt;Rule&lt;&#x2F;code&gt; 功能, 实际上就是模版化标准化的 &lt;code&gt;prompt&lt;&#x2F;code&gt; 的应用&lt;&#x2F;li&gt;
&lt;li&gt;&lt;del&gt;Prompt Engineering is Dead, everything is a Spec.&lt;&#x2F;del&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;zi-wo-qiang-hua&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#zi-wo-qiang-hua&quot; aria-label=&quot;Anchor link for: zi-wo-qiang-hua&quot;&gt;自我强化&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;让模型自己进行总结归纳, 做手动调整, 再作为 &lt;code&gt;prompt&lt;&#x2F;code&gt; 给到模型上下文, 以此循环&lt;&#x2F;li&gt;
&lt;li&gt;压缩 &lt;code&gt;prompt&lt;&#x2F;code&gt;, 并且让模型自己来验证它是否理解 &lt;code&gt;prompt&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;渐进式的任务分解提示, 分步骤的提示和指令, 让模型自己来做流程的完成情况维护&lt;&#x2F;li&gt;
&lt;li&gt;让 Agent 提问题, 写 QA&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;qi-ta-zhu-yi&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#qi-ta-zhu-yi&quot; aria-label=&quot;Anchor link for: qi-ta-zhu-yi&quot;&gt;其他注意&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;写通用的规则, 然后用 Markdown 的超链接功能引用, 抹平 IDE 规范差异&lt;&#x2F;li&gt;
&lt;li&gt;不要使用大模型做代码格式化 (可以让 &lt;code&gt;Cascade&lt;&#x2F;code&gt; 调用外部工具来处理)&lt;&#x2F;li&gt;
&lt;li&gt;多 &lt;code&gt;commit&lt;&#x2F;code&gt; 和 &lt;code&gt;commit --amend&lt;&#x2F;code&gt;, 防止人工&lt;del&gt;智障&lt;&#x2F;del&gt;智能大规模删改文件&lt;&#x2F;li&gt;
&lt;li&gt;复杂操作生成操作清单而非直接执行&lt;&#x2F;li&gt;
&lt;li&gt;标记工具生成的代码的位置, 以免大模型直接修改&lt;&#x2F;li&gt;
&lt;li&gt;将常用代码封装成可复用的模块, 并写好 &lt;code&gt;README.md&lt;&#x2F;code&gt;, 减少大模型上下文负担&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;矛盾&lt;&#x2F;strong&gt;, &lt;strong&gt;模糊&lt;&#x2F;strong&gt;和&lt;strong&gt;不准确&lt;&#x2F;strong&gt;的信息会让大模型偏移&lt;&#x2F;li&gt;
&lt;li&gt;当 &lt;code&gt;Session&lt;&#x2F;code&gt; 偏离, 立刻开启新的 &lt;code&gt;Session&lt;&#x2F;code&gt;, 不要纠结&lt;&#x2F;li&gt;
&lt;li&gt;将命令编写结构化的 Markdown 文档, 然后在 &lt;code&gt;Cascade&lt;&#x2F;code&gt; 对话框中引用 (如果&quot;几句话就能说明的东西&quot;就调用 &lt;code&gt;Cascade&lt;&#x2F;code&gt;, 那很有可能是用的不对)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;zong-jie-1&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#zong-jie-1&quot; aria-label=&quot;Anchor link for: zong-jie-1&quot;&gt;总结&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;Windsurf&lt;&#x2F;code&gt; 的人工智能, 将补全, 重构, 规划, 搜索和执行结合为统一体验, 从局部函数到全局架构, 都可以以更自然的方式与其协同. 但它并不魔法般全能, 它依赖上下文, 依赖清晰的项目结构, 依赖好的 &lt;code&gt;prompt&lt;&#x2F;code&gt; 提示与任务规划. 因此, 真正的生产力提升, 并非来自&quot;你来把这个代码写了&quot;, 而是来自构建了一个让它理解, 协作, 执行的良好环境. 也许可以把 &lt;code&gt;Windsurf&lt;&#x2F;code&gt; 看作每天早上醒来要读你笔记的&lt;del&gt;美少女&lt;&#x2F;del&gt;程序员, 而开发者的职责, 就是写好那本&quot;日记本&quot;, 明确的目标, 清晰的上下文, 有逻辑的步骤和合理的调用.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;qi-ta-yi-xie-kan-fa&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#qi-ta-yi-xie-kan-fa&quot; aria-label=&quot;Anchor link for: qi-ta-yi-xie-kan-fa&quot;&gt;其他一些看法&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;Vibe coding&lt;&#x2F;code&gt; 译为氛围编程, 在实践中, 对编码能力的要求下降了, 但是对项目规划和产品设计, 团队协作和组织能力, 团队积累与结构化知识的要求反而是提高了, 某种意义上来说, 反而拉大了组织与组织之间的差距. 人工智能更像一个每天都是新入职的, 代码能力扎实的实习生, 如何让其能快速了解代码规范, 项目架构, 周边工具, 沟通方法才是发挥其作用的关键. 开发者角色也从&quot;代码生产者&quot;转变为&quot;意图定义者&quot;, 核心能力迁移到问题验证与处理, 领域建模, 知识结构化和精准表达.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;组织差距:
&lt;&#x2F;span&gt;&lt;span&gt;强的组织 -&amp;gt; 精准的领域语言 -&amp;gt; 结构化知识库 -&amp;gt; AI 高效产出
&lt;&#x2F;span&gt;&lt;span&gt;弱的组织 -&amp;gt; 模糊的需求 -&amp;gt; 碎片化的信息 -&amp;gt; AI 混乱输出
&lt;&#x2F;span&gt;&lt;span&gt;开发模式:
&lt;&#x2F;span&gt;&lt;span&gt;传统模式 [记忆 -&amp;gt; 检索 -&amp;gt; 编码]
&lt;&#x2F;span&gt;&lt;span&gt;AI 模式 [意图 -&amp;gt; 验证 -&amp;gt; 优化]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;大语言模型的原理和局限也决定了它在 &lt;code&gt;Day 0&lt;&#x2F;code&gt; 即代码从头开始的效果比较好, 而 &lt;code&gt;Day 1+&lt;&#x2F;code&gt; 即后续的开发和维护上, 会需要开发者更多的指引.&lt;del&gt;身为程序员最讨厌的就是写文档和别人不写文档&lt;&#x2F;del&gt;拒绝 &lt;code&gt;YOLO coding&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;geng-jin-yi-bu&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#geng-jin-yi-bu&quot; aria-label=&quot;Anchor link for: geng-jin-yi-bu&quot;&gt;更进一步&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;什么才能称得上思维, 思考的本质, 观点与偏见, 错了也不改与反例的权重, 波普尔的 &lt;code&gt;可证伪性(Falsifiability)&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;乔戈里峰&lt;&#x2F;li&gt;
&lt;li&gt;杨立昆&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;can-kao-zi-liao&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#can-kao-zi-liao&quot; aria-label=&quot;Anchor link for: can-kao-zi-liao&quot;&gt;参考资料&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;mp.weixin.qq.com&#x2F;s&#x2F;1xbOMGlFI0No2AuixK6vbw&quot;&gt;Windsurf创始人：我们对Java工程师做了很多优化和适配&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zh.wikipedia.org&#x2F;zh-cn&#x2F;Ef_-_a_fairy_tale_of_the_two.&quot;&gt;ef - a fairy tale of the two.&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PaulDuvall&#x2F;vibecoding&quot;&gt;Vibe Coding: Automated Research Digest &amp;amp; Windsurf Standards&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.windsurf.com&#x2F;windsurf&#x2F;getting-started&quot;&gt;Getting started with Windsurf&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;Codeium&#x2F;comments&#x2F;1h2psgy&#x2F;windsurf_best_practices&#x2F;&quot;&gt;Windsurf best practices&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Vibe_coding&quot;&gt;Vibe coding&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.ycombinator.com&#x2F;library&#x2F;MO-windsurf-ceo-betting-on-ai-agents-pivoting-in-48-hours-and-the-future-of-coding&quot;&gt;Windsurf CEO: Betting On AI Agents, Pivoting In 48 Hours, And The Future of Coding&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;newsletter.pragmaticengineer.com&#x2F;p&#x2F;cursor&quot;&gt;Real-world engineering challenges: building Cursor&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;657425622&quot;&gt;解析Yann LeCun的自主机器智能构想&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zed.dev&#x2F;&quot;&gt;Zed&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.trae.ai&#x2F;&quot;&gt;TREA&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;aws&#x2F;amazon-q-developer-cli&#x2F;pull&#x2F;834&quot;&gt;feat(cli): Add context management feature with profiles #834&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;diamantai.substack.com&#x2F;p&#x2F;the-hidden-algorithms-powering-your&quot;&gt;The Hidden Algorithms Powering Your Coding Assistant&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;southbridge-research.notion.site&#x2F;conducting-smarter-intelligences-than-me&quot;&gt;Conducting smarter intelligences than me: new orchestras&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;google-gemini&#x2F;gemini-cli&quot;&gt;Gemini CLI&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kiro.dev&#x2F;blog&#x2F;introducing-kiro&#x2F;&quot;&gt;Introducing Kiro&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kirodotdev&#x2F;spirit-of-kiro&quot;&gt;Spirit of Kiro&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;harper.blog&#x2F;2025&#x2F;02&#x2F;16&#x2F;my-llm-codegen-workflow-atm&#x2F;&quot;&gt;My LLM codegen workflow atm&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=8rABwKRsec4&quot;&gt;The New Code — Sean Grove, OpenAI&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.anthropic.com&#x2F;engineering&#x2F;claude-code-best-practices&quot;&gt;Claude Code: Best practices for agentic coding&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;antirez.com&#x2F;news&#x2F;154&quot;&gt;Coding with LLMs in the summer of 2025&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>2024 诺贝尔物理学奖小记</title>
        <published>2024-10-09T20:18:58+09:00</published>
        <updated>2024-10-09T20:18:58+09:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://memwey.github.io/posts/2024-nobel-prize-in-physics/"/>
        <id>https://memwey.github.io/posts/2024-nobel-prize-in-physics/</id>
        
        <content type="html" xml:base="https://memwey.github.io/posts/2024-nobel-prize-in-physics/">&lt;p&gt;杰弗里·辛顿出自书香世家, 他有一位堂姑, 叫琼·辛顿, 当然, 中国人应该更熟悉他的这位堂姑的中文名, 寒春&lt;&#x2F;p&gt;
&lt;p&gt;感觉像是唐纳德·特朗普的叔叔约翰·特朗普为中国核物理事业做出了贡献一样有着奇妙的联系&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;memwey.github.io&#x2F;posts&#x2F;2024-nobel-prize-in-physics&#x2F;images&#x2F;1.jpg&quot; alt=&quot;Joke-1&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;memwey.github.io&#x2F;posts&#x2F;2024-nobel-prize-in-physics&#x2F;images&#x2F;2.jpg&quot; alt=&quot;Joke-2&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>岩里武则与马尼拉战役</title>
        <published>2024-06-02T00:50:39+09:00</published>
        <updated>2024-06-02T00:50:39+09:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://memwey.github.io/posts/iwasato-takenori-and-battle-of-manila/"/>
        <id>https://memwey.github.io/posts/iwasato-takenori-and-battle-of-manila/</id>
        
        <content type="html" xml:base="https://memwey.github.io/posts/iwasato-takenori-and-battle-of-manila/">&lt;p&gt;岩里武则, 岩里政男的哥哥, 在二战期间加入旧日本帝国海军, 前往日占菲律宾, 在马尼拉战役中被美军打死, 二战后, 以岩里武则的名字被供奉在靖国神社; 据称, 改姓岩里, 因为里字保留了李这个音, 而岩则源自李家祖籍福建龙岩&lt;&#x2F;p&gt;
&lt;p&gt;发生在 1945 年初的马尼拉战役, 日军指挥官岩渊三次带领海军陆战队违反上级命令, 在人口稠密且拥有大量木制易燃建筑的马尼拉市区与美军进行巷战. 在美军的绝对优势下, 日军将愤怒发泄在菲律宾平民身上; 将近一个月的战斗中, 超过十万名菲律宾平民死亡, 其中大部分死于日军屠杀; 这个数字超过了东京大轰炸和广岛长崎的核爆&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>搭建 WireGuard 网络</title>
        <published>2022-11-29T19:00:24+09:00</published>
        <updated>2022-11-29T19:00:24+09:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://memwey.github.io/posts/wireguard-in-ubuntu/"/>
        <id>https://memwey.github.io/posts/wireguard-in-ubuntu/</id>
        
        <content type="html" xml:base="https://memwey.github.io/posts/wireguard-in-ubuntu/">&lt;p&gt;本文介绍在一台 &lt;code&gt;Ubuntu 22.04&lt;&#x2F;code&gt; 的服务器下搭建 WireGuard 服务器端, 附带有客户端的一些配置.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;an-zhuang&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#an-zhuang&quot; aria-label=&quot;Anchor link for: an-zhuang&quot;&gt;安装&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;WireGuard 已经集成在 5.6 及以上版本的 Linux Kernel 中, &lt;code&gt;Ubuntu 22.04&lt;&#x2F;code&gt; 系统下直接安装即可&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;sudo apt update
&lt;&#x2F;span&gt;&lt;span&gt;sudo apt install wireguard
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;sheng-cheng-mi-yao-dui&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#sheng-cheng-mi-yao-dui&quot; aria-label=&quot;Anchor link for: sheng-cheng-mi-yao-dui&quot;&gt;生成密钥对&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;cd &#x2F;etc&#x2F;wireguard
&lt;&#x2F;span&gt;&lt;span&gt;wg genkey | tee s_private.key | wg pubkey &amp;gt; s_public.key
&lt;&#x2F;span&gt;&lt;span&gt;wg genkey | tee c_private.key | wg pubkey &amp;gt; c_public.key
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;此时会在目录下生成四个文件, 具体说明如下&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;文件名&lt;&#x2F;th&gt;&lt;th&gt;文件说明&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;s_private.key&lt;&#x2F;td&gt;&lt;td&gt;服务器端私钥&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;s_public.key&lt;&#x2F;td&gt;&lt;td&gt;服务器端公钥&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;c_private.key&lt;&#x2F;td&gt;&lt;td&gt;客户端私钥&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;c_public.key&lt;&#x2F;td&gt;&lt;td&gt;客户端公钥&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;pei-zhi-wireguard-fu-wu-qi-duan&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#pei-zhi-wireguard-fu-wu-qi-duan&quot; aria-label=&quot;Anchor link for: pei-zhi-wireguard-fu-wu-qi-duan&quot;&gt;配置 WireGuard 服务器端&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;具体需要各端准备的变量有以下这些&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;服务器端: 公网 IP, 内网 IP, 公网端口, 公钥, 私钥, 网络接口&lt;&#x2F;li&gt;
&lt;li&gt;客户端: 内网 IP, 私钥, 公钥&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;整理为如下表格&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;th&gt;服务器端&lt;&#x2F;th&gt;&lt;th&gt;客户端&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;公网IP&lt;&#x2F;td&gt;&lt;td&gt;233.233.233.233&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;内网IP&lt;&#x2F;td&gt;&lt;td&gt;192.168.1.1&lt;&#x2F;td&gt;&lt;td&gt;192.168.1.2&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;端口配置&lt;&#x2F;td&gt;&lt;td&gt;udp&#x2F;6666&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;私钥文件&lt;&#x2F;td&gt;&lt;td&gt;s_private.key&lt;&#x2F;td&gt;&lt;td&gt;c_private.key&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;公钥文件&lt;&#x2F;td&gt;&lt;td&gt;s_public.key&lt;&#x2F;td&gt;&lt;td&gt;c_public.key&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;网络接口&lt;&#x2F;td&gt;&lt;td&gt;eth0&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;bian-xie-pei-zhi-wen-jian&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#bian-xie-pei-zhi-wen-jian&quot; aria-label=&quot;Anchor link for: bian-xie-pei-zhi-wen-jian&quot;&gt;编写配置文件&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;文件位置为 &lt;code&gt;&#x2F;etc&#x2F;wireguard&#x2F;wg0.conf&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;[Interface]
&lt;&#x2F;span&gt;&lt;span&gt;Address = 192.168.1.1
&lt;&#x2F;span&gt;&lt;span&gt;DNS = 223.6.6.6
&lt;&#x2F;span&gt;&lt;span&gt;ListenPort = 6666
&lt;&#x2F;span&gt;&lt;span&gt;PrivateKey = s_private.key
&lt;&#x2F;span&gt;&lt;span&gt;PostUp   = iptables -A FORWARD -i wg0 -j ACCEPT; iptables -A FORWARD -o wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
&lt;&#x2F;span&gt;&lt;span&gt;PostDown = iptables -D FORWARD -i wg0 -j ACCEPT; iptables -D FORWARD -o wg0 -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[Peer]
&lt;&#x2F;span&gt;&lt;span&gt;PublicKey = c_public.key
&lt;&#x2F;span&gt;&lt;span&gt;AllowedIPs = 192.168.1.2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;其中 &lt;code&gt;Interface&lt;&#x2F;code&gt; 可以大致理解为本机的配置, 而 &lt;code&gt;Peer&lt;&#x2F;code&gt; 是面向外部的配置. 有一些参数需要按照实际情况调整, 密钥需要替换为实际的字符串&lt;&#x2F;p&gt;
&lt;h3 id=&quot;qi-ta-fu-wu-qi-pei-zhi&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#qi-ta-fu-wu-qi-pei-zhi&quot; aria-label=&quot;Anchor link for: qi-ta-fu-wu-qi-pei-zhi&quot;&gt;其他服务器配置&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;在服务器端启动 IP 转发&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;sysctl net.ipv4.ip_forward=1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;另外, 可能需要云主机上配置开放对应的 UDP 端口&lt;&#x2F;p&gt;
&lt;h3 id=&quot;qi-dong-yu-ting-zhi&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#qi-dong-yu-ting-zhi&quot; aria-label=&quot;Anchor link for: qi-dong-yu-ting-zhi&quot;&gt;启动与停止&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;配置完成后, 可以使用如下命令, 分别是启动, 查看状态, 停止&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;wg-quick up wg0
&lt;&#x2F;span&gt;&lt;span&gt;wg show wg0
&lt;&#x2F;span&gt;&lt;span&gt;wg-quick down wg0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;wireguard-ke-hu-duan-pei-zhi&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#wireguard-ke-hu-duan-pei-zhi&quot; aria-label=&quot;Anchor link for: wireguard-ke-hu-duan-pei-zhi&quot;&gt;WireGuard 客户端配置&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;bian-xie-pei-zhi-wen-jian-1&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#bian-xie-pei-zhi-wen-jian-1&quot; aria-label=&quot;Anchor link for: bian-xie-pei-zhi-wen-jian-1&quot;&gt;编写配置文件&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;文件命名为 &lt;code&gt;client.conf&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;[Interface]
&lt;&#x2F;span&gt;&lt;span&gt;PrivateKey = c_private.key
&lt;&#x2F;span&gt;&lt;span&gt;Address = 192.168.1.2
&lt;&#x2F;span&gt;&lt;span&gt;DNS = 223.6.6.6
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[Peer]
&lt;&#x2F;span&gt;&lt;span&gt;PublicKey = s_public.key
&lt;&#x2F;span&gt;&lt;span&gt;Endpoint = 233.233.233.233:6666
&lt;&#x2F;span&gt;&lt;span&gt;AllowedIPs = 0.0.0.0&#x2F;0
&lt;&#x2F;span&gt;&lt;span&gt;PersistentKeepalive = 25
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;也是要根据实际情况做相应的修改, 密钥替换为实际的字符串&lt;&#x2F;p&gt;
&lt;h3 id=&quot;qi-ta-ke-hu-duan-pei-zhi&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#qi-ta-ke-hu-duan-pei-zhi&quot; aria-label=&quot;Anchor link for: qi-ta-ke-hu-duan-pei-zhi&quot;&gt;其他客户端配置&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;可以使用如下命令在命令行生成二维码, 方便手机扫描&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;qrencode -t ansiutf8 &amp;lt; client.conf
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Redis 查询偶尔超时问题排查</title>
        <published>2022-10-28T14:54:14+09:00</published>
        <updated>2022-10-28T14:54:14+09:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://memwey.github.io/posts/redis-troubleshooting/"/>
        <id>https://memwey.github.io/posts/redis-troubleshooting/</id>
        
        <content type="html" xml:base="https://memwey.github.io/posts/redis-troubleshooting/">&lt;h2 id=&quot;biao-xian&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#biao-xian&quot; aria-label=&quot;Anchor link for: biao-xian&quot;&gt;表现&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;业务上 Redis 做去重使用, 量大但是操作简单, 超时均设置为 10ms, 偶尔有超时情况报错, 超时错误分布与业务流量正相关. Redis 由 &lt;code&gt;AWS&lt;&#x2F;code&gt; 的 &lt;code&gt;ElasticCache&lt;&#x2F;code&gt; 服务提供. 其中典型操作如下&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;SET key value expiration
&lt;&#x2F;span&gt;&lt;span&gt;GET key
&lt;&#x2F;span&gt;&lt;span&gt;MGET key1 key2 ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;redis-ke-hu-duan-ce-shi-shu-ju&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#redis-ke-hu-duan-ce-shi-shu-ju&quot; aria-label=&quot;Anchor link for: redis-ke-hu-duan-ce-shi-shu-ju&quot;&gt;Redis 客户端测试数据&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;latency-history&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#latency-history&quot; aria-label=&quot;Anchor link for: latency-history&quot;&gt;latency-history&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;Redis&lt;&#x2F;code&gt; 的 &lt;code&gt;latency-history&lt;&#x2F;code&gt; 选项将 &lt;code&gt;PING&lt;&#x2F;code&gt; 命令发送到 &lt;code&gt;Redis&lt;&#x2F;code&gt; 实例, 并测量响应时间, 统计时间以毫秒为单位.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;# date
&lt;&#x2F;span&gt;&lt;span&gt;Fri Oct 28 10:49:58 JST 2022
&lt;&#x2F;span&gt;&lt;span&gt;# redis-cli -h {host} -p {port} --latency-history -i 5
&lt;&#x2F;span&gt;&lt;span&gt;min: 1, max: 5, avg: 1.92 (418 samples) -- 5.00 seconds range
&lt;&#x2F;span&gt;&lt;span&gt;min: 1, max: 5, avg: 1.93 (418 samples) -- 5.01 seconds range
&lt;&#x2F;span&gt;&lt;span&gt;min: 1, max: 5, avg: 1.93 (417 samples) -- 5.00 seconds range
&lt;&#x2F;span&gt;&lt;span&gt;min: 1, max: 7, avg: 1.98 (416 samples) -- 5.01 seconds range
&lt;&#x2F;span&gt;&lt;span&gt;min: 1, max: 4, avg: 1.94 (417 samples) -- 5.00 seconds range
&lt;&#x2F;span&gt;&lt;span&gt;min: 1, max: 3, avg: 1.93 (418 samples) -- 5.01 seconds range
&lt;&#x2F;span&gt;&lt;span&gt;min: 1, max: 3, avg: 1.92 (418 samples) -- 5.00 seconds range
&lt;&#x2F;span&gt;&lt;span&gt;min: 1, max: 3, avg: 1.94 (418 samples) -- 5.01 seconds range
&lt;&#x2F;span&gt;&lt;span&gt;min: 1, max: 3, avg: 1.95 (418 samples) -- 5.01 seconds range
&lt;&#x2F;span&gt;&lt;span&gt;min: 1, max: 17, avg: 2.08 (412 samples) -- 5.01 seconds range
&lt;&#x2F;span&gt;&lt;span&gt;min: 1, max: 5, avg: 2.00 (416 samples) -- 5.01 seconds range
&lt;&#x2F;span&gt;&lt;span&gt;min: 1, max: 4, avg: 1.94 (417 samples) -- 5.00 seconds range
&lt;&#x2F;span&gt;&lt;span&gt;min: 1, max: 5, avg: 1.89 (418 samples) -- 5.01 seconds range
&lt;&#x2F;span&gt;&lt;span&gt;min: 1, max: 3, avg: 1.91 (418 samples) -- 5.01 seconds range
&lt;&#x2F;span&gt;&lt;span&gt;min: 1, max: 13, avg: 2.01 (415 samples) -- 5.01 seconds range
&lt;&#x2F;span&gt;&lt;span&gt;min: 1, max: 12, avg: 2.12 (411 samples) -- 5.01 seconds range
&lt;&#x2F;span&gt;&lt;span&gt;min: 1, max: 5, avg: 1.96 (416 samples) -- 5.00 seconds range
&lt;&#x2F;span&gt;&lt;span&gt;min: 1, max: 8, avg: 2.07 (413 samples) -- 5.01 seconds range
&lt;&#x2F;span&gt;&lt;span&gt;min: 1, max: 7, avg: 1.97 (415 samples) -- 5.00 seconds range
&lt;&#x2F;span&gt;&lt;span&gt;min: 1, max: 5, avg: 1.93 (417 samples) -- 5.00 seconds range
&lt;&#x2F;span&gt;&lt;span&gt;min: 1, max: 8, avg: 1.99 (416 samples) -- 5.01 seconds range
&lt;&#x2F;span&gt;&lt;span&gt;min: 1, max: 6, avg: 2.04 (413 samples) -- 5.00 seconds range
&lt;&#x2F;span&gt;&lt;span&gt;min: 1, max: 3, avg: 2.03 (79 samples)^C
&lt;&#x2F;span&gt;&lt;span&gt;# date
&lt;&#x2F;span&gt;&lt;span&gt;Fri Oct 28 10:52:16 JST 2022
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以看到, 对于 &lt;code&gt;PING&lt;&#x2F;code&gt; 这样可以说没有任何性能负担的命令, 依然有少数情况响应时间大于 10ms&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-yong-benchmark-ce-shi-jian-dan-cao-zuo&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#shi-yong-benchmark-ce-shi-jian-dan-cao-zuo&quot; aria-label=&quot;Anchor link for: shi-yong-benchmark-ce-shi-jian-dan-cao-zuo&quot;&gt;使用 benchmark 测试简单操作&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;# redis-benchmark -h {host} -t set,get -c 50 -d 64
&lt;&#x2F;span&gt;&lt;span&gt;====== SET ======
&lt;&#x2F;span&gt;&lt;span&gt;  100000 requests completed in 4.51 seconds
&lt;&#x2F;span&gt;&lt;span&gt;  50 parallel clients
&lt;&#x2F;span&gt;&lt;span&gt;  64 bytes payload
&lt;&#x2F;span&gt;&lt;span&gt;  keep alive: 1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;0.00% &amp;lt;= 1 milliseconds
&lt;&#x2F;span&gt;&lt;span&gt;20.53% &amp;lt;= 2 milliseconds
&lt;&#x2F;span&gt;&lt;span&gt;95.87% &amp;lt;= 3 milliseconds
&lt;&#x2F;span&gt;&lt;span&gt;98.53% &amp;lt;= 4 milliseconds
&lt;&#x2F;span&gt;&lt;span&gt;99.24% &amp;lt;= 5 milliseconds
&lt;&#x2F;span&gt;&lt;span&gt;99.72% &amp;lt;= 6 milliseconds
&lt;&#x2F;span&gt;&lt;span&gt;99.75% &amp;lt;= 7 milliseconds
&lt;&#x2F;span&gt;&lt;span&gt;99.75% &amp;lt;= 8 milliseconds
&lt;&#x2F;span&gt;&lt;span&gt;99.76% &amp;lt;= 9 milliseconds
&lt;&#x2F;span&gt;&lt;span&gt;99.80% &amp;lt;= 10 milliseconds
&lt;&#x2F;span&gt;&lt;span&gt;99.85% &amp;lt;= 11 milliseconds
&lt;&#x2F;span&gt;&lt;span&gt;99.92% &amp;lt;= 12 milliseconds
&lt;&#x2F;span&gt;&lt;span&gt;99.98% &amp;lt;= 13 milliseconds
&lt;&#x2F;span&gt;&lt;span&gt;100.00% &amp;lt;= 13 milliseconds
&lt;&#x2F;span&gt;&lt;span&gt;22187.71 requests per second
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;====== GET ======
&lt;&#x2F;span&gt;&lt;span&gt;  100000 requests completed in 5.78 seconds
&lt;&#x2F;span&gt;&lt;span&gt;  50 parallel clients
&lt;&#x2F;span&gt;&lt;span&gt;  64 bytes payload
&lt;&#x2F;span&gt;&lt;span&gt;  keep alive: 1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;0.00% &amp;lt;= 1 milliseconds
&lt;&#x2F;span&gt;&lt;span&gt;6.49% &amp;lt;= 2 milliseconds
&lt;&#x2F;span&gt;&lt;span&gt;76.89% &amp;lt;= 3 milliseconds
&lt;&#x2F;span&gt;&lt;span&gt;89.58% &amp;lt;= 4 milliseconds
&lt;&#x2F;span&gt;&lt;span&gt;94.31% &amp;lt;= 5 milliseconds
&lt;&#x2F;span&gt;&lt;span&gt;96.33% &amp;lt;= 6 milliseconds
&lt;&#x2F;span&gt;&lt;span&gt;97.64% &amp;lt;= 7 milliseconds
&lt;&#x2F;span&gt;&lt;span&gt;98.36% &amp;lt;= 8 milliseconds
&lt;&#x2F;span&gt;&lt;span&gt;98.77% &amp;lt;= 9 milliseconds
&lt;&#x2F;span&gt;&lt;span&gt;99.01% &amp;lt;= 10 milliseconds
&lt;&#x2F;span&gt;&lt;span&gt;99.22% &amp;lt;= 11 milliseconds
&lt;&#x2F;span&gt;&lt;span&gt;99.39% &amp;lt;= 12 milliseconds
&lt;&#x2F;span&gt;&lt;span&gt;99.51% &amp;lt;= 13 milliseconds
&lt;&#x2F;span&gt;&lt;span&gt;99.64% &amp;lt;= 14 milliseconds
&lt;&#x2F;span&gt;&lt;span&gt;99.67% &amp;lt;= 15 milliseconds
&lt;&#x2F;span&gt;&lt;span&gt;99.77% &amp;lt;= 16 milliseconds
&lt;&#x2F;span&gt;&lt;span&gt;99.81% &amp;lt;= 17 milliseconds
&lt;&#x2F;span&gt;&lt;span&gt;99.84% &amp;lt;= 18 milliseconds
&lt;&#x2F;span&gt;&lt;span&gt;99.86% &amp;lt;= 19 milliseconds
&lt;&#x2F;span&gt;&lt;span&gt;99.90% &amp;lt;= 20 milliseconds
&lt;&#x2F;span&gt;&lt;span&gt;99.91% &amp;lt;= 21 milliseconds
&lt;&#x2F;span&gt;&lt;span&gt;99.93% &amp;lt;= 22 milliseconds
&lt;&#x2F;span&gt;&lt;span&gt;99.94% &amp;lt;= 23 milliseconds
&lt;&#x2F;span&gt;&lt;span&gt;99.95% &amp;lt;= 24 milliseconds
&lt;&#x2F;span&gt;&lt;span&gt;99.95% &amp;lt;= 36 milliseconds
&lt;&#x2F;span&gt;&lt;span&gt;99.96% &amp;lt;= 37 milliseconds
&lt;&#x2F;span&gt;&lt;span&gt;99.97% &amp;lt;= 38 milliseconds
&lt;&#x2F;span&gt;&lt;span&gt;99.98% &amp;lt;= 39 milliseconds
&lt;&#x2F;span&gt;&lt;span&gt;99.99% &amp;lt;= 40 milliseconds
&lt;&#x2F;span&gt;&lt;span&gt;99.99% &amp;lt;= 41 milliseconds
&lt;&#x2F;span&gt;&lt;span&gt;100.00% &amp;lt;= 42 milliseconds
&lt;&#x2F;span&gt;&lt;span&gt;100.00% &amp;lt;= 42 milliseconds
&lt;&#x2F;span&gt;&lt;span&gt;17310.02 requests per second
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# date
&lt;&#x2F;span&gt;&lt;span&gt;Fri Oct 28 11:20:23 JST 2022
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;对于简单操作的情况, 两个 9 的数据可以在 10ms 以内, 但是性能仍然不对, 预期操作在毫秒以内才是 &lt;code&gt;Redis&lt;&#x2F;code&gt; 正常的表现.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-yong-bigkeys-jian-cha-key-qing-kuang&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#shi-yong-bigkeys-jian-cha-key-qing-kuang&quot; aria-label=&quot;Anchor link for: shi-yong-bigkeys-jian-cha-key-qing-kuang&quot;&gt;使用 bigkeys 检查 Key 情况&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;# redis-cli -h {host} --bigkeys
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# Scanning the entire keyspace to find biggest keys as well as
&lt;&#x2F;span&gt;&lt;span&gt;# average sizes per key type.  You can use -i 0.1 to sleep 0.1 sec
&lt;&#x2F;span&gt;&lt;span&gt;# per 100 SCAN commands (not usually needed).
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[00.00%] Biggest string found so far &amp;#39;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&amp;#39; with 1 bytes
&lt;&#x2F;span&gt;&lt;span&gt;[00.00%] Biggest string found so far &amp;#39;aaaaaaaaaaaaaaaaaaa&amp;#39; with 644 bytes
&lt;&#x2F;span&gt;&lt;span&gt;[00.00%] Biggest string found so far &amp;#39;aaaaaaaaaaaaaaaaaaa&amp;#39; with 664 bytes
&lt;&#x2F;span&gt;&lt;span&gt;[00.05%] Biggest string found so far &amp;#39;aaaaaaaaaaaaaaaaaaaa&amp;#39; with 668 bytes
&lt;&#x2F;span&gt;&lt;span&gt;[00.29%] Biggest string found so far &amp;#39;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&amp;#39; with 1312 bytes
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;-------- summary -------
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Sampled 269241 keys in the keyspace!
&lt;&#x2F;span&gt;&lt;span&gt;Total key length in bytes is 11026631 (avg len 40.95)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Biggest string found &amp;#39;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&amp;#39; has 1312 bytes
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;0 lists with 0 items (00.00% of keys, avg size 0.00)
&lt;&#x2F;span&gt;&lt;span&gt;0 hashs with 0 fields (00.00% of keys, avg size 0.00)
&lt;&#x2F;span&gt;&lt;span&gt;269241 strings with 45265771 bytes (100.00% of keys, avg size 168.12)
&lt;&#x2F;span&gt;&lt;span&gt;0 streams with 0 entries (00.00% of keys, avg size 0.00)
&lt;&#x2F;span&gt;&lt;span&gt;0 sets with 0 members (00.00% of keys, avg size 0.00)
&lt;&#x2F;span&gt;&lt;span&gt;0 zsets with 0 members (00.00% of keys, avg size 0.00)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# date
&lt;&#x2F;span&gt;&lt;span&gt;Fri Oct 28 11:33:23 JST 2022
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Key 整体分布均匀, 没有特别大的 Key 的情况.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ya-ma-xun-shi-li-shu-ju&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#ya-ma-xun-shi-li-shu-ju&quot; aria-label=&quot;Anchor link for: ya-ma-xun-shi-li-shu-ju&quot;&gt;亚马逊实例数据&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;slowlog-dian-xing-an-li&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#slowlog-dian-xing-an-li&quot; aria-label=&quot;Anchor link for: slowlog-dian-xing-an-li&quot;&gt;slowlog 典型案例&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;来自Redis 的 &lt;code&gt;SLOWLOG&lt;&#x2F;code&gt; 命令脱敏处理&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;CacheClusterId&amp;quot;: &amp;quot;prod-rate-redis-001&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;CacheNodeId&amp;quot;: &amp;quot;0001&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;Id&amp;quot;: 592,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;Timestamp&amp;quot;: 1666749122,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;Duration (us)&amp;quot;: 18331,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;Command&amp;quot;: &amp;quot;get ... (1 more arguments)&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;ClientAddress&amp;quot;: &amp;quot;172.22.20.210:46370&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;ke-hu-duan-ce-shi-shi-cpu-zhi-biao&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#ke-hu-duan-ce-shi-shi-cpu-zhi-biao&quot; aria-label=&quot;Anchor link for: ke-hu-duan-ce-shi-shi-cpu-zhi-biao&quot;&gt;客户端测试时 CPU 指标&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;memwey.github.io&#x2F;posts&#x2F;redis-troubleshooting&#x2F;images&#x2F;pic1.png&quot; alt=&quot;pic1&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;两个高峰分别是 &lt;code&gt;benchmark&lt;&#x2F;code&gt; 和 &lt;code&gt;bigkey&lt;&#x2F;code&gt; 操作引起.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wang-luo-zhi-biao&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#wang-luo-zhi-biao&quot; aria-label=&quot;Anchor link for: wang-luo-zhi-biao&quot;&gt;网络指标&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;memwey.github.io&#x2F;posts&#x2F;redis-troubleshooting&#x2F;images&#x2F;pic2.png&quot; alt=&quot;pic2&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;可以看到, &lt;code&gt;Redis&lt;&#x2F;code&gt; 网络数据速度每隔一小时会有一个突增.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;fen-xi&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#fen-xi&quot; aria-label=&quot;Anchor link for: fen-xi&quot;&gt;分析&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;Redis&lt;&#x2F;code&gt; 实例是有问题的, 简单操作耗时不能在 1ms 内返回, 99 分位在 10ms, 明显不是一个内存型数据库应有的性能.&lt;&#x2F;p&gt;
&lt;p&gt;由于在性能指标上一直看到 &lt;code&gt;Redis&lt;&#x2F;code&gt; 的 CPU 使用率不高, 导致了错误的排查方向, 以为是我们在使用上有问题. 实际上, 问题出在 &lt;code&gt;aws&lt;&#x2F;code&gt; 的实例上.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;aws&lt;&#x2F;code&gt; 的 t2 的实例以 20% 为性能基准, 低于 20% 累计积分, 其中积分累计有上限; 超过 20% 减少积分直至耗尽; 积分是以小时为单位积累的. 虽然没有具体的说明, 实际上 t2 实例的网络带宽也是有相应的积分限制的, 所以体现在网络指标上, 每隔一个小时出现一个特别的波峰.&lt;&#x2F;p&gt;
&lt;p&gt;另外, &lt;code&gt;aws&lt;&#x2F;code&gt; 标注的 t2 实例的网络性能是 &lt;code&gt;Low to Moderate&lt;&#x2F;code&gt;, 虽然没有官方的解释, 但是根据网友的测试, 基本上是 50Mbps 到 300Mbps. 这也解释了为何网络指标上一直在 6MB&#x2F;s 左右上下浮动.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;jie-lun&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#jie-lun&quot; aria-label=&quot;Anchor link for: jie-lun&quot;&gt;结论&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;使用了 &lt;code&gt;aws&lt;&#x2F;code&gt; 提供的 &lt;code&gt;t2.small&lt;&#x2F;code&gt; 实例, 在 CPU 性能, 网络性能上均有限制, 导致 &lt;code&gt;Redis&lt;&#x2F;code&gt; 实例出现超时的情况. 需要提高 &lt;code&gt;Redis&lt;&#x2F;code&gt; 实例的配置, 或者使用自建 &lt;code&gt;Redis&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;谨慎使用 &lt;code&gt;aws&lt;&#x2F;code&gt; 的实例类型; 在性能敏感的情况下, 不要使用 &lt;code&gt;aws&lt;&#x2F;code&gt; 的 t 类型实例, 一方面是有性能的积分的限制, 另一方面, 也容易碰到 &lt;a href=&quot;https:&#x2F;&#x2F;learn.microsoft.com&#x2F;en-us&#x2F;azure&#x2F;architecture&#x2F;antipatterns&#x2F;noisy-neighbor&#x2F;noisy-neighbor&quot;&gt;Noisy Neighbor&lt;&#x2F;a&gt; 的问题.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;can-kao-wen-dang&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#can-kao-wen-dang&quot; aria-label=&quot;Anchor link for: can-kao-wen-dang&quot;&gt;参考文档&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;redis.io&#x2F;docs&#x2F;reference&#x2F;optimization&#x2F;latency&#x2F;&quot;&gt;Diagnosing latency issues&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;xie.infoq.cn&#x2F;article&#x2F;fbd51c19883ddc1ae19fbc96b&quot;&gt;Redis 为什么变慢了？一文讲透如何排查 Redis 性能问题 | 万字长文&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.aliyun.com&#x2F;article&#x2F;702247&quot;&gt;分析网络超时问题的最佳实践&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;AmazonElastiCache&#x2F;latest&#x2F;red-ug&#x2F;TroubleshootingConnections.html&quot;&gt;Troubleshooting&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learn.microsoft.com&#x2F;en-us&#x2F;azure&#x2F;azure-cache-for-redis&#x2F;cache-troubleshoot-timeouts&quot;&gt;Troubleshoot Azure Cache for Redis latency and timeouts&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;aws.amazon.com&#x2F;cn&#x2F;ec2&#x2F;instance-types&#x2F;&quot;&gt;Amazon EC2 实例类型&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;20663619&#x2F;what-does-amazon-aws-mean-by-network-performance&quot;&gt;What does amazon aws mean by &quot;network performance&quot;?&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;aws&#x2F;comments&#x2F;d35sz9&#x2F;what_does_low_to_moderate_network_peformance_for&#x2F;&quot;&gt;What does &#x27;Low to Moderate&#x27; network peformance for an ElastiCache Node Type actually mean?&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;aws.amazon.com&#x2F;cn&#x2F;ec2&#x2F;instance-types&#x2F;#Burstable_Performance_Instances&quot;&gt;Amazon EC2 实例类型#具爆发能力的实例&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;fu-jian&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#fu-jian&quot; aria-label=&quot;Anchor link for: fu-jian&quot;&gt;附件&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;qa 环境下自建 Redis 性能测试&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;# redis-cli -h {host} -p 6379 --latency-history -i 5
&lt;&#x2F;span&gt;&lt;span&gt;min: 0, max: 3, avg: 0.34 (482 samples) -- 5.00 seconds range
&lt;&#x2F;span&gt;&lt;span&gt;min: 0, max: 1, avg: 0.33 (482 samples) -- 5.01 seconds range
&lt;&#x2F;span&gt;&lt;span&gt;min: 0, max: 1, avg: 0.32 (481 samples) -- 5.00 seconds range
&lt;&#x2F;span&gt;&lt;span&gt;min: 0, max: 3, avg: 0.33 (481 samples) -- 5.01 seconds range
&lt;&#x2F;span&gt;&lt;span&gt;min: 0, max: 4, avg: 0.32 (482 samples) -- 5.01 seconds range
&lt;&#x2F;span&gt;&lt;span&gt;min: 0, max: 3, avg: 0.31 (483 samples) -- 5.01 seconds range
&lt;&#x2F;span&gt;&lt;span&gt;min: 0, max: 1, avg: 0.30 (483 samples) -- 5.01 seconds range
&lt;&#x2F;span&gt;&lt;span&gt;min: 0, max: 1, avg: 0.29 (483 samples) -- 5.01 seconds range
&lt;&#x2F;span&gt;&lt;span&gt;min: 0, max: 1, avg: 0.31 (481 samples) -- 5.00 seconds range
&lt;&#x2F;span&gt;&lt;span&gt;min: 0, max: 1, avg: 0.32 (481 samples) -- 5.00 seconds range
&lt;&#x2F;span&gt;&lt;span&gt;min: 0, max: 1, avg: 0.28 (25 samples)^C
&lt;&#x2F;span&gt;&lt;span&gt;# date
&lt;&#x2F;span&gt;&lt;span&gt;Mon Oct 31 18:47:05 JST 2022
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;# redis-benchmark -h {host} -t set,get -c 50 -d 64
&lt;&#x2F;span&gt;&lt;span&gt;====== SET ======
&lt;&#x2F;span&gt;&lt;span&gt;  100000 requests completed in 1.36 seconds
&lt;&#x2F;span&gt;&lt;span&gt;  50 parallel clients
&lt;&#x2F;span&gt;&lt;span&gt;  64 bytes payload
&lt;&#x2F;span&gt;&lt;span&gt;  keep alive: 1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;99.88% &amp;lt;= 1 milliseconds
&lt;&#x2F;span&gt;&lt;span&gt;99.97% &amp;lt;= 2 milliseconds
&lt;&#x2F;span&gt;&lt;span&gt;99.99% &amp;lt;= 4 milliseconds
&lt;&#x2F;span&gt;&lt;span&gt;100.00% &amp;lt;= 5 milliseconds
&lt;&#x2F;span&gt;&lt;span&gt;100.00% &amp;lt;= 5 milliseconds
&lt;&#x2F;span&gt;&lt;span&gt;73313.78 requests per second
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;====== GET ======
&lt;&#x2F;span&gt;&lt;span&gt;  100000 requests completed in 1.30 seconds
&lt;&#x2F;span&gt;&lt;span&gt;  50 parallel clients
&lt;&#x2F;span&gt;&lt;span&gt;  64 bytes payload
&lt;&#x2F;span&gt;&lt;span&gt;  keep alive: 1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;99.90% &amp;lt;= 1 milliseconds
&lt;&#x2F;span&gt;&lt;span&gt;99.94% &amp;lt;= 2 milliseconds
&lt;&#x2F;span&gt;&lt;span&gt;99.95% &amp;lt;= 4 milliseconds
&lt;&#x2F;span&gt;&lt;span&gt;99.96% &amp;lt;= 5 milliseconds
&lt;&#x2F;span&gt;&lt;span&gt;100.00% &amp;lt;= 5 milliseconds
&lt;&#x2F;span&gt;&lt;span&gt;76628.36 requests per second
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# date
&lt;&#x2F;span&gt;&lt;span&gt;Mon Oct 31 18:48:10 JST 2022
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;99分位 10ms -&amp;gt; 999分位 1ms&lt;&#x2F;p&gt;
&lt;p&gt;不过自建 &lt;code&gt;Redis&lt;&#x2F;code&gt;, 由于是在 &lt;code&gt;EC2&lt;&#x2F;code&gt; 上的托管 Kubernetes 集群, 也需要注意 &lt;a href=&quot;https:&#x2F;&#x2F;learn.microsoft.com&#x2F;en-us&#x2F;azure&#x2F;architecture&#x2F;antipatterns&#x2F;noisy-neighbor&#x2F;noisy-neighbor&quot;&gt;Noisy Neighbor&lt;&#x2F;a&gt; 的问题.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;redis-chang-jian-wen-ti-pai-cha-si-lu&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#redis-chang-jian-wen-ti-pai-cha-si-lu&quot; aria-label=&quot;Anchor link for: redis-chang-jian-wen-ti-pai-cha-si-lu&quot;&gt;Redis 常见问题排查思路&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;除了本次遇到的实例性能限制问题, 排查 &lt;code&gt;Redis&lt;&#x2F;code&gt; 延迟问题时, 通常还可以从以下几个常见方面入手&lt;&#x2F;p&gt;
&lt;h3 id=&quot;lian-jie-chi-wen-ti&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#lian-jie-chi-wen-ti&quot; aria-label=&quot;Anchor link for: lian-jie-chi-wen-ti&quot;&gt;连接池问题&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Redis 配置连接池的重要参数 &lt;code&gt;MaxIdleOpen&lt;&#x2F;code&gt;, &lt;code&gt;IdleCloseTimeout&lt;&#x2F;code&gt;, 配置不当时, 查看端口占用会有大量 &lt;code&gt;TIME_WAIT&lt;&#x2F;code&gt;, &lt;code&gt;TCP&lt;&#x2F;code&gt; 的断开会有 2&lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;289194&#x2F;what-is-maximum-segment-lifetime-msl-in-tcp&quot;&gt;MSL&lt;&#x2F;a&gt; - MSL 在 Linux 默认 60s; 适当配置 keep-alive
&lt;img src=&quot;https:&#x2F;&#x2F;memwey.github.io&#x2F;posts&#x2F;redis-troubleshooting&#x2F;images&#x2F;tcp_open_close.jpeg&quot; alt=&quot;tcp&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;big-key&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#big-key&quot; aria-label=&quot;Anchor link for: big-key&quot;&gt;Big Key&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;单个 Key 内容过大, 单线程特性, 可能阻塞整个服务&lt;&#x2F;p&gt;
&lt;h3 id=&quot;hao-shi-cao-zuo&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#hao-shi-cao-zuo&quot; aria-label=&quot;Anchor link for: hao-shi-cao-zuo&quot;&gt;耗时操作&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;O(N)操作, &lt;code&gt;KEYS&lt;&#x2F;code&gt;, &lt;code&gt;SORT&lt;&#x2F;code&gt;, &lt;code&gt;LINDEX&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tong-shi-chao-shi&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#tong-shi-chao-shi&quot; aria-label=&quot;Anchor link for: tong-shi-chao-shi&quot;&gt;同时超时&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;超时淘汰方式 - lazy, active, 大量 (25%以上) Key 同时超时, 缓存预热, 超时增加随机因子&lt;&#x2F;p&gt;
&lt;h2 id=&quot;redis-fun-fact&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#redis-fun-fact&quot; aria-label=&quot;Anchor link for: redis-fun-fact&quot;&gt;Redis Fun Fact&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Redis 没有&quot;读写&quot;的区别&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;antirez.com&#x2F;news&#x2F;109&quot;&gt;Redis LRU 的近似实现&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;ziplist, 紧凑的内存布局, 用于优化存储小数据量的 &lt;code&gt;list&lt;&#x2F;code&gt;, &lt;code&gt;hash&lt;&#x2F;code&gt;, &lt;code&gt;zset&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Prometheus 手把手</title>
        <published>2022-05-10T16:36:07+08:00</published>
        <updated>2022-05-10T16:36:07+08:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://memwey.github.io/posts/prometheus-hand-over-hand/"/>
        <id>https://memwey.github.io/posts/prometheus-hand-over-hand/</id>
        
        <content type="html" xml:base="https://memwey.github.io/posts/prometheus-hand-over-hand/">&lt;p&gt;因为 Prometheus 在应用中一共只有四种 metric 类型, 只要根据需要监测的目标选择了 metrics 类型, 后续的告警以及可视化配置就有固定的套路了.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;counter&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#counter&quot; aria-label=&quot;Anchor link for: counter&quot;&gt;Counter&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Counter 用来监控单调递增的量, 当发生重置时 Prometheus 会自动处理归零的数据. 这是一个非常基本的类型, 一个系统中很多数据都可以通过此类型进行计数, 比如系统接受的请求数, 系统发生的错误数, 再比如对第三方接口的调用数, 第三方接口返回的错误数.&lt;&#x2F;p&gt;
&lt;p&gt;业务代码如下&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;prometheus_client &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;Counter
&lt;&#x2F;span&gt;&lt;span&gt;c = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Counter&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;web_request_total&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;web request total counter&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    [&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;method&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;endpoint&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;status_code&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;]
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;200&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inc&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;submit&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;500&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inc&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;此时在业务暴露出来的端点上会有这样两条记录&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;web_request_total{method=&amp;quot;&#x2F;submit&amp;quot;,method=&amp;quot;post&amp;quot;,status_code=&amp;quot;500&amp;quot;} 1
&lt;&#x2F;span&gt;&lt;span&gt;web_request_total{method=&amp;quot;&#x2F;&amp;quot;,method=&amp;quot;get&amp;quot;,status_code=&amp;quot;200&amp;quot;} 1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;对于 Counter 我们一般看增长量和增长速率&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sum(increase(web_request_total[5m]))&lt;&#x2F;code&gt; 五分钟内总请求数&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;sum(increase(web_request_total{status_code!~&quot;^2..&quot;}[1m]))&lt;&#x2F;code&gt; 一分钟内状态码不为2xx的总请求数&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;sum(irate(web_request_total[1m]))&lt;&#x2F;code&gt; 一分钟内总请求数增长率&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;告警则一般设置为&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;一分钟内总请求中有有超过 5% 的 5xx 错误, 持续一分钟&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;expr: sum(rate(web_request_total{status_code=~&amp;quot;^5..&amp;quot;}[1m])) &#x2F; sum(rate(web_request_total[1m])) * 100 &amp;gt; 5
&lt;&#x2F;span&gt;&lt;span&gt;for: 1m
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;一分钟内 5xx 错误的请求增长率高于 100%, 持续一分钟&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;expr: sum(irate(web_request_total{status_code=~&amp;quot;^5..&amp;quot;}[1m])) &amp;gt; 100
&lt;&#x2F;span&gt;&lt;span&gt;for: 1m
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;gauge&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#gauge&quot; aria-label=&quot;Anchor link for: gauge&quot;&gt;Gauge&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Gauge 是一个瞬时量, 在时间上来看是可增可减的, 用以记录系统在某个时刻的当前状态, 比如当前实例线程数, 当前系统负载, 某个队列的长度, 某个队列的消费延时等.&lt;&#x2F;p&gt;
&lt;p&gt;业务代码如下&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;prometheus_client &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;Gauge
&lt;&#x2F;span&gt;&lt;span&gt;g1 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Gauge&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;kafka_consumer_lag_seconds&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;kafka consume lag in second&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    [&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;topic&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;consumer_group&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;]
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;g1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;k-test&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;grp1&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;233&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;g2 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Gauge&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;redis_connection_pool_count&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;redis connection poll count&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    [&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;]
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;g2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;idle&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;g2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;active&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;22&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;g2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;total&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;32&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;此时在业务暴露出来的端点上会有这样的记录&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;kafka_consumer_lag_seconds{topic=&amp;quot;k-test&amp;quot;,consumer_group=&amp;quot;grp1&amp;quot;} 233
&lt;&#x2F;span&gt;&lt;span&gt;redis_connection_pool_count{state=&amp;quot;idle&amp;quot;} 10
&lt;&#x2F;span&gt;&lt;span&gt;redis_connection_pool_count{state=&amp;quot;active&amp;quot;} 22
&lt;&#x2F;span&gt;&lt;span&gt;redis_connection_pool_count{state=&amp;quot;total&amp;quot;} 32
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;对于 Gauge 我们一般直接看其值或者其值的百分比&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;kafka_consumer_lag_seconds{topic=&quot;k-test&quot;}&lt;&#x2F;code&gt; 查看 k-test 这个 topic 最新的消费延迟&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;avg_over_time(kafka_consumer_lag_seconds[1m])&lt;&#x2F;code&gt; 查看应用全部 kafka 队列一分钟的平均消费延时&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;max_over_time(kafka_consumer_lag_seconds[1m])&lt;&#x2F;code&gt; 查看应用全部 kafka 队列每一分钟内的最大消费延时&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;redis_connection_pool_count{state=&quot;active&quot;} &#x2F; ignoring(state) redis_connection_pool_count{state=&quot;total&quot;}&lt;&#x2F;code&gt; 查看应用 redis 连接池的使用百分比&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;告警则一般设置为&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;一分钟内队列的平均消费延时大于 10min, 持续一分钟&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;expr: avg_over_time(kafka_consumer_lag_seconds[1m]) &amp;gt; 600
&lt;&#x2F;span&gt;&lt;span&gt;for: 1m
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;Redis 连接池平均占用超过 90%, 持续一分钟&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;expr: avg_over_time(redis_connection_pool_count{state=&amp;quot;active&amp;quot;}[1m]) &#x2F;  ignoring(state) avg_over_time(redis_connection_pool_count{state=&amp;quot;total&amp;quot;}[1m]) * 100 &amp;gt; 90
&lt;&#x2F;span&gt;&lt;span&gt;for: 1m
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;histogram-he-summary&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#histogram-he-summary&quot; aria-label=&quot;Anchor link for: histogram-he-summary&quot;&gt;Histogram 和 Summary&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Histogram 可以看作是一个复合的 Counter 类型, 它会将数值按区间计数, 常用于记录 P99, P95 类的数据. 可以用来记录比如接口响应耗时情况, 接口返回数据大小情况等.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;prometheus_client &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;Histogram
&lt;&#x2F;span&gt;&lt;span&gt;h = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Histogram&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http_request_duration_seconds&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Api requests response time in seconds&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    [&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;api&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;method&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;], (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.25&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;h.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;products&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;observe&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.0923&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;h.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;products&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;observe&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.3672&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;此时在业务暴露出来的端点上会有这样的记录, 产生了多条数据, 其中 &lt;code&gt;_sum&lt;&#x2F;code&gt; 是值的总和, &lt;code&gt;_count&lt;&#x2F;code&gt; 是值的计数, &lt;code&gt;_bucket&lt;&#x2F;code&gt; 中有一个命名为 &lt;code&gt;le&lt;&#x2F;code&gt; 特殊的 label, 其中的区间值是我们在代码中配置的, 是值在区间内的计数.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;http_request_duration_seconds_sum{api=&amp;quot;&#x2F;products&amp;quot;, &amp;quot;method&amp;quot;=&amp;quot;post&amp;quot;} 0.4595
&lt;&#x2F;span&gt;&lt;span&gt;http_request_duration_seconds_count{api=&amp;quot;&#x2F;products&amp;quot;, &amp;quot;method&amp;quot;=&amp;quot;post&amp;quot;} 2
&lt;&#x2F;span&gt;&lt;span&gt;http_request_duration_seconds_bucket{api=&amp;quot;&#x2F;products&amp;quot;, &amp;quot;method&amp;quot;=&amp;quot;post&amp;quot;, le=&amp;quot;0.1&amp;quot;} 1
&lt;&#x2F;span&gt;&lt;span&gt;http_request_duration_seconds_bucket{api=&amp;quot;&#x2F;products&amp;quot;, &amp;quot;method&amp;quot;=&amp;quot;post&amp;quot;, le=&amp;quot;0.25&amp;quot;} 1
&lt;&#x2F;span&gt;&lt;span&gt;http_request_duration_seconds_bucket{api=&amp;quot;&#x2F;products&amp;quot;, &amp;quot;method&amp;quot;=&amp;quot;post&amp;quot;, le=&amp;quot;1&amp;quot;} 2
&lt;&#x2F;span&gt;&lt;span&gt;http_request_duration_seconds_bucket{api=&amp;quot;&#x2F;products&amp;quot;, &amp;quot;method&amp;quot;=&amp;quot;post&amp;quot;, le=&amp;quot;4&amp;quot;} 2
&lt;&#x2F;span&gt;&lt;span&gt;http_request_duration_seconds_bucket{api=&amp;quot;&#x2F;products&amp;quot;, &amp;quot;method&amp;quot;=&amp;quot;post&amp;quot;, le=&amp;quot;10&amp;quot;} 2
&lt;&#x2F;span&gt;&lt;span&gt;http_request_duration_seconds_bucket{api=&amp;quot;&#x2F;products&amp;quot;, &amp;quot;method&amp;quot;=&amp;quot;post&amp;quot;, le=&amp;quot;+Inf&amp;quot;} 2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;对于 Histogram 一般可以求均值或者 P95, P99 之类的值, 也可以做普通的 Counter 使用&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rate(http_request_duration_seconds_sum{api=&quot;&#x2F;products&quot;, &quot;method&quot;=&quot;post&quot;}[5m]) &#x2F; rate(http_request_duration_seconds_count{api=&quot;&#x2F;products&quot;, &quot;method&quot;=&quot;post&quot;}[5m])&lt;&#x2F;code&gt; 查看 &#x2F;products 端点上 POST 请求五分钟内的耗时均值&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;histogram_quantile(0.99, rate(http_request_duration_seconds_bucket{api=&quot;&#x2F;products&quot;, &quot;method&quot;=&quot;post&quot;}[5m]))&lt;&#x2F;code&gt; 查看 &#x2F;products 端点上 POST 请求五分钟内的耗时 P99&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;increase(http_request_duration_seconds_count{api=&quot;&#x2F;products&quot;, &quot;method&quot;=&quot;post&quot;}[1m])&lt;&#x2F;code&gt; 查看 &#x2F;products 端点上 POST 请求一分钟内的请求数&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;告警则一般设置为&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;两分钟内某个接口 P95 大于 10s, 持续两分钟&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;expr: histogram_quantile(0.95, sum(rate(http_request_duration_seconds_bucket[2m])) by (api, method)) &amp;gt; 10
&lt;&#x2F;span&gt;&lt;span&gt;for: 2m
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;一些有用的资料&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;awesome-prometheus-alerts.grep.to&#x2F;rules&quot;&gt;awesome-prometheus-alerts&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;grafana.com&#x2F;blog&#x2F;2020&#x2F;06&#x2F;23&#x2F;how-to-visualize-prometheus-histograms-in-grafana&#x2F;&quot;&gt;How to visualize Prometheus histograms in Grafana&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Prometheus 从入门到放弃</title>
        <published>2022-04-17T16:30:08+08:00</published>
        <updated>2022-04-17T16:30:08+08:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://memwey.github.io/posts/prometheus-from-scratch/"/>
        <id>https://memwey.github.io/posts/prometheus-from-scratch/</id>
        
        <content type="html" xml:base="https://memwey.github.io/posts/prometheus-from-scratch/">&lt;h2 id=&quot;ji-ben-gai-nian&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#ji-ben-gai-nian&quot; aria-label=&quot;Anchor link for: ji-ben-gai-nian&quot;&gt;基本概念&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Prometheus 是一个开源的监控方案, &lt;a href=&quot;https:&#x2F;&#x2F;cncf.io&#x2F;&quot;&gt;CNCF&lt;&#x2F;a&gt; 的毕业项目, 云原生监控的事实标准. Prometheus 以时间序列数据的形式收集和存储 &lt;code&gt;metrics&lt;&#x2F;code&gt;. &lt;code&gt;Metrics&lt;&#x2F;code&gt; 信息与被称为标签的可选的键值对和记录时间一起保存.&lt;&#x2F;p&gt;
&lt;p&gt;Prometheus 的主要功能特点有&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;由 &lt;code&gt;metric&lt;&#x2F;code&gt; 的名称以及 Key&#x2F;Value 对标签标识的&lt;code&gt;时间序列&lt;&#x2F;code&gt;数据组成的多维&lt;a href=&quot;https:&#x2F;&#x2F;prometheus.io&#x2F;docs&#x2F;concepts&#x2F;data_model&#x2F;&quot;&gt;数据模型&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;灵活的查询语言 &lt;a href=&quot;https:&#x2F;&#x2F;prometheus.io&#x2F;docs&#x2F;prometheus&#x2F;latest&#x2F;querying&#x2F;basics&#x2F;&quot;&gt;PromQL&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;不依赖分布式存储; 单服务节点自治能力&lt;&#x2F;li&gt;
&lt;li&gt;服务端通过 HTTP 协议拉取获得的时间序列数据&lt;&#x2F;li&gt;
&lt;li&gt;支持通过中间网关&lt;a href=&quot;https:&#x2F;&#x2F;prometheus.io&#x2F;docs&#x2F;instrumenting&#x2F;pushing&#x2F;&quot;&gt;推送时间序列数据&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;通过服务发现或静态配置文件发现监控目标&lt;&#x2F;li&gt;
&lt;li&gt;支持多种类型的图表和仪表盘&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Prometheus 以拉取的模式获取获取监控数据, 而不是由业务方向监控服务器推送. 这对于被监控的业务来说, 极大的减少了监控部分在系统中的耦合. 通常, 业务暴露出一个 HTTP 端口以暴露数据, 供 Prometheus server 抓取即可.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;metric&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#metric&quot; aria-label=&quot;Anchor link for: metric&quot;&gt;Metric&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;一般来说, &lt;code&gt;Metric&lt;&#x2F;code&gt; 是数值形式的标量单位, 它是与时间一起被记录的时间序列. 在不同应用中用户期望记录不同的 &lt;code&gt;Metric&lt;&#x2F;code&gt;. Web server 可能要希望请求数和一些指标信息, 数据库可能希望记录活跃连接数和活跃查询数之类的.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xi-tong-jia-gou&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#xi-tong-jia-gou&quot; aria-label=&quot;Anchor link for: xi-tong-jia-gou&quot;&gt;系统架构&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;主要的 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;prometheus&#x2F;prometheus&quot;&gt;Prometheus server&lt;&#x2F;a&gt; 收集和存储时间序列数据&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;prometheus.io&#x2F;docs&#x2F;instrumenting&#x2F;clientlibs&#x2F;&quot;&gt;客户端库&lt;&#x2F;a&gt; 用以监测应用程序代码&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;prometheus&#x2F;pushgateway&quot;&gt;push gateway&lt;&#x2F;a&gt; 用以支持短期运行的任务&lt;&#x2F;li&gt;
&lt;li&gt;用以监控 HAProxy, StatsD, Graphite 等常用服务的 &lt;a href=&quot;https:&#x2F;&#x2F;prometheus.io&#x2F;docs&#x2F;instrumenting&#x2F;exporters&#x2F;&quot;&gt;exporters&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;用以处理告警的 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;prometheus&#x2F;alertmanager&quot;&gt;alertmanager&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;其他各种支持工具&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;memwey.github.io&#x2F;posts&#x2F;prometheus-from-scratch&#x2F;images&#x2F;architecture.png&quot; alt=&quot;系统架构图&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;gua-yong-chang-jing&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#gua-yong-chang-jing&quot; aria-label=&quot;Anchor link for: gua-yong-chang-jing&quot;&gt;适用场景&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Prometheus 适合记录任何纯数值的时间序列。它既适合以机器为中心的监控, 也适合监控高度动态的面向服务的体系结构. 它对多维数据收集和查询的支持在微服务的场景中拥有特别的优势.&lt;&#x2F;p&gt;
&lt;p&gt;Prometheus 基于可靠性设计, 以保证在出现问题时可以快速进行问题诊断. 每个 Prometheus server 都是独立的, 不依赖于网络存储或其他远程服务. 当基础设施的其他部分出现故障时, 这种架构非常可靠, 另一方面, 它不需要配置大量的基础设施.&lt;&#x2F;p&gt;
&lt;p&gt;Prometheus 不适合需要 100% 的准确性的场景, 例如记录单个的计费请求, 收集的数据可能不够详细和完整. 在这种情况下应使用其他系统来收集和分析计费数据, 使用 Prometheus 进行其余的监控.&lt;&#x2F;p&gt;
&lt;p&gt;这里说的比较笼统, 从构建系统可观测性的监控来说, 我们有 &lt;code&gt;Metrics&lt;&#x2F;code&gt; , &lt;code&gt;Tracing&lt;&#x2F;code&gt; 和 &lt;code&gt;Logging&lt;&#x2F;code&gt;. 它们有各自的特点, &lt;code&gt;Metrics&lt;&#x2F;code&gt; 的特点是可聚合的, 它们是组成一个量计, 计数器或者直方图的最小单位. &lt;code&gt;Logging&lt;&#x2F;code&gt; 处理一系列离散事件. 而 &lt;code&gt;Tracing&lt;&#x2F;code&gt; 处理整个请求范围内的信息, 数据或元数据应当绑定到系统中单个事务对象的生命周期中.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;memwey.github.io&#x2F;posts&#x2F;prometheus-from-scratch&#x2F;images&#x2F;Obervation-Venn.png&quot; alt=&quot;可观测性韦恩图&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Prometheus 是个典型的 &lt;code&gt;Metrics&lt;&#x2F;code&gt; 系统, 它为系统打点, 追踪系统整体的运行情况. 比如, 记录 Web 系统中的所有请求的 HTTP 状态码, 当一段时间中 500 错误大量出现时, 可以通过配置的聚合和趋势分析发现问题并提供告警, 但它没有记录具体的请求内容, 想要复现错误的请求, 则需要 &lt;code&gt;Tracing&lt;&#x2F;code&gt; 和 &lt;code&gt;Logging&lt;&#x2F;code&gt; 系统进行进一步的诊断.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;kuai-su-ru-men&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#kuai-su-ru-men&quot; aria-label=&quot;Anchor link for: kuai-su-ru-men&quot;&gt;快速入门&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;shu-ju-mo-xing&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#shu-ju-mo-xing&quot; aria-label=&quot;Anchor link for: shu-ju-mo-xing&quot;&gt;数据模型&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;metric-and-label&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#metric-and-label&quot; aria-label=&quot;Anchor link for: metric-and-label&quot;&gt;Metric and Label&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Prometheus 在底层将所有属于同一指标名称, 同一标签集合的, 有时间戳标记的数据流存储为时间序列数据.&lt;&#x2F;p&gt;
&lt;p&gt;数据模型的表示方式为&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;lt;metric name&amp;gt;{&amp;lt;label name&amp;gt;=&amp;lt;label value&amp;gt;, ...}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;且有以下规则&lt;&#x2F;p&gt;
&lt;h5 id=&quot;metric-name&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#metric-name&quot; aria-label=&quot;Anchor link for: metric-name&quot;&gt;metric name&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;匹配正则 &lt;code&gt;[a-zA-Z_:][a-zA-Z0-9_:]*&lt;&#x2F;code&gt;, 其中 &lt;code&gt;:&lt;&#x2F;code&gt; 是用户自定义记录规则的标记, 不应该用在业务暴露的指标中&lt;&#x2F;p&gt;
&lt;h5 id=&quot;label-name&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#label-name&quot; aria-label=&quot;Anchor link for: label-name&quot;&gt;label name&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;匹配正则 &lt;code&gt;[a-zA-Z_][a-zA-Z0-9_]*&lt;&#x2F;code&gt;, 其中以 &lt;code&gt;__&lt;&#x2F;code&gt; 开头的是系统保留命名&lt;&#x2F;p&gt;
&lt;h4 id=&quot;sample&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#sample&quot; aria-label=&quot;Anchor link for: sample&quot;&gt;Sample&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Sample 的 value 总是为一个 float64 值&lt;&#x2F;p&gt;
&lt;p&gt;以关系型数据库来类比, metric_name 相当于表名, label_name 相当于列名, label_value 相当某一字段的值, 而 metric_value 和 timestamp 的列是系统自动生成的.&lt;&#x2F;p&gt;
&lt;p&gt;比如如下名为 &lt;code&gt;api_http_requests_total&lt;&#x2F;code&gt; 指标表示了 API 所有的 HTTP 请求数, 其中标签 &lt;code&gt;method&lt;&#x2F;code&gt; 指定了方法, &lt;code&gt;handler&lt;&#x2F;code&gt; 指定了路径, 分别为 &lt;code&gt;method=&quot;POST&quot;&lt;&#x2F;code&gt; 和 &lt;code&gt;handler=&quot;&#x2F;messages&quot;&lt;&#x2F;code&gt;, 此样本的值为 11&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;api_http_requests_total{method=&amp;quot;POST&amp;quot;, handler=&amp;quot;&#x2F;messages&amp;quot;} 11
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;CREATE TABLE &lt;&#x2F;span&gt;&lt;span&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;api_http_requests_total&lt;&#x2F;span&gt;&lt;span&gt;` (
&lt;&#x2F;span&gt;&lt;span&gt;    `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;timestamp&lt;&#x2F;span&gt;&lt;span&gt;` &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;timestamp&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;method&lt;&#x2F;span&gt;&lt;span&gt;` &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;varchar&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;255&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;handler&lt;&#x2F;span&gt;&lt;span&gt;` &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;varchar&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;255&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;` double
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM &lt;&#x2F;span&gt;&lt;span&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;api_http_requests_total&lt;&#x2F;span&gt;&lt;span&gt;`;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;------------+--------+-----------+-------+
&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;timestamp&lt;&#x2F;span&gt;&lt;span&gt;  | method |  handler  | value |
&lt;&#x2F;span&gt;&lt;span&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;------------+--------+-----------+-------+
&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1649235184&lt;&#x2F;span&gt;&lt;span&gt; |  POST  | &#x2F;messages |   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span&gt;  |
&lt;&#x2F;span&gt;&lt;span&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;------------+--------+-----------+-------+
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;metric-1&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#metric-1&quot; aria-label=&quot;Anchor link for: metric-1&quot;&gt;Metric&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Prometheus 提供了以下一些类型 &lt;code&gt;metrics&lt;&#x2F;code&gt; 类型&lt;&#x2F;p&gt;
&lt;h4 id=&quot;counter&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#counter&quot; aria-label=&quot;Anchor link for: counter&quot;&gt;Counter&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Counter 类型代表一种样本数据单调递增的指标, 即除非监控系统发生了重置, 只增不减.&lt;&#x2F;p&gt;
&lt;p&gt;例子: 系统接受的请求数, 系统错误数, 系统 uptime&lt;&#x2F;p&gt;
&lt;h4 id=&quot;gauge&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#gauge&quot; aria-label=&quot;Anchor link for: gauge&quot;&gt;Gauge&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Gauge 类型代表一种样本数据可以任意变化的指标, 即可增可减.&lt;&#x2F;p&gt;
&lt;p&gt;例子: 当前实例线程数, 当前系统负载&lt;&#x2F;p&gt;
&lt;h4 id=&quot;histogram-he-summary&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#histogram-he-summary&quot; aria-label=&quot;Anchor link for: histogram-he-summary&quot;&gt;Histogram 和 Summary&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Histogram 和 Summary 用以对数据进行采样并储存其分布情况. 不同的是, Histogram 指定其配置的区间, 而 Summary 配置其分位数.&lt;&#x2F;p&gt;
&lt;p&gt;举一个具体的例子, 假设需要统计某个 WEB 页面的响应时间, 使用 Histogram 时, 需要配置其响应时间区间, &amp;lt;10ms, 10ms-100ms, 100ms-1000ms, &amp;gt;1000ms, 返回的数据如下&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;http_response_latency_range_bucket{le=&amp;quot;0.01&amp;quot;} 123
&lt;&#x2F;span&gt;&lt;span&gt;http_response_latency_range_bucket{le=&amp;quot;0.1&amp;quot;} 214
&lt;&#x2F;span&gt;&lt;span&gt;http_response_latency_range_bucket{le=&amp;quot;1&amp;quot;} 215
&lt;&#x2F;span&gt;&lt;span&gt;http_response_latency_range_bucket{le=&amp;quot;+Inf&amp;quot;} 216
&lt;&#x2F;span&gt;&lt;span&gt;http_response_latency_range_sum 2.888716127000002
&lt;&#x2F;span&gt;&lt;span&gt;http_response_latency_range_count 216
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;使用 Summary 时, 则配置 0.5, 0.9, 0.99, 代表了其50分位, 即中位数, 90分位, 99分位的值&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;http_response_latency{quantile=&amp;quot;0.5&amp;quot;} 0.012352463
&lt;&#x2F;span&gt;&lt;span&gt;http_response_latency{quantile=&amp;quot;0.9&amp;quot;} 0.014458005
&lt;&#x2F;span&gt;&lt;span&gt;http_response_latency{quantile=&amp;quot;0.99&amp;quot;} 0.017316173
&lt;&#x2F;span&gt;&lt;span&gt;http_response_latency_sum 2.888716127000002
&lt;&#x2F;span&gt;&lt;span&gt;http_response_latency_count 216
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;此时可以看到, 这个 HTTP 接口一共接受了 216 次请求, 一共耗时使用了 2.88s, Histogram 展示了具体数值分布, 123 个在 10ms 内, 有 216 - 215 = 1 个请求耗时超过了 1000ms. Summary 展示了分布的百分位, 中位数是 0.012s, 99分位是 0.017s.&lt;&#x2F;p&gt;
&lt;p&gt;通常我们使用 Histogram 即可, Summary 会使用较多的内存构造一个滑动窗口来做统计.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zhu-yi-shi-xiang&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#zhu-yi-shi-xiang&quot; aria-label=&quot;Anchor link for: zhu-yi-shi-xiang&quot;&gt;注意事项&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;每个键值标签对的唯一组合都代表一个新的时间序列, 这会显著增加暴露的指标数和存储的数据量. 不要使用标签存储具有高基数, 即拥有许多不同的标签值的维度, 例如用户id, restful 的实际路径参数等.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;&#x2F; Good
&lt;&#x2F;span&gt;&lt;span&gt;http_request_total{path=&amp;quot;users&#x2F;{:user_id}&#x2F;info&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; Bad
&lt;&#x2F;span&gt;&lt;span&gt;http_request_total{path=&amp;quot;users&#x2F;1&#x2F;info&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;http_request_total{path=&amp;quot;users&#x2F;2&#x2F;info&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;http_request_total{path=&amp;quot;users&#x2F;3&#x2F;info&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;http_request_total{path=&amp;quot;users&#x2F;4&#x2F;info&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; Good
&lt;&#x2F;span&gt;&lt;span&gt;crawler_failure_total{target=&amp;quot;tiktok&amp;quot;,scope=&amp;quot;user&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; Bad
&lt;&#x2F;span&gt;&lt;span&gt;crawler_failure_total{target=&amp;quot;tiktok&amp;quot;,user=&amp;quot;damonlvu&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;crawler_failure_total{target=&amp;quot;tiktok&amp;quot;,user=&amp;quot;77777777777ge&amp;quot;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在 Prometheus 中, Metric 和 Label 的命名应该总是使用 &lt;code&gt;snake_case&lt;&#x2F;code&gt; 形式, 以便后续的处理归类分割等操作.&lt;&#x2F;p&gt;
&lt;p&gt;一个 Metric 的前缀总应该使用应用名, 可以理解为一个命名空间, 例如&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;prometheus&lt;&#x2F;strong&gt;_notifications_total (Prometheus 的内部指标)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;doris&lt;&#x2F;strong&gt;_consumption_latency_seconds (doris 的消费延时)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;crawler&lt;&#x2F;strong&gt;_failure_total (爬虫的总失败数)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;crawler&lt;&#x2F;strong&gt;_request_total (爬虫的总请求数)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;一个 Metric 总应该以其单位的复数形式为后缀, 并且单位应该尽量统一, 如果是一个累积的计数, 总应该使用 &lt;code&gt;total&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;node_memory_usage_&lt;strong&gt;bytes&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;http_requests_&lt;strong&gt;total&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;process_cpu_&lt;strong&gt;seconds_total&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;zhua-qu-she-zhi&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#zhua-qu-she-zhi&quot; aria-label=&quot;Anchor link for: zhua-qu-she-zhi&quot;&gt;抓取设置&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;通过 &lt;code&gt;Prometheus Operator&lt;&#x2F;code&gt; 的 &lt;code&gt;ServiceMonitor&lt;&#x2F;code&gt; 对象, 可以相对便捷的, 通过不直接修改 prometheus config 的方式添加抓取目标.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;monitoring.coreos.com&#x2F;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ServiceMonitor
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;example-service-monitor
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;team&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ops
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;selector&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;matchLabels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;svc-label-key&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;svc-label-value
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;endpoints&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;port&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;80
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;metrics
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;上面的实例指定了一个名为 example-service-monitor 的 &lt;code&gt;ServiceMonitor&lt;&#x2F;code&gt;, 它会选择所有 svc-label-key 的值为 svc-label-value 的 Service 进行监控, 目标端口为 80, HTTP 路径为 &#x2F;metrics. Service 背后可能存在超过一个的无状态的 Pod, 他们会被自动发现.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Prometheus Operator&lt;&#x2F;code&gt; 会解析 &lt;code&gt;ServiceMonitor&lt;&#x2F;code&gt; 对象, 生成相应的抓取设置到 prometheus config.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zhi-biao-xuan-ze&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#zhi-biao-xuan-ze&quot; aria-label=&quot;Anchor link for: zhi-biao-xuan-ze&quot;&gt;指标选择&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;一般 exporter 会采集很多的指标, 比如 jvm 的运行情况, http 请求情况等等. Google 在 &lt;code&gt;SRE Handbook&lt;&#x2F;code&gt; 中提出了四个黄金信号: 延迟, 流量, 错误数, 饱和度. 实际操作中可以使用 &lt;code&gt;USE&lt;&#x2F;code&gt; 或 &lt;code&gt;RED&lt;&#x2F;code&gt; 方法作为指导, &lt;code&gt;USE(Utilization, Saturation, Errors)&lt;&#x2F;code&gt; 用于资源, &lt;code&gt;RED(Rate, Errors, Duration)&lt;&#x2F;code&gt; 用于服务.&lt;&#x2F;p&gt;
&lt;p&gt;一般的在线服务, 比如 Web 服务, 数据库等, 一般关心请求速率, 延迟和错误率, 使用 RED 方法; 一般的离线服务, 如日志处理, 消息队列等, 一般关注队列数量, 进行中的数量, 处理速度以及发生的错误, 使用 USE 方法.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;rate-su-lu&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#rate-su-lu&quot; aria-label=&quot;Anchor link for: rate-su-lu&quot;&gt;Rate 速率&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;sum(rate(http_server_requests_seconds_count[5m])) by (method, uri, job)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;统计访问的 QPS&lt;&#x2F;p&gt;
&lt;h3 id=&quot;errors-cuo-wu&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#errors-cuo-wu&quot; aria-label=&quot;Anchor link for: errors-cuo-wu&quot;&gt;Errors 错误&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;rate(http_server_requests_seconds_count{status=~&amp;quot;^5..$&amp;quot;}[5m]) &#x2F; rate(http_server_requests_seconds_count[5m])
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;统计 HTTP 状态码为 5xx 的比例&lt;&#x2F;p&gt;
&lt;h3 id=&quot;duration-qing-qiu-shi-jian&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#duration-qing-qiu-shi-jian&quot; aria-label=&quot;Anchor link for: duration-qing-qiu-shi-jian&quot;&gt;Duration 请求时间&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;sum by (job, uri, method) (rate(http_server_requests_seconds_sum[5m]) &#x2F; rate(http_server_requests_seconds_count[5m]))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;统计平均请求时间&lt;&#x2F;p&gt;
&lt;h2 id=&quot;can-kao-zi-liao&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#can-kao-zi-liao&quot; aria-label=&quot;Anchor link for: can-kao-zi-liao&quot;&gt;参考资料&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;prometheus.io&#x2F;docs&#x2F;introduction&#x2F;overview&#x2F;&quot;&gt;What is Prometheus?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;peter.bourgon.org&#x2F;blog&#x2F;2017&#x2F;02&#x2F;21&#x2F;metrics-tracing-and-logging.html&quot;&gt;Metrics, tracing, and logging&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;yasongxu.gitbook.io&#x2F;container-monitor&#x2F;&quot;&gt;container-monitor-book&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>一个离职小记</title>
        <published>2021-06-06T23:29:39+08:00</published>
        <updated>2021-06-06T23:29:39+08:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://memwey.github.io/posts/job-hopping/"/>
        <id>https://memwey.github.io/posts/job-hopping/</id>
        
        <content type="html" xml:base="https://memwey.github.io/posts/job-hopping/">&lt;p&gt;从一家创业公司离职, 去另外一家创业公司.&lt;&#x2F;p&gt;
&lt;p&gt;在家待了一个月多一点, 期间解决了一下家里的大事小情, 复习刷题和面试, 开始巴西柔术的学习, 控制饮食和运动, 刷 &lt;code&gt;Bilibili&lt;&#x2F;code&gt; 什么的. 然而最重要的婚礼因为突如其来的疫情只能被迫延后了.&lt;&#x2F;p&gt;
&lt;p&gt;不得不说, 广州的机会真的不多. 一开始找了几家中等级别的公司面试练手, 结果发现没有达到那种面的我怀疑人生然后努力复习的结果, 随手就面过, 回家接着摸鱼. 然后抱有比较大希望的腾讯和字节都因为各种各样奇怪的原因连面试都没有, 不得不说和某些公司就是没有缘分.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;chi-kai-de-yuan-yin&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#chi-kai-de-yuan-yin&quot; aria-label=&quot;Anchor link for: chi-kai-de-yuan-yin&quot;&gt;离开的原因&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;其实我觉得还是离开上一家公司的太迟了. 年初拿到 &lt;a href=&quot;https:&#x2F;&#x2F;www.edison.tech&#x2F;&quot;&gt;Edison&lt;&#x2F;a&gt; 的 Offer 的时候就应该离开了.&lt;&#x2F;p&gt;
&lt;p&gt;有种观点认为, 对于一个创业来说, 最重要的是团队, 尤其是最初共同创业的团队, 业务都是在其次. 但是上一家公司在去年第三季度的时候就出现了一波离职潮, 基本上所有作为公司创始成员的老员工都离职了. 曾经工资都发不出来的时期没有离开, 现在拿到融资了业务有一些眉目了反而离开了, 可能这就是可以共患难而不能同富贵吧.&lt;&#x2F;p&gt;
&lt;p&gt;当然可能并不是钱的问题. 老板自己承认自己有暴力沟通的问题. 不过, 能不能认识到是一回事, 能不能控制是另外一回事. 人总不可能不犯错, 往好了说是老板真性情, 往坏了说就是老板抓住一点错误就大做文章, 哭爹骂娘什么的.&lt;&#x2F;p&gt;
&lt;p&gt;创业有一个相当不好平衡的问题. 创业公司当然希望团队成员能力超群, 能解决各种各样的问题, 但是除了少数带有光环的创业公司, 资金一般都不是那么充裕的. 对于优秀的求职者来说, 既然是创业, 风险更高, 为何要放弃差不多甚至更低的短期回报, 来承担更高的风险呢. 这也是上面提到的最初共同创业的团队非常重要的原因之一.&lt;&#x2F;p&gt;
&lt;p&gt;在上一家公司, 老板可能是想出了解决办法. 团队中少数的优秀员工负责, 带领一些能力一般的员工. 作为后端负责人, 经常梳理产品设计, 团队代码审查就把工作时间占满了, 写代码只能加班. 有次私下跟老板吐槽一个产品经理, 根本发现不了用户需求, 一个功能上线了四五版, 都解决不了用户的问题. 老板一句话顶回来了: 你知道她一个月多少钱吗, 五千.&lt;&#x2F;p&gt;
&lt;p&gt;在这种同事能力参差, 而老板有时又格外苛责的情况下, 压力确实比较大, 情绪比较消沉, 有段时间天天想请假, 想到要去上班就头疼. 最终还是决定离职了.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;xuan-ze-de-yuan-yin&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#xuan-ze-de-yuan-yin&quot; aria-label=&quot;Anchor link for: xuan-ze-de-yuan-yin&quot;&gt;选择的原因&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;又来到一家创业公司其实自己都蛮没想到的, 毕竟最初的构想是去大公司做一些基础架构的开发, 远离枯燥重复的业务开发.&lt;&#x2F;p&gt;
&lt;p&gt;这家公司最吸引的可能就是微信顶级产品经理带队吧. 这几年的工作也算是接触过不少产品经理, 有厉害的也有水平一般的, 感觉产品经理是一个有手就能做的职业, 但是水平高的产品经理确实无法替代. 想近距离接触一下传说中的微信之母, 直接向张小龙汇报的产品经理, 看看她们的思维和做事是什么样的.&lt;&#x2F;p&gt;
&lt;p&gt;另外, 这家公司光环比较强, 资金比较充足, 薪酬福利什么的都挺不错的, 完美的解决了创业公司的一些问题.&lt;&#x2F;p&gt;
&lt;p&gt;不过个人还是觉得在目前公司主要产品上, 有一些隐患, 在熟人IM和陌生人社交上有点定位不清. 而且在熟人IM上, 很难看到短期内的盈利空间. 但是毕竟不是专业的产品经理, 所有的看法都是基于已有的产品, 比如微信, 陌陌, Soul 什么的. 厉害的产品经理可以发现别人发现不到的需求, 万一呢.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Redis ZINTERSTORE</title>
        <published>2021-04-21T20:30:43+08:00</published>
        <updated>2021-04-21T20:30:43+08:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://memwey.github.io/posts/redis-zinterstore/"/>
        <id>https://memwey.github.io/posts/redis-zinterstore/</id>
        
        <content type="html" xml:base="https://memwey.github.io/posts/redis-zinterstore/">&lt;h2 id=&quot;jie-gou-tui-ce&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#jie-gou-tui-ce&quot; aria-label=&quot;Anchor link for: jie-gou-tui-ce&quot;&gt;结构推测&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;今天与人争执的时候觉得应该探究一下 &lt;code&gt;Redis&lt;&#x2F;code&gt; 中 &lt;code&gt;ZINTERSTORE&lt;&#x2F;code&gt; 的实现. 先看文档中的描述&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;ZINTERSTORE destination numkeys key [key ...] [WEIGHTS weight [weight ...]] [AGGREGATE SUM|MIN|MAX]&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Available since 2.0.0.&lt;&#x2F;p&gt;
&lt;p&gt;Time complexity: O(N&lt;em&gt;K)+O(M&lt;&#x2F;em&gt;log(M)) worst case with N being the smallest input sorted set, K being the number of input sorted sets and M being the number of elements in the resulting sorted set.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;大致意思就是最坏情况下时间复杂度是 &lt;code&gt;O(N*K)+O(M*log(M))&lt;&#x2F;code&gt;, 其中 &lt;code&gt;N&lt;&#x2F;code&gt; 是输入中元素最少的 &lt;code&gt;sorted set&lt;&#x2F;code&gt; 的元素数目, &lt;code&gt;K&lt;&#x2F;code&gt; 是输入的 &lt;code&gt;sorted set&lt;&#x2F;code&gt; 的数量, &lt;code&gt;M&lt;&#x2F;code&gt; 是结果中的 &lt;code&gt;sorted set&lt;&#x2F;code&gt; 中元素的数目.&lt;&#x2F;p&gt;
&lt;p&gt;其实光从时间复杂度就能推测出来大致的操作了. &lt;code&gt;O(M*log(M))&lt;&#x2F;code&gt; 这个复杂度很有可能是一次排序操作, 而且和结果中的元素数目相关, 那么很有可能是先取交集之后得出 &lt;code&gt;M&lt;&#x2F;code&gt; 个元素, 再在 &lt;code&gt;M&lt;&#x2F;code&gt; 个元素中进行排序的. 当然, 也有可能是相应的, 在有序的序列中进行插入的操作.&lt;&#x2F;p&gt;
&lt;p&gt;而 &lt;code&gt;N&lt;&#x2F;code&gt; 是最小的 &lt;code&gt;sorted set&lt;&#x2F;code&gt; 的元素个数. 这个一开始我有点想不明白, 难道不应该是最大的才对吗, 因为这里我还是想着去遍历其他的 &lt;code&gt;sorted set&lt;&#x2F;code&gt; 进行比较. 但是思考一下, &lt;code&gt;sorted set&lt;&#x2F;code&gt; 也是 &lt;code&gt;set&lt;&#x2F;code&gt; 嘛, 完全可以使用 &lt;code&gt;O(1)&lt;&#x2F;code&gt; 的效率在其中进行查找. 这样实际就变成了分别在 (K - 1) 个 &lt;code&gt;sorted set&lt;&#x2F;code&gt; 中寻找 &lt;code&gt;N&lt;&#x2F;code&gt; 个元素, 这样自然就是 &lt;code&gt;O(N*K)&lt;&#x2F;code&gt; 了.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;yuan-ma-fen-xi&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#yuan-ma-fen-xi&quot; aria-label=&quot;Anchor link for: yuan-ma-fen-xi&quot;&gt;源码分析&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;以下源码基于 &lt;code&gt;Redis 3.0&lt;&#x2F;code&gt; 分析, 实际的函数操作为&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;C&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C &quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* https:&#x2F;&#x2F;github.com&#x2F;redis&#x2F;redis&#x2F;blob&#x2F;3.0&#x2F;src&#x2F;t_zset.c#L1905 *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zunionInterGenericCommand&lt;&#x2F;span&gt;&lt;span&gt;(redisClient *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;, robj *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dstkey&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;op&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里我们可以看到, 在 &lt;code&gt;Redis&lt;&#x2F;code&gt; 的源码中将 &lt;code&gt;ZINTERSTORE&lt;&#x2F;code&gt; 和 &lt;code&gt;ZUNIONSTORE&lt;&#x2F;code&gt; 放在了一起处理, 使用 &lt;code&gt;op&lt;&#x2F;code&gt; 做区分.&lt;&#x2F;p&gt;
&lt;p&gt;随后是一段漫长的代码, 主要是处理输入参数的, 比如要操作的 &lt;code&gt;sorted set&lt;&#x2F;code&gt; 的列表, 存到了 &lt;code&gt;src&lt;&#x2F;code&gt; 中; 然后处理 &lt;code&gt;WEIGHTS&lt;&#x2F;code&gt; 和 &lt;code&gt;AGGREGATE&lt;&#x2F;code&gt;. 代码比较长而且逻辑也很简单.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;C&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C &quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* https:&#x2F;&#x2F;github.com&#x2F;redis&#x2F;redis&#x2F;blob&#x2F;3.0&#x2F;src&#x2F;t_zset.c#L1993 *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* sort sets from the smallest to largest, this will improve our
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     * algorithm&amp;#39;s performance *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;qsort&lt;&#x2F;span&gt;&lt;span&gt;(src,setnum,sizeof(zsetopsrc),zuiCompareByCardinality);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;然后这里把所有 &lt;code&gt;sorted set&lt;&#x2F;code&gt; 按元素的个数从小到大排列, 以提高效率. 随后是具体的取交集的代码.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;C&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C &quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* https:&#x2F;&#x2F;github.com&#x2F;redis&#x2F;redis&#x2F;blob&#x2F;3.0&#x2F;src&#x2F;t_zset.c#L2001 *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(op == REDIS_OP_INTER) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Skip everything if the smallest input is empty. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;zuiLength&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;src[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]) &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Precondition: as src[0] is non-empty and the inputs are ordered
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;             * by size, all src[i &amp;gt; 0] are non-empty too. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;zuiInitIterator&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;src[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;zuiNext&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;src[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;],&amp;amp;zval)) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; score, value;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                score = src[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;weight &lt;&#x2F;span&gt;&lt;span&gt;* zval.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;score&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;isnan&lt;&#x2F;span&gt;&lt;span&gt;(score)) score = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(j = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; j &amp;lt; setnum; j++) {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* It is not safe to access the zset we are
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;                     * iterating, so explicitly check for equal object. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(src[j].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;subject &lt;&#x2F;span&gt;&lt;span&gt;== src[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;subject&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                        value = zval.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;score&lt;&#x2F;span&gt;&lt;span&gt;*src[j].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;weight&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;zunionInterAggregate&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;score,value,aggregate);
&lt;&#x2F;span&gt;&lt;span&gt;                    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;zuiFind&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;src[j],&amp;amp;zval,&amp;amp;value)) {
&lt;&#x2F;span&gt;&lt;span&gt;                        value *= src[j].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;weight&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;zunionInterAggregate&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;score,value,aggregate);
&lt;&#x2F;span&gt;&lt;span&gt;                    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Only continue when present in every input. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(j == setnum) {
&lt;&#x2F;span&gt;&lt;span&gt;                    tmp = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;zuiObjectFromValue&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;zval);
&lt;&#x2F;span&gt;&lt;span&gt;                    znode = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;zslInsert&lt;&#x2F;span&gt;&lt;span&gt;(dstzset-&amp;gt;zsl,score,tmp);
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;incrRefCount&lt;&#x2F;span&gt;&lt;span&gt;(tmp); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* added to skiplist *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dictAdd&lt;&#x2F;span&gt;&lt;span&gt;(dstzset-&amp;gt;dict,tmp,&amp;amp;znode-&amp;gt;score);
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;incrRefCount&lt;&#x2F;span&gt;&lt;span&gt;(tmp); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* added to dictionary *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sdsEncodedObject&lt;&#x2F;span&gt;&lt;span&gt;(tmp)) {
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sdslen&lt;&#x2F;span&gt;&lt;span&gt;(tmp-&amp;gt;ptr) &amp;gt; maxelelen)
&lt;&#x2F;span&gt;&lt;span&gt;                            maxelelen = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sdslen&lt;&#x2F;span&gt;&lt;span&gt;(tmp-&amp;gt;ptr);
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;zuiClearIterator&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;src[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;当然, 如果按元素数从小到大排序的第一个 &lt;code&gt;sorted set&lt;&#x2F;code&gt; 元素数为 0, 那就可以直接返回了, 随后在此 &lt;code&gt;sorted set&lt;&#x2F;code&gt; 上建立一个 &lt;code&gt;Iterator&lt;&#x2F;code&gt;, 主要就是帮助在 &lt;code&gt;sorted set&lt;&#x2F;code&gt; 上做遍历的, 因为在 &lt;code&gt;sorted set&lt;&#x2F;code&gt; 中, 遍历不是一个常用操作, 排序才是.&lt;&#x2F;p&gt;
&lt;p&gt;然后就是通过 &lt;code&gt;while (zuiNext(&amp;amp;src[0],&amp;amp;zval))&lt;&#x2F;code&gt; 取出第一个 &lt;code&gt;sorted set&lt;&#x2F;code&gt; 中的每一个元素, 再用 &lt;code&gt;for (j = 1; j &amp;lt; setnum; j++)&lt;&#x2F;code&gt; 将其在每一个其他的 &lt;code&gt;sorted set&lt;&#x2F;code&gt; 中查找一遍.&lt;&#x2F;p&gt;
&lt;p&gt;当两个 &lt;code&gt;sorted set&lt;&#x2F;code&gt; 指向同一个对象是, 那么毫无疑问一定会有同样的元素. 否则就在 &lt;code&gt;src[j]&lt;&#x2F;code&gt; 中查找当前元素. &lt;code&gt;zuiFind(&amp;amp;src[j],&amp;amp;zval,&amp;amp;value)&lt;&#x2F;code&gt; 实现了这个操作. 具体的代码在后面分析. 如果找不到的话, 则没有必要继续找下去了, 跳出即可.&lt;&#x2F;p&gt;
&lt;p&gt;查找的过程中也使用了 &lt;code&gt;zunionInterAggregate(&amp;amp;score,value,aggregate)&lt;&#x2F;code&gt; 来更新当前元素的 &lt;code&gt;score&lt;&#x2F;code&gt;, 具体的 &lt;code&gt;score&lt;&#x2F;code&gt; 更新规则是根据 &lt;code&gt;AGGREGATE&lt;&#x2F;code&gt; 参数来定的.&lt;&#x2F;p&gt;
&lt;p&gt;当元素在所有的 &lt;code&gt;sorted set&lt;&#x2F;code&gt; 中时, 就可以把这个元素添加进结果的 &lt;code&gt;sorted set&lt;&#x2F;code&gt; 中了. 这里就是根据 &lt;code&gt;zval&lt;&#x2F;code&gt; 和 &lt;code&gt;score&lt;&#x2F;code&gt; 往 &lt;code&gt;dstzset&lt;&#x2F;code&gt; 里面插入元素. 因为 &lt;code&gt;sorted set&lt;&#x2F;code&gt; 里面既有 &lt;code&gt;dict&lt;&#x2F;code&gt; 也有 &lt;code&gt;skiplist&lt;&#x2F;code&gt;, 所以两个都要添加.&lt;&#x2F;p&gt;
&lt;p&gt;这里还有一个操作就是更新最大元素的长度, 这个和 &lt;code&gt;sorted set&lt;&#x2F;code&gt; 的内部优化有关.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;C&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C &quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* https:&#x2F;&#x2F;github.com&#x2F;redis&#x2F;redis&#x2F;blob&#x2F;3.0&#x2F;src&#x2F;t_zset.c#L2119 *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dbDelete&lt;&#x2F;span&gt;&lt;span&gt;(c-&amp;gt;db,dstkey)) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;signalModifiedKey&lt;&#x2F;span&gt;&lt;span&gt;(c-&amp;gt;db,dstkey);
&lt;&#x2F;span&gt;&lt;span&gt;        touched = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        server.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dirty&lt;&#x2F;span&gt;&lt;span&gt;++;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(dstzset-&amp;gt;zsl-&amp;gt;length) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Convert to ziplist when in limits. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(dstzset-&amp;gt;zsl-&amp;gt;length &amp;lt;= server.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;zset_max_ziplist_entries &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp;
&lt;&#x2F;span&gt;&lt;span&gt;            maxelelen &amp;lt;= server.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;zset_max_ziplist_value&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;zsetConvert&lt;&#x2F;span&gt;&lt;span&gt;(dstobj,REDIS_ENCODING_ZIPLIST);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dbAdd&lt;&#x2F;span&gt;&lt;span&gt;(c-&amp;gt;db,dstkey,dstobj);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;addReplyLongLong&lt;&#x2F;span&gt;&lt;span&gt;(c,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;zsetLength&lt;&#x2F;span&gt;&lt;span&gt;(dstobj));
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(!touched) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;signalModifiedKey&lt;&#x2F;span&gt;&lt;span&gt;(c-&amp;gt;db,dstkey);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;notifyKeyspaceEvent&lt;&#x2F;span&gt;&lt;span&gt;(REDIS_NOTIFY_ZSET,
&lt;&#x2F;span&gt;&lt;span&gt;            (op == REDIS_OP_UNION) ? &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;zunionstore&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; : &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;zinterstore&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            dstkey,c-&amp;gt;db-&amp;gt;id);
&lt;&#x2F;span&gt;&lt;span&gt;        server.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dirty&lt;&#x2F;span&gt;&lt;span&gt;++;
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;decrRefCount&lt;&#x2F;span&gt;&lt;span&gt;(dstobj);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;addReply&lt;&#x2F;span&gt;&lt;span&gt;(c,shared.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;czero&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(touched)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;notifyKeyspaceEvent&lt;&#x2F;span&gt;&lt;span&gt;(REDIS_NOTIFY_GENERIC,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;del&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,dstkey,c-&amp;gt;db-&amp;gt;id);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;zfree&lt;&#x2F;span&gt;&lt;span&gt;(src);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;随后就是收尾工作. 如果目标的坑上已经有值了, 就毫不犹豫的干掉它. 然后再看作为结果的 &lt;code&gt;sorted set&lt;&#x2F;code&gt;. 如果它满足转化为 &lt;code&gt;ziplist&lt;&#x2F;code&gt; 的条件, 就可以把它转化为 &lt;code&gt;ziplist&lt;&#x2F;code&gt;. 后面是一些 &lt;code&gt;hook&lt;&#x2F;code&gt; 的通知, 可以暂时忽略. 如果结果为空, &lt;code&gt;Integer reply&lt;&#x2F;code&gt; 会返回 0, 否则会返回结果中元素的个数.&lt;&#x2F;p&gt;
&lt;p&gt;至此大致流程已经结束了. 如同推测的那样, 算法复杂度完美的反映了操作的内部过程和数据结构. 不过, 我们还有几个问题没有解决. &lt;code&gt;zuiFind&lt;&#x2F;code&gt; 中的具体操作是什么, &lt;code&gt;ziplist&lt;&#x2F;code&gt; 又是什么.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ge-zhe-ge-zhe&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#ge-zhe-ge-zhe&quot; aria-label=&quot;Anchor link for: ge-zhe-ge-zhe&quot;&gt;搁这搁这&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;这个标题充分提现了递归的思想. 学习新东西, 然后发现另一些新东西, 然后再学习这些新东西, 然后......&lt;&#x2F;p&gt;
&lt;p&gt;首先来看 &lt;code&gt;zuiFind&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;C&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C &quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* https:&#x2F;&#x2F;github.com&#x2F;redis&#x2F;redis&#x2F;blob&#x2F;3.0&#x2F;src&#x2F;t_zset.c#L1826 *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zuiFind&lt;&#x2F;span&gt;&lt;span&gt;(zsetopsrc *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;op&lt;&#x2F;span&gt;&lt;span&gt;, zsetopval *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;val&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;score&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(op-&amp;gt;subject == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(op-&amp;gt;type == REDIS_SET) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(op-&amp;gt;encoding == REDIS_ENCODING_INTSET) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;zuiLongLongFromValue&lt;&#x2F;span&gt;&lt;span&gt;(val) &amp;amp;&amp;amp;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;intsetFind&lt;&#x2F;span&gt;&lt;span&gt;(op-&amp;gt;subject-&amp;gt;ptr,val-&amp;gt;ell))
&lt;&#x2F;span&gt;&lt;span&gt;            {
&lt;&#x2F;span&gt;&lt;span&gt;                *score = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span&gt;(op-&amp;gt;encoding == REDIS_ENCODING_HT) {
&lt;&#x2F;span&gt;&lt;span&gt;            dict *ht = op-&amp;gt;subject-&amp;gt;ptr;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;zuiObjectFromValue&lt;&#x2F;span&gt;&lt;span&gt;(val);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dictFind&lt;&#x2F;span&gt;&lt;span&gt;(ht,val-&amp;gt;ele) != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                *score = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;redisPanic&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Unknown set encoding&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span&gt;(op-&amp;gt;type == REDIS_ZSET) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;zuiObjectFromValue&lt;&#x2F;span&gt;&lt;span&gt;(val);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(op-&amp;gt;encoding == REDIS_ENCODING_ZIPLIST) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;zzlFind&lt;&#x2F;span&gt;&lt;span&gt;(op-&amp;gt;subject-&amp;gt;ptr,val-&amp;gt;ele,score) != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Score is already set by zzlFind. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span&gt;(op-&amp;gt;encoding == REDIS_ENCODING_SKIPLIST) {
&lt;&#x2F;span&gt;&lt;span&gt;            zset *zs = op-&amp;gt;subject-&amp;gt;ptr;
&lt;&#x2F;span&gt;&lt;span&gt;            dictEntry *de;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;((de = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dictFind&lt;&#x2F;span&gt;&lt;span&gt;(zs-&amp;gt;dict,val-&amp;gt;ele)) != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                *score = *(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;*)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dictGetVal&lt;&#x2F;span&gt;&lt;span&gt;(de);
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;redisPanic&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Unknown sorted set encoding&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;redisPanic&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Unsupported type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;先忽略掉 &lt;code&gt;set&lt;&#x2F;code&gt; 的操作, 来看 &lt;code&gt;sorted set&lt;&#x2F;code&gt;. 我们又见到了收尾工作时出现过的 &lt;code&gt;ziplist&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The ziplist is a specially encoded dually linked list that is designed to be very memory efficient. It stores both strings and integer values, where integers are encoded as actual integers instead of a series of characters. It allows push and pop operations on either side of the list in O(1) time. However, because every operation requires a reallocation of the memory used by the ziplist, the actual complexity is related to the amount of memory used by the ziplist.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;查了一下资料, 这是 &lt;code&gt;Redis&lt;&#x2F;code&gt; 在面对小元素时可以做的一个内存优化, 本体是一个经过特殊编码的双向链表. 经过特殊编码后的数据会变得更加紧凑, 连续的内存使用也对于缓存更加友好. 有两个配置决定了 &lt;code&gt;sorted set&lt;&#x2F;code&gt; 中使用 &lt;code&gt;ziplist&lt;&#x2F;code&gt; 的阈值.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;C&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C &quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;REDIS_ZSET_MAX_ZIPLIST_ENTRIES &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;128
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;REDIS_ZSET_MAX_ZIPLIST_VALUE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;64
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;memwey.github.io&#x2F;posts&#x2F;redis-zinterstore&#x2F;images&#x2F;zset.svg&quot; alt=&quot;有序集合&quot; &#x2F;&gt;
图. 有序集合&lt;&#x2F;p&gt;
&lt;p&gt;然后我们尴尬的发现, 在 &lt;code&gt;ziplist&lt;&#x2F;code&gt; 查找一个元素实际上是一个遍历, 时间复杂度为 &lt;code&gt;O(N)&lt;&#x2F;code&gt;, 如下&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;C&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C &quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* https:&#x2F;&#x2F;github.com&#x2F;redis&#x2F;redis&#x2F;blob&#x2F;3.0&#x2F;src&#x2F;t_zset.c#L915 *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned char &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zzlFind&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned char &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;zl&lt;&#x2F;span&gt;&lt;span&gt;, robj *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ele&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;score&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned char &lt;&#x2F;span&gt;&lt;span&gt;*eptr = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ziplistIndex&lt;&#x2F;span&gt;&lt;span&gt;(zl,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;), *sptr;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    ele = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getDecodedObject&lt;&#x2F;span&gt;&lt;span&gt;(ele);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;(eptr != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        sptr = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ziplistNext&lt;&#x2F;span&gt;&lt;span&gt;(zl,eptr);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;redisAssertWithInfo&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;,ele,sptr != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ziplistCompare&lt;&#x2F;span&gt;&lt;span&gt;(eptr,ele-&amp;gt;ptr,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sdslen&lt;&#x2F;span&gt;&lt;span&gt;(ele-&amp;gt;ptr))) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Matching element, pull out score. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(score != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;) *score = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;zzlGetScore&lt;&#x2F;span&gt;&lt;span&gt;(sptr);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;decrRefCount&lt;&#x2F;span&gt;&lt;span&gt;(ele);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; eptr;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Move to next element. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        eptr = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ziplistNext&lt;&#x2F;span&gt;&lt;span&gt;(zl,sptr);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;decrRefCount&lt;&#x2F;span&gt;&lt;span&gt;(ele);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;不过当 &lt;code&gt;zset&lt;&#x2F;code&gt; 使用 &lt;code&gt;REDIS_ENCODING_SKIPLIST&lt;&#x2F;code&gt; 作为 encoding 的时候, 使用 &lt;code&gt;Hash table&lt;&#x2F;code&gt; 做查询的时间复杂度是 &lt;code&gt;O(1)&lt;&#x2F;code&gt; 这是肯定的.&lt;&#x2F;p&gt;
&lt;p&gt;当然, 这里面其实还有很多细节没有说到, 比如 &lt;code&gt;ziplist&lt;&#x2F;code&gt; 的内部表示, 和 &lt;code&gt;zset&lt;&#x2F;code&gt; 混在一起的 &lt;code&gt;set&lt;&#x2F;code&gt;, &lt;code&gt;zset&lt;&#x2F;code&gt; 中的 &lt;code&gt;dict&lt;&#x2F;code&gt; 和 &lt;code&gt;skiplist&lt;&#x2F;code&gt; 的详细分析等等. 下次有机会的吧.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;can-kao-zi-liao&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#can-kao-zi-liao&quot; aria-label=&quot;Anchor link for: can-kao-zi-liao&quot;&gt;参考资料&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;redislabs.com&#x2F;ebook&#x2F;part-2-core-concepts&#x2F;01chapter-9-reducing-memory-use&#x2F;9-1-short-structures&#x2F;9-1-1-the-ziplist-representation&#x2F;&quot;&gt;The ziplist representation&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;redisbook.readthedocs.io&#x2F;en&#x2F;latest&#x2F;compress-datastruct&#x2F;ziplist.html&quot;&gt;压缩列表 — Redis 设计与实现&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>实现优雅的 Golang 项目结构</title>
        <published>2021-02-19T18:10:22+08:00</published>
        <updated>2021-02-19T18:10:22+08:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://memwey.github.io/posts/write-elegant-project-with-golang/"/>
        <id>https://memwey.github.io/posts/write-elegant-project-with-golang/</id>
        
        <content type="html" xml:base="https://memwey.github.io/posts/write-elegant-project-with-golang/">&lt;p&gt;随着工作经验的积累, 越来越感到仅仅写出 &lt;code&gt;Elegant Code&lt;&#x2F;code&gt; 是不够的, 特别是当多人合作开发的时候, 遇到种种结构混乱, 代码冗余, 模块耦合, 依赖耦合的问题. 这个时候, 就需要更高的要求, &lt;code&gt;Elegant Project&lt;&#x2F;code&gt;, 自顶向下的改善项目的结构.&lt;&#x2F;p&gt;
&lt;p&gt;仅仅实现业务逻辑是很容易的, 而大量的时间会用在测试, Debug 上. 一个良好定义的项目结构能够极大地提升开发效率, 降低维护成本. 下面介绍一套经过实践检验的 Go 项目结构规范.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;xiang-mu-jie-gou-gui-fan&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#xiang-mu-jie-gou-gui-fan&quot; aria-label=&quot;Anchor link for: xiang-mu-jie-gou-gui-fan&quot;&gt;项目结构规范&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;fu-wu-diao-yong-service-invocation&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#fu-wu-diao-yong-service-invocation&quot; aria-label=&quot;Anchor link for: fu-wu-diao-yong-service-invocation&quot;&gt;服务调用 (Service Invocation)&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;项目的核心调用链遵循一个清晰的层次结构:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;接口定义&lt;&#x2F;strong&gt;:  服务接口在 &lt;code&gt;.&#x2F;domain&#x2F;&amp;lt;service_name&amp;gt;&#x2F;domain.go&lt;&#x2F;code&gt; 文件中定义. 这是服务能力的抽象.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;服务实现&lt;&#x2F;strong&gt;:  服务的具体实现在对应的 &lt;code&gt;.&#x2F;app&#x2F;&amp;lt;service_name&amp;gt;&lt;&#x2F;code&gt; 目录中完成.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Web Handler&lt;&#x2F;strong&gt;:  Web Handler 实现在 &lt;code&gt;.&#x2F;internal&#x2F;web&lt;&#x2F;code&gt; 目录中.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;调用流程&lt;&#x2F;strong&gt;:  Web Handler 调用 &lt;code&gt;.&#x2F;domain&#x2F;&amp;lt;service_name&amp;gt;&lt;&#x2F;code&gt; 中定义的服务接口, 而非直接依赖具体实现.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;复杂流程处理&lt;&#x2F;strong&gt;:  对于需要调用多个服务方法的复杂业务流程, 应该在一个专用的, 以 &lt;code&gt;flow&lt;&#x2F;code&gt; 为后缀的服务中进行编排, 而不是直接在 Web Handler 中组合.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;fu-wu-bao-ming-ming-service-package-name&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#fu-wu-bao-ming-ming-service-package-name&quot; aria-label=&quot;Anchor link for: fu-wu-bao-ming-ming-service-package-name&quot;&gt;服务包命名 (Service Package Name)&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;避免服务包与它操作的实体同名&lt;&#x2F;strong&gt;:  例如, 操作 &lt;code&gt;User&lt;&#x2F;code&gt; 实体的服务不应该命名为 &lt;code&gt;user&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;使用后缀来明确包的职责&lt;&#x2F;strong&gt;:  推荐使用 &lt;code&gt;mgr&lt;&#x2F;code&gt;, &lt;code&gt;hdl&lt;&#x2F;code&gt;, &lt;code&gt;uc&lt;&#x2F;code&gt;, &lt;code&gt;svc&lt;&#x2F;code&gt;, &lt;code&gt;flow&lt;&#x2F;code&gt; 等后缀来命名服务包, 以清晰地表达其作为服务层的角色.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;fu-wu-fang-fa-qian-ming-service-method-signature&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#fu-wu-fang-fa-qian-ming-service-method-signature&quot; aria-label=&quot;Anchor link for: fu-wu-fang-fa-qian-ming-service-method-signature&quot;&gt;服务方法签名 (Service Method Signature)&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;为了保持一致性和可预测性, 所有服务方法都应遵循以下签名格式:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 标准服务方法签名
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Hello&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ctx context&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Context&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;req &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HelloRequest&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resp &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HelloResponse&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err error&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;请求&#x2F;响应类型&lt;&#x2F;strong&gt;:  请求和响应的结构体遵循 &lt;code&gt;&amp;lt;MethodName&amp;gt;Request&lt;&#x2F;code&gt; 和 &lt;code&gt;&amp;lt;MethodName&amp;gt;Response&lt;&#x2F;code&gt; 的命名模式.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;上下文参数&lt;&#x2F;strong&gt;:  第一个参数必须是 &lt;code&gt;context.Context&lt;&#x2F;code&gt;, 用于传递请求范围的数据, 如 trace ID, 用户身份等.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;错误返回&lt;&#x2F;strong&gt;:  最后一个返回值必须是 &lt;code&gt;error&lt;&#x2F;code&gt;, 用于错误处理.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;命名返回值&lt;&#x2F;strong&gt;:  推荐使用命名返回值, 以增强代码的可读性.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;批量获取&lt;&#x2F;strong&gt;:  对于通过 ID 批量获取数据的方法, 方法名应为 &lt;code&gt;Fetch&amp;lt;Objects&amp;gt;Dict&lt;&#x2F;code&gt;, 且响应中应包含一个名为 &lt;code&gt;&amp;lt;Objects&amp;gt;Dict&lt;&#x2F;code&gt; 的 &lt;code&gt;map[&amp;lt;IDType&amp;gt;]&amp;lt;Object&amp;gt;&lt;&#x2F;code&gt; 字段, 以方便调用方通过 ID 查找对象.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;fu-wu-shi-xian-jie-gou-service-implementation-structure&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#fu-wu-shi-xian-jie-gou-service-implementation-structure&quot; aria-label=&quot;Anchor link for: fu-wu-shi-xian-jie-gou-service-implementation-structure&quot;&gt;服务实现结构 (Service Implementation Structure)&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;一个独立服务的内部结构组织如下:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;服务接口&lt;&#x2F;strong&gt;:  &lt;code&gt;Service&lt;&#x2F;code&gt; 接口位于 &lt;code&gt;.&#x2F;domain&#x2F;&amp;lt;service_name&amp;gt;&#x2F;domain.go&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;内部核心定义&lt;&#x2F;strong&gt;:  如有需要, 内部使用的数据结构和 Repository 接口定义在 &lt;code&gt;.&#x2F;app&#x2F;&amp;lt;service_name&amp;gt;&#x2F;internal&#x2F;core&#x2F;core.go&lt;&#x2F;code&gt;, 以 &lt;code&gt;core&lt;&#x2F;code&gt; 为包名.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Repository 实现&lt;&#x2F;strong&gt;:  Repository 的具体实现放在 &lt;code&gt;.&#x2F;app&#x2F;&amp;lt;service_name&amp;gt;&#x2F;internal&#x2F;repo&lt;&#x2F;code&gt; 目录中.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;服务初始化&lt;&#x2F;strong&gt;:  服务的结构体和构造逻辑, 以及传入的依赖定义在 &lt;code&gt;.&#x2F;app&#x2F;&amp;lt;service_name&amp;gt;&#x2F;service.go&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;服务构造函数&lt;&#x2F;strong&gt;:  服务构造函数应命名为 &lt;code&gt;NewService(inj *NewServiceInj, opts ...ServiceOption) (srv *Service, err error)&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;业务逻辑&lt;&#x2F;strong&gt;:  核心业务逻辑实现在 &lt;code&gt;.&#x2F;app&#x2F;&amp;lt;service_name&amp;gt;&lt;&#x2F;code&gt; 目录下的独立文件中, 与服务构造函数分离.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Repository 构造函数&lt;&#x2F;strong&gt;:  Repository 的构造函数和通用的事务逻辑 (如 &lt;code&gt;(r *Repo) WithTx(...)&lt;&#x2F;code&gt;) 应放在 &lt;code&gt;.&#x2F;app&#x2F;&amp;lt;service_name&amp;gt;&#x2F;internal&#x2F;repo&#x2F;repo.go&lt;&#x2F;code&gt; 中.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Repository 操作&lt;&#x2F;strong&gt;:  Repository 的具体数据库操作在 &lt;code&gt;.&#x2F;app&#x2F;&amp;lt;service_name&amp;gt;&#x2F;internal&#x2F;repo&lt;&#x2F;code&gt; 目录下的独立文件中实现, 与其构造函数分离, 以 &lt;code&gt;repo&lt;&#x2F;code&gt; 为包名.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;文件命名&lt;&#x2F;strong&gt;:  业务逻辑文件应根据其主要处理的实体来命名, 清晰地反映其职责.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;数据库事务边界&lt;&#x2F;strong&gt;:  数据库事务边界应定义在服务层, 而不是在 Repository 层.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;fu-wu-mock-service-mock&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#fu-wu-mock-service-mock&quot; aria-label=&quot;Anchor link for: fu-wu-mock-service-mock&quot;&gt;服务 Mock (Service Mock)&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Mock 初始化&lt;&#x2F;strong&gt;:  总是使用辅助函数 &lt;code&gt;initMockService(t *testing.T) (srv *service.Service, mockInj *mockInjection)&lt;&#x2F;code&gt; 来初始化被测试的服务及其 mock 依赖.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Mock 生成&lt;&#x2F;strong&gt;:  使用 &lt;code&gt;Mockery&lt;&#x2F;code&gt; 基于接口生成 mock 对象.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;类型安全&lt;&#x2F;strong&gt;:  测试辅助函数应使用&lt;strong&gt;类型安全&lt;&#x2F;strong&gt;的方法调用来设置 mock 行为, 而不是依赖于基于字符串的通用方法, 如 &lt;code&gt;mock.On(&quot;MethodName&quot;)&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;jiao-ben-scripts&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#jiao-ben-scripts&quot; aria-label=&quot;Anchor link for: jiao-ben-scripts&quot;&gt;脚本 (Scripts)&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;通用脚本&lt;&#x2F;strong&gt;:  常用的脚本应放置在 &lt;code&gt;.&#x2F;script&lt;&#x2F;code&gt; 目录中.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;SQL 文件&lt;&#x2F;strong&gt;:  SQL DML 和 DDL 文件应放置在 &lt;code&gt;.&#x2F;script&#x2F;sql&lt;&#x2F;code&gt; 目录中.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;ke-xuan-shi-xian-shi-yong-ent-orm&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#ke-xuan-shi-xian-shi-yong-ent-orm&quot; aria-label=&quot;Anchor link for: ke-xuan-shi-xian-shi-yong-ent-orm&quot;&gt;可选实现: 使用 Ent ORM&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;本结构规范不强制绑定任何 ORM 框架, 但如果选择使用 &lt;a href=&quot;https:&#x2F;&#x2F;entgo.io&#x2F;&quot;&gt;Ent&lt;&#x2F;a&gt;, 可以遵循以下约定来更好地集成.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Schema 定义&lt;&#x2F;strong&gt;:  &lt;code&gt;Ent&lt;&#x2F;code&gt; 的 Schema 定义在 &lt;code&gt;.&#x2F;internal&#x2F;schema&lt;&#x2F;code&gt; 目录中, 每个数据表对应一个文件, 如 &lt;code&gt;.&#x2F;internal&#x2F;schema&#x2F;user.go&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;生成代码&lt;&#x2F;strong&gt;:  &lt;code&gt;Ent&lt;&#x2F;code&gt; 生成的代码位于 &lt;code&gt;.&#x2F;internal&#x2F;ent&lt;&#x2F;code&gt; 目录.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;实体命名&lt;&#x2F;strong&gt;:  在 Repository 层, &lt;code&gt;Ent&lt;&#x2F;code&gt; ORM 生成的对象在命名时应使用 &lt;code&gt;Entity&lt;&#x2F;code&gt; (或 &lt;code&gt;Entities&lt;&#x2F;code&gt; 用于集合) 后缀, 以明确区分它们与领域中的 &lt;code&gt;core&lt;&#x2F;code&gt; 包中的实体, 并且 &lt;code&gt;Ent&lt;&#x2F;code&gt; 生成的对象不能泄露出 &lt;code&gt;repo&lt;&#x2F;code&gt; 包.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;代码生成脚本&lt;&#x2F;strong&gt;:  生成 Ent ORM 代码的脚本应位于 &lt;code&gt;.&#x2F;script&#x2F;ent.sh&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;fu-wu-diao-yong-liu-cheng-tu&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#fu-wu-diao-yong-liu-cheng-tu&quot; aria-label=&quot;Anchor link for: fu-wu-diao-yong-liu-cheng-tu&quot;&gt;服务调用流程图&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;下图展示了从接收客户端请求到与数据库交互的完整分层调用链, 它强调了接口与实现分离 (依赖倒置原则), 以及各层在项目中的位置. 这样保证了每一个层级的职责清晰, 耦合度低, 方便维护和扩展, 也方便进行单元测试和排查问题.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;[ API Request ]
&lt;&#x2F;span&gt;&lt;span&gt;      |
&lt;&#x2F;span&gt;&lt;span&gt;      v
&lt;&#x2F;span&gt;&lt;span&gt;+--------------------------------+
&lt;&#x2F;span&gt;&lt;span&gt;|      Web Handler               |
&lt;&#x2F;span&gt;&lt;span&gt;|     (.&#x2F;internal&#x2F;web)           |
&lt;&#x2F;span&gt;&lt;span&gt;+--------------------------------+
&lt;&#x2F;span&gt;&lt;span&gt;      |
&lt;&#x2F;span&gt;&lt;span&gt;      |  (依赖接口)
&lt;&#x2F;span&gt;&lt;span&gt;      v
&lt;&#x2F;span&gt;&lt;span&gt;+--------------------------------+ &amp;lt;----+
&lt;&#x2F;span&gt;&lt;span&gt;|      Domain Interface          |      |
&lt;&#x2F;span&gt;&lt;span&gt;|   (.&#x2F;domain&#x2F;&amp;lt;service_name&amp;gt;)    |      | (服务之间通过接口调用)
&lt;&#x2F;span&gt;&lt;span&gt;+--------------------------------+      |
&lt;&#x2F;span&gt;&lt;span&gt;      |                                  
&lt;&#x2F;span&gt;&lt;span&gt;      |  (由 App 层实现)
&lt;&#x2F;span&gt;&lt;span&gt;      v
&lt;&#x2F;span&gt;&lt;span&gt;+--------------------------------+      |
&lt;&#x2F;span&gt;&lt;span&gt;|      App Implementation        | -----+
&lt;&#x2F;span&gt;&lt;span&gt;|    (.&#x2F;app&#x2F;&amp;lt;service_name&amp;gt;)      |
&lt;&#x2F;span&gt;&lt;span&gt;+--------------------------------+
&lt;&#x2F;span&gt;&lt;span&gt;      |
&lt;&#x2F;span&gt;&lt;span&gt;      |  (依赖接口)
&lt;&#x2F;span&gt;&lt;span&gt;      v
&lt;&#x2F;span&gt;&lt;span&gt;+--------------------------------+
&lt;&#x2F;span&gt;&lt;span&gt;|      Repository Interface      |
&lt;&#x2F;span&gt;&lt;span&gt;|   (.&#x2F;app&#x2F;...&#x2F;internal&#x2F;core)    |
&lt;&#x2F;span&gt;&lt;span&gt;+--------------------------------+
&lt;&#x2F;span&gt;&lt;span&gt;      |
&lt;&#x2F;span&gt;&lt;span&gt;      |  (由 Repo 层实现)
&lt;&#x2F;span&gt;&lt;span&gt;      v
&lt;&#x2F;span&gt;&lt;span&gt;+--------------------------------+
&lt;&#x2F;span&gt;&lt;span&gt;|      Repository Implementation |
&lt;&#x2F;span&gt;&lt;span&gt;|   (.&#x2F;app&#x2F;...&#x2F;internal&#x2F;repo)    |
&lt;&#x2F;span&gt;&lt;span&gt;+--------------------------------+
&lt;&#x2F;span&gt;&lt;span&gt;      |
&lt;&#x2F;span&gt;&lt;span&gt;      v
&lt;&#x2F;span&gt;&lt;span&gt;[ Database &#x2F; ORM ]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;shi-li-xiang-mu-mu-lu-jie-gou&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#shi-li-xiang-mu-mu-lu-jie-gou&quot; aria-label=&quot;Anchor link for: shi-li-xiang-mu-mu-lu-jie-gou&quot;&gt;示例项目目录结构&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;这是一个遵循上述规范的示例项目结构. 它以一个用户注册场景为例, 其中 &lt;code&gt;registrationflow&lt;&#x2F;code&gt; 是一个复杂流程, 负责编排 &lt;code&gt;authuc&lt;&#x2F;code&gt; (认证用例) 和 &lt;code&gt;notiuc&lt;&#x2F;code&gt; (通知用例).&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;├── app&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── registrationflow&#x2F;           # “用户注册”流程的实现
&lt;&#x2F;span&gt;&lt;span&gt;│   │   ├── service.go              # 定义 Service, NewService
&lt;&#x2F;span&gt;&lt;span&gt;│   │   └── registration_logic.go   # 流程编排逻辑
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── authuc&#x2F;                     # “认证”用例的实现
&lt;&#x2F;span&gt;&lt;span&gt;│   │   ├── internal&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;│   │   │   ├── core&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;│   │   │   │   ├── core.go         # 定义 IAuthRepo 使用的数据结构
&lt;&#x2F;span&gt;&lt;span&gt;│   │   │   │   └── repo_mock.go    # IAuthRepo 的 mock 实现
&lt;&#x2F;span&gt;&lt;span&gt;│   │   │   └── repo&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;│   │   │       ├── repo.go         # 定义 Repo, NewRepo, WithTx
&lt;&#x2F;span&gt;&lt;span&gt;│   │   │       └── auth_repo.go    # 实现 IAuthRepo
&lt;&#x2F;span&gt;&lt;span&gt;│   │   ├── service.go              # 定义 Service, NewService
&lt;&#x2F;span&gt;&lt;span&gt;│   │   ├── auth_logic.go           # 认证业务逻辑
&lt;&#x2F;span&gt;&lt;span&gt;│   │   └── auth_logic_test.go      # 认证业务逻辑的单元测试
&lt;&#x2F;span&gt;&lt;span&gt;│   └── notiuc&#x2F;                     # “通知”用例的实现
&lt;&#x2F;span&gt;&lt;span&gt;│       ├── internal&#x2F;               # (可选, 如需封装 client 或定义内部结构)
&lt;&#x2F;span&gt;&lt;span&gt;│       │   └── ...
&lt;&#x2F;span&gt;&lt;span&gt;│       ├── service.go              # 定义 Service, NewService
&lt;&#x2F;span&gt;&lt;span&gt;│       └── noti_logic.go           # 通知业务逻辑 (如发邮件, 短信)
&lt;&#x2F;span&gt;&lt;span&gt;├── cmd&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;│   └── server&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;│       └── main.go
&lt;&#x2F;span&gt;&lt;span&gt;├── domain&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── registrationflow&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;│   │   ├── domain.go               # 定义 RegistrationFlow 接口
&lt;&#x2F;span&gt;&lt;span&gt;│   │   └── service_mock.go         # RegistrationFlow 的 mock 实现
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── authuc&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;│   │   ├── domain.go               # 定义 AuthUseCase 接口
&lt;&#x2F;span&gt;&lt;span&gt;│   │   └── service_mock.go         # AuthUseCase 的 mock 实现
&lt;&#x2F;span&gt;&lt;span&gt;│   └── notiuc&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;│       ├── domain.go               # 定义 NotiUseCase 接口
&lt;&#x2F;span&gt;&lt;span&gt;│       └── service_mock.go         # NotiUseCase 的 mock 实现
&lt;&#x2F;span&gt;&lt;span&gt;├── internal&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;│   └── web&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;│       ├── registration_handler.go # 处理注册流程, 调用 domain&#x2F;registrationflow
&lt;&#x2F;span&gt;&lt;span&gt;│       ├── auth_handler.go         # 处理认证请求, 调用 domain&#x2F;authuc
&lt;&#x2F;span&gt;&lt;span&gt;│       └── auth_handler_test.go    # 认证请求处理的单元测试
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;上述目录结构展示了一个典型的分层应用:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;domain&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;:  定义了三个核心服务接口: &lt;code&gt;RegistrationFlow&lt;&#x2F;code&gt;、&lt;code&gt;AuthUseCase&lt;&#x2F;code&gt; 和 &lt;code&gt;NotiUseCase&lt;&#x2F;code&gt;. 这是业务能力的抽象层.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;app&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;:  包含了上述接口的具体实现. &lt;code&gt;registrationflow&lt;&#x2F;code&gt; 是一个流程服务 (Flow), 它的实现会依赖 &lt;code&gt;authuc&lt;&#x2F;code&gt; 和 &lt;code&gt;notiuc&lt;&#x2F;code&gt; 的接口, 从而编排和调用这两个用例服务.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;internal&#x2F;web&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;:  Web Handler 层, 负责暴露服务给外部. 不同的 Handler 文件处理不同的业务, 例如 &lt;code&gt;registration_handler.go&lt;&#x2F;code&gt; 调用复杂的流程服务, 而 &lt;code&gt;auth_handler.go&lt;&#x2F;code&gt;可以直接调用简单的用例服务.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;包命名&lt;&#x2F;strong&gt;:  注意所有包名都使用简短, 全小写的形式, 并且不使用下划线, 这是 Go 语言推荐的风格.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Mock 与测试&lt;&#x2F;strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Mock 文件&lt;&#x2F;strong&gt;: &lt;code&gt;*_mock.go&lt;&#x2F;code&gt; 是接口的 mock 实现, 用于单元测试.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;测试文件&lt;&#x2F;strong&gt;: &lt;code&gt;*_test.go&lt;&#x2F;code&gt; 是对应的单元测试文件.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;依赖关系&lt;&#x2F;strong&gt;: 基于依赖倒置原则, 测试文件会使用 mock 来隔离被测试的层级.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;app&#x2F;authuc&#x2F;auth_logic_test.go&lt;&#x2F;code&gt; (业务逻辑测试) 会使用 &lt;code&gt;app&#x2F;authuc&#x2F;internal&#x2F;core&#x2F;repo_mock.go&lt;&#x2F;code&gt; 来模拟数据访问行为.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;internal&#x2F;web&#x2F;auth_handler_test.go&lt;&#x2F;code&gt; (Handler 测试) 会使用 &lt;code&gt;domain&#x2F;authuc&#x2F;service_mock.go&lt;&#x2F;code&gt; 来模拟业务服务行为.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;zong-jie&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#zong-jie&quot; aria-label=&quot;Anchor link for: zong-jie&quot;&gt;总结&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;本规范的核心价值在于提供一个清晰一致的项目结构, 从而提升项目的&lt;strong&gt;可测试性&lt;&#x2F;strong&gt;和&lt;strong&gt;可维护性&lt;&#x2F;strong&gt;. 通过明确的分层和接口定义, 实现了以下关键的架构原则:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Monorepo 下的微服务化&lt;&#x2F;strong&gt;: 在单一代码库(Monorepo)中, 通过模块化的服务(&lt;code&gt;app&lt;&#x2F;code&gt;)和统一的接口(&lt;code&gt;domain&lt;&#x2F;code&gt;), 实现了类似微服务的开发体验. 每个服务都可以独立开发, 测试和部署, 但又能在同一个项目中轻松共享代码和配置.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;支持多人协作&lt;&#x2F;strong&gt;: 清晰的边界和所有权使得多个开发团队可以并行工作, 而不会相互干扰. 每个团队可以专注于自己的服务, 并通过定义好的接口进行协作.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;高可测试性&lt;&#x2F;strong&gt;: 依赖倒置原则的贯彻, 以及接口 mock 的普遍使用, 使得每个模块都可以进行独立的单元测试, 保证了代码质量和迭代速度.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;can-kao-lian-jie&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#can-kao-lian-jie&quot; aria-label=&quot;Anchor link for: can-kao-lian-jie&quot;&gt;参考链接&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;golang-standards&#x2F;project-layout&quot;&gt;Standard Go Project Layout&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mattermost&#x2F;mattermost&quot;&gt;Mattermost&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Redis LRU</title>
        <published>2020-12-25T14:26:24+08:00</published>
        <updated>2020-12-25T14:26:24+08:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://memwey.github.io/posts/redis-lru/"/>
        <id>https://memwey.github.io/posts/redis-lru/</id>
        
        <content type="html" xml:base="https://memwey.github.io/posts/redis-lru/">&lt;h2 id=&quot;ji-chu-zhi-shi&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#ji-chu-zhi-shi&quot; aria-label=&quot;Anchor link for: ji-chu-zhi-shi&quot;&gt;基础知识&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;LRU (Least recently used)&lt;&#x2F;code&gt; 是一个非常常用的缓存置换算法.&lt;&#x2F;p&gt;
&lt;p&gt;在缓存空间有限的情况下, 在新的数据写入时, 需要淘汰一些旧数据. 一般期望最不可能被继续访问的数据淘汰. 由于无法对未来的情况进行预测, 只能基于现有的信息推测.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;LRU&lt;&#x2F;code&gt; 基于这样一个假定, 在一个时间点上, 如果一个数据距离上次被访问的时间越长, 则这个数据在未来被访问的可能性越小. 所以, 应该淘汰掉距离上次被访问的时间最久的数据.&lt;&#x2F;p&gt;
&lt;p&gt;常见的 &lt;code&gt;LRU&lt;&#x2F;code&gt; 实现是使用一个双向链表, 当 Item 被访问时, 将其移动到链表的头部. 当缓存不足时, 从链表的尾部开始淘汰.&lt;&#x2F;p&gt;
&lt;p&gt;单纯的双向链表的实现实际上是不太符合现实的. 一般的, 我们希望缓存可以尽快被检索到, 而在双向链表中检索 Item 的效率是 O(n), 特别是检索的 Item 在链表中不存在时, 效率稳定的是 O(n). 这样, 在缓存系统中维护这个双向链表的成本是非常高的. 一般的, 会将 &lt;code&gt;哈希表&lt;&#x2F;code&gt; 或者 &lt;code&gt;二叉搜索树&lt;&#x2F;code&gt; 和双向链表组合起来, 在更高效率的数据结构中记录 &lt;code&gt;Key&lt;&#x2F;code&gt;, 并在 &lt;code&gt;Key&lt;&#x2F;code&gt; 中记录 Item 在双向链表中的指针.&lt;&#x2F;p&gt;
&lt;p&gt;另外的, 在并发量较大的时候, 双向链表中的操作需要加锁, 否则链表很容易出问题.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ju-ti-shi-xian&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#ju-ti-shi-xian&quot; aria-label=&quot;Anchor link for: ju-ti-shi-xian&quot;&gt;具体实现&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;redis-2-8&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#redis-2-8&quot; aria-label=&quot;Anchor link for: redis-2-8&quot;&gt;Redis 2.8&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;在较早版本的 &lt;code&gt;Redis&lt;&#x2F;code&gt; 上, 并没有实现 &lt;code&gt;LRU&lt;&#x2F;code&gt;. 在后续 2.8 添加的时候, 并没有使用常见的双向链表的方式来实现 &lt;code&gt;LRU&lt;&#x2F;code&gt;, 而使用了一个近似的实现.&lt;&#x2F;p&gt;
&lt;p&gt;从空间和时间上考虑, &lt;code&gt;Redis&lt;&#x2F;code&gt; 中的 &lt;code&gt;Key&lt;&#x2F;code&gt; 的数量可能非常的多, 双向链表可能会非常大, 占用内存非常多; 另一方面, &lt;code&gt;Redis&lt;&#x2F;code&gt; 中的操作可能也非常频繁, 每一次访问都需要操作一次双向链表, 在时间上也显得非常不划算.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Antirez&lt;&#x2F;code&gt; 在 &lt;code&gt;Redis Object&lt;&#x2F;code&gt; 中挤出了 24 个位元 bits, 并用其存储按秒计算的 &lt;code&gt;unix timestamp&lt;&#x2F;code&gt; 的低 24 位. 这个被称为 &lt;code&gt;LRU clock&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;C&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C &quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* https:&#x2F;&#x2F;github.com&#x2F;redis&#x2F;redis&#x2F;blob&#x2F;3.0&#x2F;src&#x2F;redis.h#L420 *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* A redis object, that is a type able to hold a string &#x2F; list &#x2F; set *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* The actual Redis Object *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;REDIS_LRU_BITS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;24
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;REDIS_LRU_CLOCK_MAX ((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt;REDIS_LRU_BITS)-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Max value of obj-&amp;gt;lru *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;REDIS_LRU_CLOCK_RESOLUTION &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* LRU clock resolution in ms *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;typedef struct&lt;&#x2F;span&gt;&lt;span&gt; redisObject {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned&lt;&#x2F;span&gt;&lt;span&gt; type:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned&lt;&#x2F;span&gt;&lt;span&gt; encoding:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned&lt;&#x2F;span&gt;&lt;span&gt; lru:REDIS_LRU_BITS; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* lru time (relative to server.lruclock) *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; refcount;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;*ptr;
&lt;&#x2F;span&gt;&lt;span&gt;} robj;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;24 个 bits 明显不够存储一个完整的时间戳, 当第二十四位向前进位的时候, 就会发生溢出. 此时, 最近被访问的 Item 的 &lt;code&gt;LRU clock&lt;&#x2F;code&gt; 反而较小, 更容易被淘汰. 考虑到这个溢出需要 194 天, 而 &lt;code&gt;Redis&lt;&#x2F;code&gt; 中的操作应该比较频繁, 所以 &lt;code&gt;antirez&lt;&#x2F;code&gt; 认为这个问题可以接受.&lt;&#x2F;p&gt;
&lt;p&gt;理论上, 可以精心构造一些数据, 让 &lt;code&gt;Redis&lt;&#x2F;code&gt; 的 &lt;code&gt;LRU&lt;&#x2F;code&gt; 失效. 比如, 总是在溢出前访问一个 Item, 这个 Item 的 &lt;code&gt;LRU clock&lt;&#x2F;code&gt; 总是很大, 虽然这个 Item 的访问周期总是 194 天才访问一次, 但是它总不会被淘汰.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;C&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C &quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* https:&#x2F;&#x2F;github.com&#x2F;redis&#x2F;redis&#x2F;blob&#x2F;3.0&#x2F;src&#x2F;db.c#L43 *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;robj *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;lookupKey&lt;&#x2F;span&gt;&lt;span&gt;(redisDb *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;, robj *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    dictEntry *de = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dictFind&lt;&#x2F;span&gt;&lt;span&gt;(db-&amp;gt;dict,key-&amp;gt;ptr);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(de) {
&lt;&#x2F;span&gt;&lt;span&gt;        robj *val = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dictGetVal&lt;&#x2F;span&gt;&lt;span&gt;(de);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Update the access time for the ageing algorithm.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;         * Don&amp;#39;t do it if we have a saving child, as this will trigger
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;         * a copy on write madness. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(server.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdb_child_pid &lt;&#x2F;span&gt;&lt;span&gt;== -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; server.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;aof_child_pid &lt;&#x2F;span&gt;&lt;span&gt;== -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            val-&amp;gt;lru = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LRU_CLOCK&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; val;
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;接下来的问题在于如何找到最久没有被访问的 Item. 如果一定要找到最久没有被访问到的 Item, 那么需要遍历所有的 &lt;code&gt;Key&lt;&#x2F;code&gt;, 而且在遍历的过程中, 要么禁止在这期间做任何的访问操作, 要么可能出现找到的 &lt;code&gt;Key&lt;&#x2F;code&gt; 恰好又刚刚被访问到的问题.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Antirez&lt;&#x2F;code&gt; 在这里又使用了一个近似的实现, 随机选取 3 个 &lt;code&gt;Key&lt;&#x2F;code&gt;, 把他们之中最久没有被访问到的淘汰. 随后, 这个数值变成了可配置项 &lt;code&gt;maxmemory-samples&lt;&#x2F;code&gt; , 默认值是 5. 考虑到选出的结果不一定是最好的, 但是很大可能不是一个坏的结果, 即选出一个非常近被访问的 Item, 这个实现还算可以接受.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;C&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C &quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* https:&#x2F;&#x2F;github.com&#x2F;redis&#x2F;redis&#x2F;blob&#x2F;2.8&#x2F;src&#x2F;redis.c#L2982 *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* volatile-lru and allkeys-lru policy *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span&gt;(server.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;maxmemory_policy &lt;&#x2F;span&gt;&lt;span&gt;== REDIS_MAXMEMORY_ALLKEYS_LRU ||
&lt;&#x2F;span&gt;&lt;span&gt;    server.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;maxmemory_policy &lt;&#x2F;span&gt;&lt;span&gt;== REDIS_MAXMEMORY_VOLATILE_LRU)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(k = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; k &amp;lt; server.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;maxmemory_samples&lt;&#x2F;span&gt;&lt;span&gt;; k++) {
&lt;&#x2F;span&gt;&lt;span&gt;        sds thiskey;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;long&lt;&#x2F;span&gt;&lt;span&gt; thisval;
&lt;&#x2F;span&gt;&lt;span&gt;        robj *o;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        de = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dictGetRandomKey&lt;&#x2F;span&gt;&lt;span&gt;(dict);
&lt;&#x2F;span&gt;&lt;span&gt;        thiskey = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dictGetKey&lt;&#x2F;span&gt;&lt;span&gt;(de);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* When policy is volatile-lru we need an additional lookup
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;          * to locate the real key, as dict is set to db-&amp;gt;expires. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(server.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;maxmemory_policy &lt;&#x2F;span&gt;&lt;span&gt;== REDIS_MAXMEMORY_VOLATILE_LRU)
&lt;&#x2F;span&gt;&lt;span&gt;            de = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dictFind&lt;&#x2F;span&gt;&lt;span&gt;(db-&amp;gt;dict, thiskey);
&lt;&#x2F;span&gt;&lt;span&gt;        o = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dictGetVal&lt;&#x2F;span&gt;&lt;span&gt;(de);
&lt;&#x2F;span&gt;&lt;span&gt;        thisval = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;estimateObjectIdleTime&lt;&#x2F;span&gt;&lt;span&gt;(o);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Higher idle time is better candidate for deletion *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(bestkey == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL &lt;&#x2F;span&gt;&lt;span&gt;|| thisval &amp;gt; bestval) {
&lt;&#x2F;span&gt;&lt;span&gt;            bestkey = thiskey;
&lt;&#x2F;span&gt;&lt;span&gt;            bestval = thisval;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;redis-3-0&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#redis-3-0&quot; aria-label=&quot;Anchor link for: redis-3-0&quot;&gt;Redis 3.0&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;Antirez&lt;&#x2F;code&gt; 在 3.0 版本中进一步提升了近似算法的准确性. 一个显而易见的方法是, 通过过去累计的信息来提升准确性.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Redis&lt;&#x2F;code&gt; 中维护了一个默认大小为 16 的 &lt;code&gt;pool&lt;&#x2F;code&gt;, 里面存储了备选的 &lt;code&gt;Key&lt;&#x2F;code&gt;. 当需要淘汰时, 从随机选择的 N 个 &lt;code&gt;Key&lt;&#x2F;code&gt; 中与 &lt;code&gt;pool&lt;&#x2F;code&gt; 中的 &lt;code&gt;Key&lt;&#x2F;code&gt; 做对比, 在 &lt;code&gt;pool&lt;&#x2F;code&gt; 中维护其中最久没有被访问到的 16 个 &lt;code&gt;Key&lt;&#x2F;code&gt;, 然后在 &lt;code&gt;pool&lt;&#x2F;code&gt; 中淘汰其中最久没有被访问到的 Item. 这个 &lt;code&gt;pool&lt;&#x2F;code&gt; 非常类似于小顶堆.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;C&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C &quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* https:&#x2F;&#x2F;github.com&#x2F;redis&#x2F;redis&#x2F;blob&#x2F;3.0&#x2F;src&#x2F;redis.c#L3275 *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* volatile-lru and allkeys-lru policy *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span&gt;(server.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;maxmemory_policy &lt;&#x2F;span&gt;&lt;span&gt;== REDIS_MAXMEMORY_ALLKEYS_LRU ||
&lt;&#x2F;span&gt;&lt;span&gt;    server.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;maxmemory_policy &lt;&#x2F;span&gt;&lt;span&gt;== REDIS_MAXMEMORY_VOLATILE_LRU)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; evictionPoolEntry *pool = db-&amp;gt;eviction_pool;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(bestkey == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;evictionPoolPopulate&lt;&#x2F;span&gt;&lt;span&gt;(dict, db-&amp;gt;dict, db-&amp;gt;eviction_pool);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Go backward from best to worst element to evict. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(k = REDIS_EVICTION_POOL_SIZE-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; k &amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; k--) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(pool[k].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;continue&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            de = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dictFind&lt;&#x2F;span&gt;&lt;span&gt;(dict,pool[k].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Remove the entry from the pool. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sdsfree&lt;&#x2F;span&gt;&lt;span&gt;(pool[k].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Shift all elements on its right to left. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;memmove&lt;&#x2F;span&gt;&lt;span&gt;(pool+k,pool+k+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                sizeof(pool[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;])*(REDIS_EVICTION_POOL_SIZE-k-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Clear the element on the right which is empty
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;              * since we shifted one position to the left.  *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;            pool[REDIS_EVICTION_POOL_SIZE-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            pool[REDIS_EVICTION_POOL_SIZE-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;idle &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* If the key exists, is our pick. Otherwise it is
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;              * a ghost and we need to try the next element. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(de) {
&lt;&#x2F;span&gt;&lt;span&gt;                bestkey = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dictGetKey&lt;&#x2F;span&gt;&lt;span&gt;(de);
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Ghost... *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;continue&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;pool&lt;&#x2F;code&gt; 中排序操作的核心代码在 &lt;code&gt;evictionPoolPopulate&lt;&#x2F;code&gt; 函数中&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;C&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C &quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* https:&#x2F;&#x2F;github.com&#x2F;redis&#x2F;redis&#x2F;blob&#x2F;3.0&#x2F;src&#x2F;redis.c#L3145 *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;EVICTION_SAMPLES_ARRAY_SIZE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;evictionPoolPopulate&lt;&#x2F;span&gt;&lt;span&gt;(dict *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sampledict&lt;&#x2F;span&gt;&lt;span&gt;, dict *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;keydict&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; evictionPoolEntry *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pool&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; j, k, count;
&lt;&#x2F;span&gt;&lt;span&gt;    dictEntry *_samples[EVICTION_SAMPLES_ARRAY_SIZE];
&lt;&#x2F;span&gt;&lt;span&gt;    dictEntry **samples;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Try to use a static buffer: this function is a big hit...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     * Note: it was actually measured that this helps. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(server.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;maxmemory_samples &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;= EVICTION_SAMPLES_ARRAY_SIZE) {
&lt;&#x2F;span&gt;&lt;span&gt;        samples = _samples;
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        samples = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;zmalloc&lt;&#x2F;span&gt;&lt;span&gt;(sizeof(samples[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;])*server.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;maxmemory_samples&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dictGetSomeKeys&lt;&#x2F;span&gt;&lt;span&gt;(sampledict,samples,server.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;maxmemory_samples&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(j = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; j &amp;lt; count; j++) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned long long&lt;&#x2F;span&gt;&lt;span&gt; idle;
&lt;&#x2F;span&gt;&lt;span&gt;        sds key;
&lt;&#x2F;span&gt;&lt;span&gt;        robj *o;
&lt;&#x2F;span&gt;&lt;span&gt;        dictEntry *de;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        de = samples[j];
&lt;&#x2F;span&gt;&lt;span&gt;        key = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dictGetKey&lt;&#x2F;span&gt;&lt;span&gt;(de);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* If the dictionary we are sampling from is not the main
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;         * dictionary (but the expires one) we need to lookup the key
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;         * again in the key dictionary to obtain the value object. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(sampledict != keydict) de = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dictFind&lt;&#x2F;span&gt;&lt;span&gt;(keydict, key);
&lt;&#x2F;span&gt;&lt;span&gt;        o = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dictGetVal&lt;&#x2F;span&gt;&lt;span&gt;(de);
&lt;&#x2F;span&gt;&lt;span&gt;        idle = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;estimateObjectIdleTime&lt;&#x2F;span&gt;&lt;span&gt;(o);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Insert the element inside the pool.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;         * First, find the first empty bucket or the first populated
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;         * bucket that has an idle time smaller than our idle time. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        k = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;(k &amp;lt; REDIS_EVICTION_POOL_SIZE &amp;amp;&amp;amp;
&lt;&#x2F;span&gt;&lt;span&gt;               pool[k].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp;
&lt;&#x2F;span&gt;&lt;span&gt;               pool[k].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;idle &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt; idle) k++;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(k == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; pool[REDIS_EVICTION_POOL_SIZE-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Can&amp;#39;t insert if the element is &amp;lt; the worst element we have
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;             * and there are no empty buckets. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;continue&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span&gt;(k &amp;lt; REDIS_EVICTION_POOL_SIZE &amp;amp;&amp;amp; pool[k].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Inserting into empty position. No setup needed before insert. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Inserting in the middle. Now k points to the first element
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;             * greater than the element to insert.  *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(pool[REDIS_EVICTION_POOL_SIZE-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Free space on the right? Insert at k shifting
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;                 * all the elements from k to end to the right. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;memmove&lt;&#x2F;span&gt;&lt;span&gt;(pool+k+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,pool+k,
&lt;&#x2F;span&gt;&lt;span&gt;                    sizeof(pool[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;])*(REDIS_EVICTION_POOL_SIZE-k-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;            } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* No free space on right? Insert at k-1 *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;                k--;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Shift all elements on the left of k (included) to the
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;                 * left, so we discard the element with smaller idle time. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sdsfree&lt;&#x2F;span&gt;&lt;span&gt;(pool[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;memmove&lt;&#x2F;span&gt;&lt;span&gt;(pool,pool+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,sizeof(pool[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;])*k);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        pool[k].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sdsdup&lt;&#x2F;span&gt;&lt;span&gt;(key);
&lt;&#x2F;span&gt;&lt;span&gt;        pool[k].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;idle &lt;&#x2F;span&gt;&lt;span&gt;= idle;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(samples != _samples) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;zfree&lt;&#x2F;span&gt;&lt;span&gt;(samples);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;can-kao-zi-liao&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#can-kao-zi-liao&quot; aria-label=&quot;Anchor link for: can-kao-zi-liao&quot;&gt;参考资料&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;antirez.com&#x2F;news&#x2F;109&quot;&gt;Random notes on improving the Redis LRU algorithm&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;redis.io&#x2F;topics&#x2F;lru-cache&quot;&gt;Using Redis as an LRU cache&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>DELL Precision T1700 SFF</title>
        <published>2020-12-04T00:52:03+08:00</published>
        <updated>2021-06-06T23:29:40+08:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://memwey.github.io/posts/dell-t1700-sff/"/>
        <id>https://memwey.github.io/posts/dell-t1700-sff/</id>
        
        <content type="html" xml:base="https://memwey.github.io/posts/dell-t1700-sff/">&lt;p&gt;原本的台式机, E3-1231v3 搭配上在挖矿狂潮前买的 GTX 1070, 在这个普遍挤牙膏的时期感觉再战三年不成问题. 不过既然有了自己的书房, 书房里没有电脑是万万不能的. 看了一下自己的钱包&lt;del&gt;和京东的无货&lt;&#x2F;del&gt;, 决定用 新平台 + 老显卡, 老平台 + 入门显卡 这样的组合, 让一台电脑变成两台.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tiao-xuan-guo-cheng&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#tiao-xuan-guo-cheng&quot; aria-label=&quot;Anchor link for: tiao-xuan-guo-cheng&quot;&gt;挑选过程&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;新平台暂且不表, 有空另外记录. 这段其实跳过也行, 都是一些流水账.&lt;&#x2F;p&gt;
&lt;p&gt;首先还是决定给老平台增加一些便携性, 毕竟性能够用就好, 租房住的生活还是要考虑搬家的, 之前的全铝加钢化玻璃机箱搬起来确实不方便. 另外, 对之前的乞丐版主板和电源也都不太满意, 但是问题最大的就是主板, LGA 1150 平台的 ITX 主板数量稀少且价格昂贵. 转换思路想一想, 机箱, 主板, 电源, 这不就是一个准系统吗.&lt;&#x2F;p&gt;
&lt;p&gt;淘宝逛了一下发现, 主要是 DELL 和 HP 的 SFF (Small Form Factor) 型准系统比较符合需求. 主要型号包括 &lt;code&gt;DELL OptiPlex 3020&lt;&#x2F;code&gt;, &lt;code&gt;DELL OptiPlex 7020&lt;&#x2F;code&gt;, &lt;code&gt;DELL OptiPlex 9020&lt;&#x2F;code&gt;, &lt;code&gt;DELL Precision T1700&lt;&#x2F;code&gt;, &lt;code&gt;HP ProDesk 400 G1&lt;&#x2F;code&gt;, &lt;code&gt;HP ProDesk 600 G1&lt;&#x2F;code&gt;, &lt;code&gt;HP ProDesk 800 G1&lt;&#x2F;code&gt;, &lt;code&gt;HP Z230&lt;&#x2F;code&gt;. 同系列的产品很好比较, 数字越大约好, 不过其实也没太大区别. HP 的机器相比 DELL 的稍微大一些, 扩展性稍强.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;DELL Precision T1700&lt;&#x2F;code&gt; 在以上型号中脱颖而出的原因可能就是因为它是 &lt;code&gt;Workstation&lt;&#x2F;code&gt; 和 &lt;code&gt;C226&lt;&#x2F;code&gt; 主板芯片组&lt;del&gt;和它不属于搞的人头晕的家族式型号&lt;&#x2F;del&gt;吧.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;xi-tong-jie-shao&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#xi-tong-jie-shao&quot; aria-label=&quot;Anchor link for: xi-tong-jie-shao&quot;&gt;系统介绍&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;尺寸: 290.00mm * 92.60mm * 312.00mm&lt;&#x2F;li&gt;
&lt;li&gt;体积: 8.38L&lt;&#x2F;li&gt;
&lt;li&gt;重量: 5.30KG&lt;&#x2F;li&gt;
&lt;li&gt;电源输出: 255W&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;memwey.github.io&#x2F;posts&#x2F;dell-t1700-sff&#x2F;images&#x2F;%E6%9C%BA%E7%AE%B1%E5%89%8D%E9%9D%A2%E6%9D%BF.jpeg&quot; alt=&quot;机箱前面板&quot; &#x2F;&gt;
图. 机箱前面板&lt;&#x2F;p&gt;
&lt;p&gt;体积完全可以称得上小巧. C226 主板可以让 LGA 1150 的 E3-1231v3 和 DDR3 的两条内存条发挥余热&lt;del&gt;和体验工作站主板&lt;&#x2F;del&gt;. 支持一张半高显卡可以在 E3-1231v3 没有核心显卡和一定的游戏需求中找到一个能用的解决方案.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ying-jian-pei-zhi&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#ying-jian-pei-zhi&quot; aria-label=&quot;Anchor link for: ying-jian-pei-zhi&quot;&gt;硬件配置&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;CPU: Intel Xeon E3-1231 v3 @ 3.40GHz 4C8T&lt;&#x2F;li&gt;
&lt;li&gt;RAM: G.SKILL 8G 1600MHz (x2)&lt;&#x2F;li&gt;
&lt;li&gt;GPU: NVIDIA GeForce GTX 1650 4G&lt;&#x2F;li&gt;
&lt;li&gt;SSD: GLOWAY STK240GS3-S7&lt;&#x2F;li&gt;
&lt;li&gt;Wi-Fi: Intel Dual Band Wireless-AC 7265&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;其余诸如主板, 机箱, 电源, 散热器都是准系统自带的.&lt;&#x2F;p&gt;
&lt;p&gt;由于显卡必须要 &lt;strong&gt;单槽位&lt;&#x2F;strong&gt; 的 &lt;strong&gt;半高&lt;&#x2F;strong&gt; 显卡, 所以这块 &lt;code&gt;翔升 GTX1650 4GD5 战刀&lt;&#x2F;code&gt; 应该是目前(2020-11-01)能买到的&lt;del&gt;现在已经买不到了, 刚看了一下&lt;&#x2F;del&gt;最强的显卡了.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;memwey.github.io&#x2F;posts&#x2F;dell-t1700-sff&#x2F;images&#x2F;%E6%98%BE%E5%8D%A1.jpeg&quot; alt=&quot;但是长的有点丑&quot; &#x2F;&gt;
图. 但是长的有点丑&lt;&#x2F;p&gt;
&lt;p&gt;其余配件就都是从老机器上拆下来的了, 唯一有点例外的是无线网卡, 因为是 PCIe 网卡, 之前是全高挡板, 淘宝算上邮费 7 块钱买了个半高挡板解决. 从北京快递过来邮费只要 4 块钱, 我也是惊了.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zhuang-ji-ti-yan&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#zhuang-ji-ti-yan&quot; aria-label=&quot;Anchor link for: zhuang-ji-ti-yan&quot;&gt;装机体验&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;memwey.github.io&#x2F;posts&#x2F;dell-t1700-sff&#x2F;images&#x2F;%E6%9C%BA%E7%AE%B1%E5%90%8E%E9%9D%A2%E6%9D%BF.jpeg&quot; alt=&quot;机箱后面板&quot; &#x2F;&gt;
图. 机箱后面板&lt;&#x2F;p&gt;
&lt;p&gt;小小机身拥有前置 4 个 USB 加后置 6 个 USB, 数量惊人. 甚至还带了 PS&#x2F;2 键鼠接口和 RS-232 串行接口. 显示输出带了两个 DP 和一个 VGA 这对新老搭档, 缺少中青代的 HDMI 和 DVI 可能会有点不便. &lt;del&gt;用独立显卡就无所谓了.&lt;&#x2F;del&gt;&lt;&#x2F;p&gt;
&lt;p&gt;机箱完全是免螺丝拆装的, 维护性很好. 机箱内部有大量塑料的部分, 主要起调整风道和固定的作用. 电源和前面板风扇从前面板下方吸风, 从机箱后部排出热风.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;memwey.github.io&#x2F;posts&#x2F;dell-t1700-sff&#x2F;images&#x2F;%E6%9C%BA%E7%AE%B1%E5%86%85%E9%83%A8.jpeg&quot; alt=&quot;机箱内部&quot; &#x2F;&gt;
图. 机箱内部&lt;&#x2F;p&gt;
&lt;p&gt;虽然主板上有三个 SATA 接口, 但实际上只有一个标准的硬盘供电, 凑合着和一个非标准的光驱供电一起从主板上引出, 所以想要使用超过一个硬盘要想想办法, 可以使用一转二的硬盘供电什么的.&lt;&#x2F;p&gt;
&lt;p&gt;如果使用单个固态硬盘的话, 直接把固态硬盘塞到那个 3.5 寸机械硬盘位就好了, 不过有机械硬盘的话, 固态硬盘就不太好安放了, 好在空间还算多, 固态硬盘也很坚强, 找个地方塞一下问题不大.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;memwey.github.io&#x2F;posts&#x2F;dell-t1700-sff&#x2F;images&#x2F;%E5%86%85%E9%83%A8%E7%BB%86%E8%8A%82.jpeg&quot; alt=&quot;凌乱的内部&quot; &#x2F;&gt;
图. 凌乱的内部&lt;&#x2F;p&gt;
&lt;p&gt;非标准的电源只有 255W, 而且只有一个 8pin 的主板供电和一个 4pin 的 CPU 供电, 没有任何 PCIe 供电. 不过反正半高显卡也基本都是能被 PCIe 16X 的 75W 供电满足的.&lt;&#x2F;p&gt;
&lt;p&gt;四个标准台式机内存插槽够用, 给已经成为时代的眼泪的 DDR3 内存找一个家. 插槽上有清晰的编号, 按照顺序插上即可.&lt;&#x2F;p&gt;
&lt;p&gt;主板提供了两个 PCIe 插槽, 一个全长 x16, 另一个是 x4. 但是问题是 16x 的反而 4x 的下面, 而且距离再下面的电源很近, 所以要想让显卡充分发挥只能用单槽位的. 不过这块 &lt;code&gt;翔升 GTX1650 4GD5 战刀&lt;&#x2F;code&gt; 是涡轮散热, 从显卡顶端的风扇吸风到尾部排出, 和机箱原有的前面板风扇风道一致, 散热应该还好. 有机友反馈显卡太长会挡住部分 SATA 接口, 这块显卡因为更短了, 所以没有这个情况.&lt;&#x2F;p&gt;
&lt;p&gt;主板上真的是一个多余的接口都没有, 导致 PCIe 无线网卡蓝牙功能所需的 USB 插头无处安放. 好吧, 小问题.&lt;&#x2F;p&gt;
&lt;p&gt;机箱还有一个内置的小音响, 虽然音质什么的只能说是听个响, 甚至还不怎么响, 但是应急什么的还是挺好用的.&lt;&#x2F;p&gt;
&lt;p&gt;原配的散热器是全铝的, 之前甚至都没见过这么寒酸的散热器. 在万能的淘宝上发现了可用的铜芯散热器 &lt;code&gt;J9G15&lt;&#x2F;code&gt;, 据商家所说是原配给更高端的 &lt;code&gt;XE2&lt;&#x2F;code&gt; 机型的散热器, 比全铝的重了有 90 克. 花费 46.8 入手一只换上, 感觉温度确实下降了不少.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;memwey.github.io&#x2F;posts&#x2F;dell-t1700-sff&#x2F;images&#x2F;%E6%9C%BA%E7%AE%B1%E5%A4%A7%E5%B0%8F.jpeg&quot; alt=&quot;机箱大小&quot; &#x2F;&gt;
图. 机箱大小参考&lt;&#x2F;p&gt;
&lt;h2 id=&quot;can-kao-zi-liao&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#can-kao-zi-liao&quot; aria-label=&quot;Anchor link for: can-kao-zi-liao&quot;&gt;参考资料&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;dl.dell.com&#x2F;topicspdf&#x2F;precision-t1700-workstation_owners-manual2_zh-cn.pdf&quot;&gt;Dell Precision T1700 小型计算机 用户手册&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.shellbin.me&#x2F;?p=911&quot;&gt;Dell Precision T1700 SFF 攒机与使用
&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;141329970&quot;&gt;年轻人的第一台Precision&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>[翻译] Kubernetes 网络模型指南</title>
        <published>2019-10-28T18:55:42+08:00</published>
        <updated>2019-10-28T18:55:42+08:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://memwey.github.io/posts/a-guide-to-the-kubernetes-networking-model/"/>
        <id>https://memwey.github.io/posts/a-guide-to-the-kubernetes-networking-model/</id>
        
        <content type="html" xml:base="https://memwey.github.io/posts/a-guide-to-the-kubernetes-networking-model/">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;sookocheff.com&#x2F;post&#x2F;kubernetes&#x2F;understanding-kubernetes-networking-model&#x2F;&quot;&gt;英文原文&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Kubernetes 旨在在一组机器上运行分布式系统。分布式系统的本质使网络成为 Kubernetes 部署中的核心且必要的部分，了解 Kubernetes 网络模型将使你能够正确地运行，监控和排查在 Kubernetes 上运行的应用程序。&lt;&#x2F;p&gt;
&lt;p&gt;网络是一个拥有许多成熟技术的广阔领域。对于不那么熟悉这个领域的人来说，这可能会令人感到不适，因为大多数人已经对网络有了先入为主的观念，而在 Kubernetes 中有很多新旧概念需要理解并将它们融合为一个整体。一个粗略的列表可能包括诸如网络命名空间，虚拟接口，IP 转发和网络地址转换之类的技术。本指南旨在通过讨论各种 Kubernetes 依靠的技术以及对这些技术是如何用来实现 Kubernetes 网络模型的描述来讲解 Kubernetes 网络模型。&lt;&#x2F;p&gt;
&lt;p&gt;本指南相当长，分为几个部分。我们首先讨论一些基本的 Kubernetes 术语以确保在整个指南中正确使用术语，然后讨论 Kubernetes 的网络模型以及它规定的设计和实现决策。接下来是本指南中最长且最有趣的部分：通过几种不同的用例深入讨论流量是如何在 Kubernetes 中被路由的。&lt;&#x2F;p&gt;
&lt;p&gt;如果您对一些网络术语，本指南附有网络术语词汇表。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;mu-lu&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#mu-lu&quot; aria-label=&quot;Anchor link for: mu-lu&quot;&gt;目录&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;1 Kubernetes 基础知识&lt;&#x2F;li&gt;
&lt;li&gt;2 Kubernetes 网络模型&lt;&#x2F;li&gt;
&lt;li&gt;3 Container 到 Container 网络&lt;&#x2F;li&gt;
&lt;li&gt;4 Pod 到 Pod 网络&lt;&#x2F;li&gt;
&lt;li&gt;5 Pod 到 Service 网络&lt;&#x2F;li&gt;
&lt;li&gt;6 Internet 到 Service 网络&lt;&#x2F;li&gt;
&lt;li&gt;6.1 Egress&lt;&#x2F;li&gt;
&lt;li&gt;6.2 Ingress&lt;&#x2F;li&gt;
&lt;li&gt;7 总结&lt;&#x2F;li&gt;
&lt;li&gt;8 术语表&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;1-kubernetes-ji-chu-zhi-shi&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#1-kubernetes-ji-chu-zhi-shi&quot; aria-label=&quot;Anchor link for: 1-kubernetes-ji-chu-zhi-shi&quot;&gt;1 Kubernetes 基础知识&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Kubernetes 是由一些核心概念构建而成的，这些核心概念被组合成越来越强大的功能。本节列出了这些概念，并提供了简要概述以帮助促进讨论。Kubernetes 的功能远不止这里列出的内容，本节作为入门使读者可以在后续部分中参考。如果您已经熟悉 Kubernetes，请随意跳过本节。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;1-1-kubernetes-api-fu-wu-qi&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#1-1-kubernetes-api-fu-wu-qi&quot; aria-label=&quot;Anchor link for: 1-1-kubernetes-api-fu-wu-qi&quot;&gt;1.1 Kubernetes API 服务器&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;在 Kubernetes 中，一切都是由 Kubernetes API 服务器 (&lt;code&gt;kube-apiserver&lt;&#x2F;code&gt;) 提供的 API 调用。API 服务器是通往维护着应用程序集群的所需状态的 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;coreos&#x2F;etcd&quot;&gt;etcd&lt;&#x2F;a&gt; 数据存储的网关。要更新 Kubernetes 集群的状态，您需要对 API 服务器进行 API 调用以描述所需的状态。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;1-2-controllers&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#1-2-controllers&quot; aria-label=&quot;Anchor link for: 1-2-controllers&quot;&gt;1.2 Controllers&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Controller 是用于构建 Kubernetes 的核心抽象概念之一。在使用 API 服务器声明集群的期望状态后，Controller 将通过持续监视 API 服务器的状态并对所以变化做出反应来确保集群的当前状态与期望状态相匹配。Controller 使用一个简单的循环进行操作，该循环不断地根据群集当前状态对比群集的期望状态。如果存在任何差异，则控制器执行任务以确保当前状态与期望状态符合。用伪代码来表示：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;while true:
&lt;&#x2F;span&gt;&lt;span&gt;  X = currentState()
&lt;&#x2F;span&gt;&lt;span&gt;  Y = desiredState()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  if X == Y:
&lt;&#x2F;span&gt;&lt;span&gt;    return  # Do nothing
&lt;&#x2F;span&gt;&lt;span&gt;  else:
&lt;&#x2F;span&gt;&lt;span&gt;    do(tasks to get to Y)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;例如，当您使用 API 服务器创建新的 Pod 时，&lt;code&gt;kube-scheduler&lt;&#x2F;code&gt; (一个 Controller) 会注意到更改，并决定 Pod 部署在群集中的位置。然后，它使用 API 服务器 (由 etcd 支持) 写入状态变更。然后，&lt;code&gt;kubelet&lt;&#x2F;code&gt; (另一个 Controller) 会注意到新的更改，并建立所需的网络功能以使 Pod 在群集中可达。在这里，两个不同的控制器对两个不同的状态更改做出反应，以使集群的实际状况与用户的意图相匹配。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;1-3-pods&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#1-3-pods&quot; aria-label=&quot;Anchor link for: 1-3-pods&quot;&gt;1.3 Pods&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Pod 相当于 Kubernetes 中的原子 - 用于构建应用程序的最小可部署对象。单个 Pod 代表集群中正在运行的工作负载，并封装一个或多个 Docker 容器，任何必需的存储以及一个唯一的 IP 地址。组成 Pod 的容器在设计上是协同的，并在同一机器上进行调度。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;1-4-nodes&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#1-4-nodes&quot; aria-label=&quot;Anchor link for: 1-4-nodes&quot;&gt;1.4 Nodes&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Node 是运行 Kubernetes 集群的机器。它们可以是裸机，虚拟机或其他东西。主机 (Host) 一词通常与 Node 交替使用。我会尽量使用一致的术语 Node，但有时会根据上下文使用虚拟机 (Virtual Machine) 一词来指代节点。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2-kubernetes-wang-luo-mo-xing&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#2-kubernetes-wang-luo-mo-xing&quot; aria-label=&quot;Anchor link for: 2-kubernetes-wang-luo-mo-xing&quot;&gt;2 Kubernetes 网络模型&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Kubernetes 对 Pods 的联网方式做出了固执的选择。特别的，Kubernetes 对所有的网络实现都作出了以下要求：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;所有 Pod 都可以与所有其他 Pod 通信而无需使用网络地址转换 (NAT)&lt;&#x2F;li&gt;
&lt;li&gt;所有 Node 都可以在没有 NAT 的情况下与所有 Pod 通信&lt;&#x2F;li&gt;
&lt;li&gt;Pod 所见的它的 IP 就是其他 Pod 看到的它的 IP&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;由于这些约束，我们现在有四个不同的联网问题需要解决：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Container 到 Container 网络&lt;&#x2F;li&gt;
&lt;li&gt;Pod 到 Pod 网络&lt;&#x2F;li&gt;
&lt;li&gt;Pod 到 Service 网络&lt;&#x2F;li&gt;
&lt;li&gt;Internet 到 Service 网络&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;指南剩下的部分将会依次讨论这些问题及其解决方法。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;3-container-dao-container-wang-luo&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#3-container-dao-container-wang-luo&quot; aria-label=&quot;Anchor link for: 3-container-dao-container-wang-luo&quot;&gt;3 Container 到 Container 网络&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;通常，我们将虚拟机中的网络通信视为直接与以太网设备进行交互，如图 1 所示。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;memwey.github.io&#x2F;posts&#x2F;a-guide-to-the-kubernetes-networking-model&#x2F;images&#x2F;eth0.png&quot; alt=&quot;Figure 1&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图1. 以太网设备的理想状况&lt;&#x2F;p&gt;
&lt;p&gt;在现实中，情况更加微妙。在 Linux，每个运行中的进程通过 &lt;a href=&quot;http:&#x2F;&#x2F;man7.org&#x2F;linux&#x2F;man-pages&#x2F;man8&#x2F;ip-netns.8.html&quot;&gt;网络命名空间&lt;&#x2F;a&gt; 进行通信，网络命名空间拥有它自己的路由规则、防火墙规则和网络设备。本质上，一个网络命名空间为命名空间内的所有进程提供了一个全新的网络栈。&lt;&#x2F;p&gt;
&lt;p&gt;Linux 用户可以用 &lt;code&gt;ip&lt;&#x2F;code&gt; 命令创造网络命名空间。例如，下面的命令创建了一个新的网络命名空间 &lt;code&gt;ns1&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ ip netns add ns1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;当命名空间被创建时，它的挂载点 &lt;code&gt;&#x2F;var&#x2F;run&#x2F;netns&lt;&#x2F;code&gt; 随之创建。这样即使没有进程归属于它也可以持久化。&lt;&#x2F;p&gt;
&lt;p&gt;你可以通过列出 &lt;code&gt;&#x2F;var&#x2F;run&#x2F;netns&lt;&#x2F;code&gt; 挂载点来列出可用的命名空间，或者用 &lt;code&gt;ip&lt;&#x2F;code&gt; 命令。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ ls &#x2F;var&#x2F;run&#x2F;netns
&lt;&#x2F;span&gt;&lt;span&gt;ns1
&lt;&#x2F;span&gt;&lt;span&gt;$ ip netns
&lt;&#x2F;span&gt;&lt;span&gt;ns1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;默认的，Linux 将所有进程分配给 root 网络命名空间来提供外部访问，如图 2。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;memwey.github.io&#x2F;posts&#x2F;a-guide-to-the-kubernetes-networking-model&#x2F;images&#x2F;root-namespace.png&quot; alt=&quot;Figure 2&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图2. Root 网络命名空间&lt;&#x2F;p&gt;
&lt;p&gt;对于 Docker 的结构来说，一个 Pod 是一组共享同一网络命名空间的 Docker 容器。同一 Pod 中的容器拥有网络命名空间分配给 Pod 的相同的 IP 地址和端口范围，并且可以通过 localhost 找到各自，因为他们在同一命名空间内。我们为虚拟机中的每一个 Pod 创建网络命名空间。在 Docker 的实现中，一个 &quot;Pod 容器&quot; 打开网络命名空间，然后用户指定的 &quot;app containers&quot; 通过 Docker 的 –net=container: 功能加入这个网络命名空间。图 3 展示了多个容器 (&lt;code&gt;ctr*&lt;&#x2F;code&gt;) 组成的 Pod 在共享的命名空间的情景。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;memwey.github.io&#x2F;posts&#x2F;a-guide-to-the-kubernetes-networking-model&#x2F;images&#x2F;pod-namespace.png&quot; alt=&quot;Figure 3&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图3. 每个 Pod 一个网络命名空间&lt;&#x2F;p&gt;
&lt;p&gt;同一个 Pod 中的应用程序同样拥有共享卷的访问权，根据 Pod 的定义, 共享卷可挂载到每个应用程序的文件系统。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;4-pod-dao-pod-wang-luo&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#4-pod-dao-pod-wang-luo&quot; aria-label=&quot;Anchor link for: 4-pod-dao-pod-wang-luo&quot;&gt;4 Pod 到 Pod 网络&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;在 Kubernetes 中，每个 Pod 都拥有真正的 IP 地址而且可以通过这个 IP 地址与别的 Pod 通信。当前需要理解 Kubernetes 是如何使 Pod 到 Pod 通信通过真正的 IP，无论 Pod 是在同一台物理 Node 上还是集群中的不同 Node 上。我们从假设 Pod 在相同的机器上开始讨论，避免 Node 之间通信在内部网络之外的复杂情况。&lt;&#x2F;p&gt;
&lt;p&gt;对于 Pod 来说，它在其命名空间中尝试去和在同一 Node 上不同网络命名空间通信。幸运的，命名空间可以通过 Linux &lt;a href=&quot;http:&#x2F;&#x2F;man7.org&#x2F;linux&#x2F;man-pages&#x2F;man4&#x2F;veth.4.html&quot;&gt;Virtual Ethernet Device&lt;&#x2F;a&gt;，或通过由两个虚拟接口组成的可以扩展到多个网络命名空间的 &lt;code&gt;veth pair&lt;&#x2F;code&gt; 连接。为了连接 Pod 的命名空间，我们可以把 veth pair 的一端连接到 root 网络命名空间，另一端连接到 Pod 的网络命名空间。Veth pair 像跳线一样工作，连接两端使流量可以流通。这一步可以重复直到其数目和机器上的 Pods 一样多。图 4 展示了 veth pair 连接了所有 Pod 到 VM 的 root 命名空间的情况。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;memwey.github.io&#x2F;posts&#x2F;a-guide-to-the-kubernetes-networking-model&#x2F;images&#x2F;pod-veth-pairs.png&quot; alt=&quot;Figure 4&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图4. 每个 Pod 均有 veth pair&lt;&#x2F;p&gt;
&lt;p&gt;现在，我们建立了有独立网络命名空间的 Pod，让他们相信他们拥有他们自己的以太网设备和 IP 地址，然后他们连接到了 Node 的 root 命名空间上。现在，我们想让 Pod 通过 root 命名空间和彼此通信，为此我们使用网桥。&lt;&#x2F;p&gt;
&lt;p&gt;Linux 以太网网桥是一个用来连接两个或以上网段的虚拟的 2 层网络设备，透明地工作在两个网络上使其相连。网桥维护一个来源和目标的转发表，通过检测经过它的数据包的目的地来决定它是否将数据包传递给别的连接到桥上的网段。网桥码通过查找网络中以太网设备唯一的 MAC 地址来决定了是否桥接数据或将其丢弃。&lt;&#x2F;p&gt;
&lt;p&gt;网桥实现了 ARP 协议来发现链路层 MAC 地址关联的 IP 地址的。当数据帧被网桥接收时，网桥向所有连接的设备 (除了原发送者) 广播帧，响应的设备被存入查询表。之后带有相同 IP 地址的流量将会使用查询表来查找转发的正确 MAC 地址。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;memwey.github.io&#x2F;posts&#x2F;a-guide-to-the-kubernetes-networking-model&#x2F;images&#x2F;pods-connected-by-bridge.png&quot; alt=&quot;Figure 5&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图5. 通过网桥连接命名空间&lt;&#x2F;p&gt;
&lt;h3 id=&quot;4-1-bao-de-sheng-ming-zhou-qi-tong-yi-node-shang-pod-dao-pod&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#4-1-bao-de-sheng-ming-zhou-qi-tong-yi-node-shang-pod-dao-pod&quot; aria-label=&quot;Anchor link for: 4-1-bao-de-sheng-ming-zhou-qi-tong-yi-node-shang-pod-dao-pod&quot;&gt;4.1 包的生命周期：同一 Node 上 Pod 到 Pod&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;已有将 Pod 隔离到其网络堆栈的网络名称空间，将每个命名空间连接到 root 命名空间的虚拟以太网设备，和将命名空间连接在一起的网桥，我们终于准备好在同一 Node 上的 Pod 之间发送流量了。图 6 演示了这个过程。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;memwey.github.io&#x2F;posts&#x2F;a-guide-to-the-kubernetes-networking-model&#x2F;images&#x2F;pod-to-pod-same-node.gif&quot; alt=&quot;Figure 6&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图6. 包在同一个 Node 上 Pod 之间传递&lt;&#x2F;p&gt;
&lt;p&gt;在图 6 中，容器 1 将数据包发送到其自己的以太网设备 &lt;code&gt;eth0&lt;&#x2F;code&gt;，该设备作为容器的默认设备。对于 Pod1，&lt;code&gt;eth0&lt;&#x2F;code&gt; 通过虚拟以太网设备连接到 root 命名空间 &lt;code&gt;veth0&lt;&#x2F;code&gt; (1)。配置网桥 &lt;code&gt;cbr0&lt;&#x2F;code&gt; 连接到网段 &lt;code&gt;veth0&lt;&#x2F;code&gt;。数据包到达网桥后，网桥使用 ARP 协议将其解析到其正确的目标网段 &lt;code&gt;veth1&lt;&#x2F;code&gt; (3)。当数据包到达虚拟设备 &lt;code&gt;veth1&lt;&#x2F;code&gt; 时，它将直接被转发到 Pod2 的命名空间和该命名空间中的 &lt;code&gt;eth0&lt;&#x2F;code&gt; 设备 (4)。在整个流量流中，每个 Pod 仅与 &lt;code&gt;localhost&lt;&#x2F;code&gt; 上的 &lt;code&gt;eth0&lt;&#x2F;code&gt; 通信，并且流量被路由到正确的 Pod。对于这个网络的使用，我们的经验是它符合开发人员期望的默认行为。&lt;&#x2F;p&gt;
&lt;p&gt;Kubernetes 的网络模型要求 Pod 必须通过其在跨 Node 中的 IP 地址才能访问。也就是说，一个 Pod 的 IP 地址始终对网络中的其他 Pod 可见，并且每个 Pod 所见的自己的 IP 地址都与其他 Pod 所见一致。现在，我们转向在不同 Node 上的 Pod 之间路由流量的问题。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;4-2-bao-de-sheng-ming-zhou-qi-bu-tong-node-shang-pod-dao-pod&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#4-2-bao-de-sheng-ming-zhou-qi-bu-tong-node-shang-pod-dao-pod&quot; aria-label=&quot;Anchor link for: 4-2-bao-de-sheng-ming-zhou-qi-bu-tong-node-shang-pod-dao-pod&quot;&gt;4.2 包的生命周期：不同 Node 上 Pod 到 Pod&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;在确定了如何在同一 Node 上的 Pod 之间路由数据包之后，我们转向在不同 Node 上的 Pod 之间路由流量。Kubernetes 网络模型要求 Pod IP 在整个网络上可达，但是它没有指定必须如何完成。实际上，这是基于特定于网络的，但是已有一些模式被建立起来以简化此过程。&lt;&#x2F;p&gt;
&lt;p&gt;通常，群集中的每个节点都分配有一个 CIDR 块，该块指定了该 Node 上运行的 Pod 可用的 IP 地址。一旦发往 CIDR 块的流量到达 Node，则 Node 有责任将流量转发到正确的 Pod。图 7 说明了两个 Node 之间的流量流，假设网络可以将 CIDR 块中的流量路由到正确的 Node。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;memwey.github.io&#x2F;posts&#x2F;a-guide-to-the-kubernetes-networking-model&#x2F;images&#x2F;pod-to-pod-different-nodes.gif&quot; alt=&quot;Figure 7&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图7. 包在不同 Node 上的 Pod 之间传递&lt;&#x2F;p&gt;
&lt;p&gt;图 7 从与图 6 相同的请求开始，除了目标 Pod (以绿色突出显示) 与源 Pod (以蓝色突出显示) 位于不同的 Node 上。数据包首先通过 Pod1 的以太网设备发送，该设备与 root 命名空间中的虚拟以太网设备配对 (1)。数据包最终到达 root 名称空间的网桥 (2)。ARP 将在网桥上失败，因为没有任何匹配数据包 MAC 地址的设备连接到网桥。网桥在失败时会将数据包送出默认路由 - root 命名空间 &lt;code&gt;eth0&lt;&#x2F;code&gt; 设备。此时，路由离开节点并进入网络 (3)。现在我们假设网络可以根据分配给 Node 的 CIDR 块将数据包路由到正确的 Node (4)。数据包进入目标 Node 的 root 命名空间 (VM 2 上的 &lt;code&gt;eth0&lt;&#x2F;code&gt;)，然后通过网桥路由到正确的虚拟以太网设备 (5)。最后，通过流经 Pod4 命名空间中的虚拟以太网设备对来完成路由 (6)。一般而言，每个 Node 都知道如何将数据包传递到其中运行的 Pod。数据包到达目标 Node 后，数据包的流动方式与在同一 Node 上的 Pod 之间路由流量的方式相同。&lt;&#x2F;p&gt;
&lt;p&gt;我们省略了一步，即如何配置网络以将 Pod IP 的流量路由到负责这些 IP 的正确的 Node。这是特定于网络的，不过通过研究相关特例也可以提供其所涉及问题的一些见解。例如，对于 AWS，Amazon 为 Kubernetes 维护了一个容器网络插件，该插件通过 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;aws&#x2F;amazon-vpc-cni-k8s&quot;&gt;容器网络接口 (CNI) 插件&lt;&#x2F;a&gt; 使在 Amazon VPC 环境中的 Node 到 Node 网络成为可能。&lt;&#x2F;p&gt;
&lt;p&gt;容器网络接口 (CNI) 提供了用于将容器连接到外部网络的通用 API。作为开发人员，我们想知道 Pod 可以使用 IP 地址与网络通信，并且我们希望此操作的机制透明。由 AWS 开发的 CNI 插件试图满足这些需求，同时通过 AWS 提供的现有 VPC，IAM 和安全组功能提供安全且可管理的环境。解决方案是使用弹性网络接口。&lt;&#x2F;p&gt;
&lt;p&gt;在 EC2 中，每个实例都绑定到一个弹性网络接口 (ENI)，并且所有 ENI 都连接在 VPC 内 - ENI 可以相互访问，而无需付出额外的代价。默认情况下，每个 EC2 实例都部署有一个 ENI，但是您可以随意创建多个 ENI 并将它们部署到您认为合适的 EC2 实例中。用于 Kubernetes 的 AWS CNI 插件利用这种灵活性，为部署到 Node 的每一个 Pod 创建一个新的 ENI。由于 VPC 中的 ENI 已经连接到了现有的 AWS 基础设施，因此，每个在 VPC 中 Pod 的 IP 地址都是本地可寻址的。将 CNI 插件部署到群集后，每个 Node (EC2 实例) 都会创建多个弹性网络接口，并为这些实例分配 IP 地址，从而为每个 Node 形成一个 CIDR 块。部署 Pod 时，作为 DaemonSet 部署到 Kubernetes 集群的小型二进制文件会收到所有的来自 Node 本地 kubelet 进程的将 Pod 添加到网络的请求。该二进制文件从 Node 的可用 ENI 池中选择一个可用 IP 地址，并通过在 Linux 内核中连接虚拟以太网设备和网桥，将其分配给 Pod，如在同一节点内将 Pod 联网时所述。有了这个，Pod 流量就可以在集群中跨 Node 进行路由。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;5-pod-dao-service-wang-luo&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#5-pod-dao-service-wang-luo&quot; aria-label=&quot;Anchor link for: 5-pod-dao-service-wang-luo&quot;&gt;5 Pod 到 Service 网络&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;我们已经展示了如何在 Pod 及其关联的 IP 地址之间路由流量。这非常有效，直到我们需要应对变化。Pod IP 地址不是持久性的，并且会出现和消失，以应对规模扩大和缩小，应用程序的崩溃或节点重新启动。每一个这些事件都可以使 Pod IP 地址更改而不会发出任何警告。内置在 Kubernetes 的 Service 用以解决此问题。&lt;&#x2F;p&gt;
&lt;p&gt;Kubernetes 的 Service 管理一组 Pod 的状态，使您可以跟踪随时动态变化的一组 Pod IP 地址。Service 充当 Pod 的抽象，并为一组 Pod IP 地址分配一个虚拟 IP 地址。寻址到 Service 的虚拟 IP 的任何流量都将被路由到与虚拟 IP 关联的 Pod 集。这允许与 Service 关联的 Pod 集随时更改 - 客户端只需要了解 Service 的不变的虚拟 IP。&lt;&#x2F;p&gt;
&lt;p&gt;创建新的 Kubernetes Service 时，将为您创建一个新的虚拟 IP (也称为群集 IP)。在群集中的任何位置，寻址到虚拟 IP 的流量将负载均衡到与该 Service 关联的一组后端 Pod。实际上，Kubernetes 会自动创建并维护一个集群内的分布式负载均衡器，该负载均衡器会将流量分发到与 Service 相关联的健康 Pod。让我们仔细看看它是如何工作的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;5-1-netfilter-he-iptables&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#5-1-netfilter-he-iptables&quot; aria-label=&quot;Anchor link for: 5-1-netfilter-he-iptables&quot;&gt;5.1 netfilter 和 iptables&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;为了在群集内执行负载平衡，Kubernetes 依赖于 Linux 内置的网络框架 &lt;code&gt;netfilter&lt;&#x2F;code&gt;。Netfilter 是一个 Linux 提供的网络框架，允许通过定制的 handler 来实现一系列网络相关的操作。Netfilter 提供了用于数据包过滤，网络地址转换和端口映射的各种功能和操作，这些功能和操作满足了网络中数据包重定向所需，并提供了禁止数据包到达计算机网络内敏感位置的功能。&lt;&#x2F;p&gt;
&lt;p&gt;Iptables 是一个用户空间程序，它提供一个基于表的系统，用于定义使用 netfilter 框架操作和转换数据包的规则。在 Kubernetes 中，iptables 规则由监视 Kubernetes API 服务器更改的 kube-proxy Controller 配置。当对 Service 或 Pod 的更改更新了 Service 的虚拟 IP 地址或 Pod 的 IP 地址时，将更新 iptables 规则以将针对 Service 的流量正确路由到后端 Pod。Iptables 规则监视发往 Service 的虚拟 IP 的流量，并在匹配项中从可用 Pod 的集合中选择一个随机的 Pod IP 地址，并且 iptables 规则将数据包的目标 IP 地址从服务的虚拟 IP 更改为 选中的 Pod 的 IP。随着 Pod 的规模扩大和缩小，iptables 规则集将更新以反映集群的变化状态。换句话说，iptables 在计算机上已通过将定向到 Service IP 的流量定向到实际 Pod 的 IP 完成了负载均衡，以。&lt;&#x2F;p&gt;
&lt;p&gt;在反过来的路径上，IP 地址来自目标 Pod。在这种情况下，iptables 再次重写 IP 头，用 Servicce 的 IP 替换 Pod 的 IP，使 Pod 认为它一直在与 Service 的 IP 进行通信。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;5-2-ipvs&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#5-2-ipvs&quot; aria-label=&quot;Anchor link for: 5-2-ipvs&quot;&gt;5.2 IPVS&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Kubernetes 的最新版本 (1.11) 包括集群负载均衡的第二个选项：IPVS。IPVS (IP 虚拟服务器) 也建立在 netfilter 之上，并作为 Linux 内核的一部分实现传输层负载均衡。IPVS 已集成到 LVS (Linux 虚拟服务器) 中，在主机上运行，并充当真实服务器集群前面的负载均衡器。IPVS 可以将基于 TCP 和 UDP 的服务的请求定向到真实服务器，并使由多台服务器组成的服务表现为在单个 IP 地址上的虚拟服务。这使得 IPVS 非常适合 Kubernetes Services。&lt;&#x2F;p&gt;
&lt;p&gt;声明 Kubernetes Service 时，可以指定是否要使用 iptables 或 IPVS 完成集群负载均衡。IPVS 专为负载均衡而设计，并使用更有效的数据结构 (哈希表)，与 iptables 相比，几乎可以无限扩展。创建使用 IPVS 负载均衡的 Service 时，会发生三件事：在 Node 上创建一个虚拟 IPVS 接口，将 Service 的 IP 地址绑定到该虚拟 IPVS 接口，并为每个 Service IP 地址创建 IPVS 服务器。&lt;&#x2F;p&gt;
&lt;p&gt;将来，IPVS 有望成为群集内负载均衡的默认方法。这个更改仅影响群集内负载均衡，在本指南的其余部分中，您可以使用 IPVS 安全地将 iptables 替换为群集内负载平衡，而不会影响其余的讨论。现在，让我们看一下通过群集内负载平衡 Service 的数据包的生命周期。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;5-3-bao-de-sheng-ming-zhou-qi-pod-dao-service&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#5-3-bao-de-sheng-ming-zhou-qi-pod-dao-service&quot; aria-label=&quot;Anchor link for: 5-3-bao-de-sheng-ming-zhou-qi-pod-dao-service&quot;&gt;5.3 包的生命周期：Pod 到 Service&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;memwey.github.io&#x2F;posts&#x2F;a-guide-to-the-kubernetes-networking-model&#x2F;images&#x2F;pod-to-service.gif&quot; alt=&quot;Figure 8&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图8. 数据包在 Pod 和 Service 间移动&lt;&#x2F;p&gt;
&lt;p&gt;在 Pod 和 Service 之间路由数据包时，旅程以与以前相同的方式开始。数据包首先通过附加到 Pod 网络名称空间 (1) 的 eth0 接口离开 Pod。然后，它通过虚拟以太网设备到达网桥 (2) 。在网桥上运行的 ARP 协议不了解服务，因此它通过默认路由 eth0 (3) 传送数据包。在这里，发生了一些不同的事情。在被 eth0 接受之前，该数据包已通过 iptables 进行过滤。收到数据包后，iptables 会使用 kube-proxy 安装在节点上的规则来响应 Service 或 Pod 事件，将数据包的目标从 Service IP 重写到特定的 Pod IP (4) 。现在，该数据包将到达 Pod 4，而不是服务的虚拟 IP。iptables 充分利用了 Linux 内核的 conntrack 实用程序，以记住做出的 Pod 选择，以便将来的流量被路由到相同的 Pod (除非有任何扩展事件) 。本质上，iptables 直接在节点上完成了集群负载平衡。然后，使用我们已经检查过的 Pod 到 Pod 路由，流量流向 Pod (5)。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;5-4-bao-de-sheng-ming-zhou-qi-service-dao-pod&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#5-4-bao-de-sheng-ming-zhou-qi-service-dao-pod&quot; aria-label=&quot;Anchor link for: 5-4-bao-de-sheng-ming-zhou-qi-service-dao-pod&quot;&gt;5.4 包的生命周期：Service 到 Pod&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;memwey.github.io&#x2F;posts&#x2F;a-guide-to-the-kubernetes-networking-model&#x2F;images&#x2F;service-to-pod.gif&quot; alt=&quot;Figure 9&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图9. 包在 Service 和 Pod 之间移动&lt;&#x2F;p&gt;
&lt;p&gt;接收到此数据包的 Pod 将做出响应，将源 IP 标识为自己的 IP，将目标 IP 标识为最初发送该数据包的 Pod (1) 。进入节点后，数据包流经 iptables，后者使用 conntrack 记住其先前所做的选择，并将数据包的源重写为服务的 IP，而不是 Pod 的 IP (2) 。数据包从这里流过网桥，到达与 Pod 的命名空间配对的虚拟以太网设备 (3) ，再到我们之前所见的 Pod 的以太网设备 (4) 。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;5-5-shi-yong-dns&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#5-5-shi-yong-dns&quot; aria-label=&quot;Anchor link for: 5-5-shi-yong-dns&quot;&gt;5.5 使用 DNS&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Kubernetes 可以选择使用 DNS，以避免必须将服务的群集 IP 地址硬编码到您的应用程序中。Kubernetes DNS 作为在群集上计划的常规 Kubernetes 服务运行。它配置在每个节点上运行的 kubelet，以便容器使用 DNS 服务的 IP 来解析 DNS 名称。为群集中定义的每个服务 (包括 DNS 服务器本身) 分配一个 DNS 名称。DNS 记录根据您的需要将 DNS 名称解析为服务的群集 IP 或 POD 的 IP。SRV 记录用于指定运行服务的特定命名端口。&lt;&#x2F;p&gt;
&lt;p&gt;一个 DNS Pod 由三个独立的容器组成：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;kubedns&lt;&#x2F;strong&gt;: 监视 Kubernetes 主服务器的服务和端点更改，并维护内存查找结构以服务 DNS 请求。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;dnsmasq&lt;&#x2F;strong&gt;: 添加 DNS 缓存以提高性能。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;sidecar&lt;&#x2F;strong&gt;: 提供单个运行状况检查端点，以执行 dnsmasq 和 kubedns 的运行状况检查。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;DNS Pod 本身作为 Kubernetes 服务公开，具有静态群集 IP，该 IP 在启动时传递给每个正在运行的容器，以便每个容器都可以解析 DNS 条目。DNS 条目通过 kubedns 系统解析，该系统在内存中维护 DNS 表示形式。etcd 是用于群集状态的后端存储系统，而 kubedns 使用一个库，该库在必要时将 etcd 密钥值存储转换为 DNS 条目，以重建内存 DNS 查找结构的状态。&lt;&#x2F;p&gt;
&lt;p&gt;CoreDNS 的工作方式与 kubedns 相似，但其使用的插件体系结构使其更加灵活。从 Kubernetes 1.11 开始，CoreDNS 是 Kubernetes 的默认 DNS 实现。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;6-cong-internet-dao-service-de-wang-luo&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#6-cong-internet-dao-service-de-wang-luo&quot; aria-label=&quot;Anchor link for: 6-cong-internet-dao-service-de-wang-luo&quot;&gt;6 从 Internet 到 Service 的网络&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;到目前为止，我们已经研究了如何在 Kubernetes 集群中路由流量。这一切都很好，但是不幸的是，将您的应用程序与外界隔离将无助于实现任何销售目标——在某个时候，您将需要向外部流量公开您的服务。这种需求突出了两个相关的问题： (1) 将来自 Kubernetes 服务的流量发送到 Internet (Egress) ，以及 (2) 将来自 Internet 的流量发送到您的 Kubernetes Service (Ingress) 。本节依次阐述这些问题。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;6-1-egress-jiang-liu-liang-lu-you-dao-internet&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#6-1-egress-jiang-liu-liang-lu-you-dao-internet&quot; aria-label=&quot;Anchor link for: 6-1-egress-jiang-liu-liang-lu-you-dao-internet&quot;&gt;6.1 Egress — 将流量路由到 Internet&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;从节点到公共 Internet 的流量路由是特定于网络的，并且实际上取决于网络配置为发布流量的方式。为了使本节更具体，我将使用 AWS VPC 讨论任何特定细节。&lt;&#x2F;p&gt;
&lt;p&gt;在 AWS 中，Kubernetes 集群在 VPC 内运行，其中为每个节点分配了一个私有 IP 地址，该地址可从 Kubernetes 集群内访问。要使流量可以从群集外部访问，请将 Internet 网关连接到 VPC。Internet 网关有两个目的：在 VPC 路由表中为可路由到 Internet 的流量提供目标，并为已分配了公共 IP 地址的任何实例执行网络地址转换 (NAT) 。NAT 转换负责将群集专用的节点内部 IP 地址更改为公用 Internet 上可用的外部 IP 地址。&lt;&#x2F;p&gt;
&lt;p&gt;有了 Internet 网关后，VM 可以自由地将流量路由到 Internet。不幸的是，这里有一个小问题。Pod 拥有自己的 IP 地址，该 IP 地址与托管 Pod 的节点的 IP 地址不同，并且 Internet 网关上的 NAT 转换仅适用于 VM IP 地址，因为它不了解哪些 Pod 在哪些 VM 上运行——网关不感知容器。让我们看看 Kubernetes 如何使用 iptables (再次) 解决这个问题。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;6-1-1-bao-de-sheng-ming-zhou-qi-node-dao-internet&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#6-1-1-bao-de-sheng-ming-zhou-qi-node-dao-internet&quot; aria-label=&quot;Anchor link for: 6-1-1-bao-de-sheng-ming-zhou-qi-node-dao-internet&quot;&gt;6.1.1 包的生命周期：Node 到 Internet&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;memwey.github.io&#x2F;posts&#x2F;a-guide-to-the-kubernetes-networking-model&#x2F;images&#x2F;pod-to-internet.gif&quot; alt=&quot;Figure 10&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图10. 将数据包从 Pod 路由到 Internet&lt;&#x2F;p&gt;
&lt;p&gt;在下图中，数据包起源于 Pod 的名称空间 (1) ，并经过与根名称空间 (2) 连接的 veth 对。一旦进入根名称空间，由于数据包上的 IP 与连接到网桥的任何网段都不匹配，数据包就会从网桥移动到默认设备。在到达根名称空间的以太网设备 (3) 之前，iptables 会处理数据包 (3) 。在这种情况下，数据包的源 IP 地址是 Pod，如果我们将源保留为 Pod，则 Internet 网关将拒绝它，因为网关 NAT 仅了解连接到 VM 的 IP 地址。解决方案是让 iptables 执行源 NAT (更改数据包源) ，以便数据包看起来是来自 VM 而不是 Pod。有了正确的源 IP，数据包现在可以离开 VM (4) 并到达 Internet 网关 (5) 。Internet 网关将执行另一个 NAT，将源 IP 从 VM 内部 IP 重写为外部 IP。最终，数据包将到达公共 Internet (6) 。在返回的过程中，数据包遵循相同的路径，并且所有源 IP 处理都被撤消，因此系统的每一层都接收其能够理解的 IP 地址：节点或 VM 级别的 VM 内部 IP，以及 Pod 命名空间内的 Pod IP。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;6-2-ingress-jiang-internet-liu-liang-lu-you-dao-kubernetes&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#6-2-ingress-jiang-internet-liu-liang-lu-you-dao-kubernetes&quot; aria-label=&quot;Anchor link for: 6-2-ingress-jiang-internet-liu-liang-lu-you-dao-kubernetes&quot;&gt;6.2 Ingress — 将 Internet 流量路由到 Kubernetes&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Ingress——将流量引入群集——是一个非常棘手的问题。同样，这是特定于您正在运行的网络的，但是通常，Ingress 分为两个可在网络堆栈的不同部分上运行的解决方案： (1) Service LoadBalancer 和 (2) Ingress 控制器。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;6-2-1-4ceng-ingress-loadbalancer&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#6-2-1-4ceng-ingress-loadbalancer&quot; aria-label=&quot;Anchor link for: 6-2-1-4ceng-ingress-loadbalancer&quot;&gt;6.2.1 4层 Ingress: LoadBalancer&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;创建 Kubernetes 服务时，可以选择指定一个 &lt;code&gt;LoadBalancer&lt;&#x2F;code&gt; 来配合它。云控制器提供了 &lt;code&gt;LoadBalancer&lt;&#x2F;code&gt; 的实现，该控制器知道如何为您的服务创建负载均衡器。创建服务后，它将为负载均衡器通告 IP 地址。作为最终用户，您可以开始将流量定向到负载平衡器，以开始与服务进行通信。&lt;&#x2F;p&gt;
&lt;p&gt;借助 AWS，负载均衡器可以知道其目标组中的节点，并将平衡群集中所有节点上的流量。一旦流量到达节点，先前在整个群集中为您的服务安装的 iptables 规则将确保流量到达您感兴趣的服务的 Pod。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;6-2-2-bao-de-sheng-ming-zhou-qi-loadbalancer-dao-service&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#6-2-2-bao-de-sheng-ming-zhou-qi-loadbalancer-dao-service&quot; aria-label=&quot;Anchor link for: 6-2-2-bao-de-sheng-ming-zhou-qi-loadbalancer-dao-service&quot;&gt;6.2.2 包的生命周期：LoadBalancer 到 Service&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;memwey.github.io&#x2F;posts&#x2F;a-guide-to-the-kubernetes-networking-model&#x2F;images&#x2F;internet-to-service.gif&quot; alt=&quot;Figure 11&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图11. 从 Internet 发送到 Service 的数据包&lt;&#x2F;p&gt;
&lt;p&gt;让我们看看这在实践中是如何工作的。部署服务后，您正在使用的云提供商将为您创建一个新的负载均衡器 (1) 。因为负载平衡器不感知容器，所以一旦流量到达负载平衡器，它便会分布在组成群集的所有 VM 中 (2) 。每个 VM 上的 iptables 规则会将来自负载均衡器的传入流量定向到正确的 Pod (3) ——这些规则与创建服务期间制定的 IP 表规则相同，前面已经讨论过。从 Pod 到客户端的响应将返回 Pod 的 IP，但客户端需要具有负载均衡器的 IP 地址。如前所述，iptables 和 conntrack 用于在返回路径上正确重写 IP。&lt;&#x2F;p&gt;
&lt;p&gt;下图显示了在承载 Pod 的三个 VM 之前的网络负载平衡器。传入流量 (1) 指向服务的负载平衡器。一旦负载均衡器收到数据包 (2) ，它就会随机选择一个 VM。在这种情况下，我们病理地选择了没有运行 Pod 的 VM：VM 2 (3) 。在这里，在 VM 上运行的 iptables 规则将使用通过 kube-proxy 安装到群集中的内部负载平衡规则将数据包定向到正确的 Pod。iptables 执行正确的 NAT，并将数据包转发到正确的 Pod (4) 。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;6-2-3-7ceng-ingress-ingress-controller&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#6-2-3-7ceng-ingress-ingress-controller&quot; aria-label=&quot;Anchor link for: 6-2-3-7ceng-ingress-ingress-controller&quot;&gt;6.2.3 7层 Ingress: Ingress Controller&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;7 层网络 Ingress 在网络堆栈的 HTTP&#x2F;HTTPS 协议范围内运行，并建立在服务之上。启用 Ingress 的第一步是使用 Kubernetes 中的 &lt;code&gt;NodePort&lt;&#x2F;code&gt; 服务类型在服务上打开端口。如果将服务的 &lt;code&gt;type&lt;&#x2F;code&gt; 字段设置为 &lt;code&gt;NodePort&lt;&#x2F;code&gt;，则 Kubernetes 主服务器将在您指定的范围内分配一个端口，并且每个节点会将该端口 (每个节点上的相同端口号) 代理到您的服务中。也就是说，使用 iptables 规则，任何定向到该节点端口的流量都将转发到该服务。这种从 Service 到 Pod 的路由遵循了我们之前在讨论从 Service 到 Pod 的流量路由时已经讨论过的相同的内部集群负载平衡模式。&lt;&#x2F;p&gt;
&lt;p&gt;要将节点的端口暴露给 Internet，请使用 &lt;code&gt;Ingress&lt;&#x2F;code&gt; 对象。Ingress 是更高级别的 HTTP 负载平衡器，可将 HTTP 请求映射到 Kubernetes Services。Ingress 方法将有所不同，具体取决于 Kubernetes 云提供商控制器如何实现它。HTTP 负载平衡器 (如 4 层网络负载平衡器) 仅了解 Node IP (而非 Pod IP) ，因此流量路由同样利用 kube-proxy 在每个节点上安装的 iptables 规则提供的内部负载平衡。&lt;&#x2F;p&gt;
&lt;p&gt;在 AWS 环境中，ALB Ingress Controller 使用 Amazon 的 7 层应用程序负载平衡器 (ALB) 提供 Kubernetes Ingress。下图详细说明了此控制器创建的 AWS 组件。它还演示了 Ingress 流量从 ALB 到 Kubernetes 集群的路由。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;memwey.github.io&#x2F;posts&#x2F;a-guide-to-the-kubernetes-networking-model&#x2F;images&#x2F;ingress-controller-design.png&quot; alt=&quot;Figure 12&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图12. Ingress Controller 的设计&lt;&#x2F;p&gt;
&lt;p&gt;创建后， (1) Ingress Controller 将监视来自 Kubernetes API 服务器的 Ingress 事件。当发现满足其要求的 Ingress 资源时，它将开始创建 AWS 资源。AWS 将应用程序负载平衡器 (ALB)  (2) 用于 Ingress 资源。负载均衡器与用于将请求路由到一个或多个已注册节点的目标组 (Target Groups) 配合使用。(3) 在 AWS 中为 Ingress 资源描述的每个唯一的 Kubernetes 服务创建目标组。(4) 侦听器 (Listener) 是 ALB 进程，它使用您配置的协议和端口检查连接请求。Ingress 控制器为 Ingress 资源注释中详细说明的每个端口创建侦听器。最后，为 Ingress 资源中指定的每个路径创建目标组规则。这样可以确保将到特定路径的流量路由到正确的 Kubernetes 服务 (5) 。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;6-2-4-bao-de-sheng-ming-zhou-qi-ingress-dao-service&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#6-2-4-bao-de-sheng-ming-zhou-qi-ingress-dao-service&quot; aria-label=&quot;Anchor link for: 6-2-4-bao-de-sheng-ming-zhou-qi-ingress-dao-service&quot;&gt;6.2.4 包的生命周期：Ingress 到 Service&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;memwey.github.io&#x2F;posts&#x2F;a-guide-to-the-kubernetes-networking-model&#x2F;images&#x2F;ingress-to-service.gif&quot; alt=&quot;Figure 13&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图13. 从 Ingress 发送到 Service 的数据包&lt;&#x2F;p&gt;
&lt;p&gt;流经 Ingress 的数据包的生命周期与 LoadBalancer 的非常相似。主要区别在于，Ingress 知道 URL 的路径 (允许并可以根据服务的路径将流量路由到服务) ，并且 Ingress 和 Node 之间的初始连接是通过为每个服务在 Node 上暴露的端口进行的。&lt;&#x2F;p&gt;
&lt;p&gt;让我们看看这在实践中是如何工作的。部署服务后，您正在使用的云提供商将为您创建一个新的 Ingress 负载均衡器 (1) 。由于负载平衡器不感知容器，因此，一旦流量到达负载平衡器，它将通过为您的服务通告的端口在组成您的群集 (2) 的所有 VM 中进行分配。如前所述，每个 VM 上的 iptables 规则会将来自负载均衡器的传入流量定向到正确的 Pod (3) 。从 Pod 到客户端的响应将返回 Pod 的 IP，但客户端需要具有负载均衡器的 IP 地址。如前所述，iptables 和 conntrack 用于在返回路径上正确重写 IP。&lt;&#x2F;p&gt;
&lt;p&gt;7 层负载平衡器的一个好处是它们可以识别 HTTP，因此他们知道 URL 和路径。这使您可以按 URL 路径细分服务流量。它们通常还会在 HTTP 请求的 &lt;code&gt;X-Forwarded-For&lt;&#x2F;code&gt; 标头中提供原始客户端的 IP 地址。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;7-zong-jie&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#7-zong-jie&quot; aria-label=&quot;Anchor link for: 7-zong-jie&quot;&gt;7 总结&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;本指南为理解 Kubernetes 网络模型及其如何实现常见的网络任务提供了基础。网络领域既广且深，不可能在这里涵盖所有内容。本指南应为您提供一个起点，以深入研究您感兴趣并希望了解更多的主题。每当您遇到困难时，请利用 Kubernetes 文档和 Kubernetes 社区来帮助您找到方向。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;8-shu-yu-biao&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#8-shu-yu-biao&quot; aria-label=&quot;Anchor link for: 8-shu-yu-biao&quot;&gt;8 术语表&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Kubernetes 依靠几种现有技术来构建可运行的集群。全面探索每种技术不在本指南的讨论范围内，但是本节将对每种技术进行足够详细的介绍，以供讨论时参考。您可以随意浏览本节，完全跳过本节，或者在感到困惑或需要复习时根据需要参考。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2ceng-wang-luo-layer-2-networking&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#2ceng-wang-luo-layer-2-networking&quot; aria-label=&quot;Anchor link for: 2ceng-wang-luo-layer-2-networking&quot;&gt;2层网络 (Layer 2 Networking)&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;第 2 层是提供节点到节点数据传输的数据链路层。它定义了在两个物理连接的设备之间建立和终止连接的协议，以及它们之间的流量控制协议。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;4ceng-wang-luo-layer-4-networking&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#4ceng-wang-luo-layer-4-networking&quot; aria-label=&quot;Anchor link for: 4ceng-wang-luo-layer-4-networking&quot;&gt;4层网络 (Layer 4 Networking)&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;传输层通过流量控制来控制给定链接的可靠性。在 TCP&#x2F;IP 中，该层指的是用于在不可靠网络上交换数据的 TCP 协议。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;7ceng-wang-luo-layer-7-networking&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#7ceng-wang-luo-layer-7-networking&quot; aria-label=&quot;Anchor link for: 7ceng-wang-luo-layer-7-networking&quot;&gt;7层网络 (Layer 7 Networking)&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;应用层是离最终用户最近的层，这意味着应用层和用户都直接与软件应用程序交互。该层与实现通信组件的软件应用程序交互。通常，7 层网络指的是 HTTP。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;nat-wang-luo-di-zhi-zhuan-huan-network-address-translation&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#nat-wang-luo-di-zhi-zhuan-huan-network-address-translation&quot; aria-label=&quot;Anchor link for: nat-wang-luo-di-zhi-zhuan-huan-network-address-translation&quot;&gt;NAT — 网络地址转换 (Network Address Translation)&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;NAT 或网络地址转换是将一个地址空间 IP 级别地重新映射到另一个地址空间。该映射通过在数据包在流量路由设备中传输时修改其 IP 头中的网络地址信息来实现。&lt;&#x2F;p&gt;
&lt;p&gt;基本的 NAT 是从一个 IP 地址到另一个 IP 地址的简单映射。更常见的是，NAT 用于将多个私有 IP 地址映射到一个公共暴露的 IP 地址。通常，本地网络使用私有 IP 地址空间，该网络上的路由器在该空间中被赋予一个私有地址。然后，该路由器通过一个公共 IP 地址连接到 Internet。当流量从本地网络传递到 Internet 时，每个数据包的源地址从私有地址转换为公共地址，使其看起来好像请求直接来自路由器。路由器维护连接跟踪，以将回复转发到本地网络上正确的私有 IP。&lt;&#x2F;p&gt;
&lt;p&gt;NAT 提供了一个额外的好处，即允许大型私有网络使用单个公共 IP 地址连接到 Internet，从而节省了公共使用的 IP 地址数量。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;snat-yuan-wang-luo-di-zhi-zhuan-huan-source-network-address-translation&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#snat-yuan-wang-luo-di-zhi-zhuan-huan-source-network-address-translation&quot; aria-label=&quot;Anchor link for: snat-yuan-wang-luo-di-zhi-zhuan-huan-source-network-address-translation&quot;&gt;SNAT — 源网络地址转换 (Source Network Address Translation)&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;SNAT 仅指修改 IP 数据包源地址的 NAT 过程。这是上述 NAT 的典型行为。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dnat-mu-de-wang-luo-di-zhi-zhuan-huan-destination-network-address-translation&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#dnat-mu-de-wang-luo-di-zhi-zhuan-huan-destination-network-address-translation&quot; aria-label=&quot;Anchor link for: dnat-mu-de-wang-luo-di-zhi-zhuan-huan-destination-network-address-translation&quot;&gt;DNAT — 目的网络地址转换 (Destination Network Address Translation)&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;DNAT 指修改 IP 数据包目的地址的 NAT 过程。DNAT 用于将位于私有网络中的服务发布到可公开寻址的 IP 地址。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wang-luo-ming-ming-kong-jian-network-namespace&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#wang-luo-ming-ming-kong-jian-network-namespace&quot; aria-label=&quot;Anchor link for: wang-luo-ming-ming-kong-jian-network-namespace&quot;&gt;网络命名空间 (Network Namespace)&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;在网络中，每台机器 (真实的或虚拟的) 都有一个以太网设备 (我们称之为 eth0) 。所有进出机器的流量都与该设备相关联。实际上，Linux 将每个以太网设备与一个网络命名空间相关联——这是整个网络堆栈的逻辑副本，拥有自己的路由、防火墙规则和网络设备。最初，所有进程都从 init 进程共享相同的默认网络命名空间，称为根命名空间。默认情况下，进程从其父进程继承其网络命名空间，因此，如果您不做任何更改，所有网络流量都将通过为根网络命名空间指定的以太网设备流动。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;veth-xu-ni-yi-tai-wang-she-bei-dui-virtual-ethernet-device-pairs&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#veth-xu-ni-yi-tai-wang-she-bei-dui-virtual-ethernet-device-pairs&quot; aria-label=&quot;Anchor link for: veth-xu-ni-yi-tai-wang-she-bei-dui-virtual-ethernet-device-pairs&quot;&gt;veth — 虚拟以太网设备对 (Virtual Ethernet Device Pairs)&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;计算机系统通常由一个或多个网络设备 (eth0，eth1 等) 组成，这些设备与负责将数据包放置到物理线路上的物理网络适配器相关联。Veth 设备是始终以互连对形式创建的虚拟网络设备。它们可以充当网络命名空间之间的隧道，以创建到另一个命名空间中物理网络设备的桥梁，但也可以用作独立的网络设备。您可以将 veth 设备视为设备之间的虚拟跳线——一端进去的东西会从另一端出来。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bridge-wang-luo-wang-qiao-network-bridge&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#bridge-wang-luo-wang-qiao-network-bridge&quot; aria-label=&quot;Anchor link for: bridge-wang-luo-wang-qiao-network-bridge&quot;&gt;bridge — 网络网桥 (Network Bridge)&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;网络网桥是一种从多个通信网络或网段创建单个聚合网络的设备。桥接将两个独立的网络连接起来，就好像它们是一个单一的网络一样。桥接使用内部数据结构来记录每个数据包发送到的位置，作为性能优化。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cidr-wu-lei-bie-yu-jian-lu-you-classless-inter-domain-routing&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#cidr-wu-lei-bie-yu-jian-lu-you-classless-inter-domain-routing&quot; aria-label=&quot;Anchor link for: cidr-wu-lei-bie-yu-jian-lu-you-classless-inter-domain-routing&quot;&gt;CIDR — 无类别域间路由 (Classless Inter-Domain Routing)&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;CIDR 是一种分配 IP 地址和执行 IP 路由的方法。使用 CIDR，IP 地址由两组组成：网络前缀 (标识整个网络或子网) 和主机标识符 (指定该网络或子网上主机的特定接口) 。CIDR 使用 CIDR 表示法表示 IP 地址，其中地址或路由前缀带有一个后缀，指示前缀的位数，例如 IPv4 的 192.0.2.0&#x2F;24。IP 地址是 CIDR 块的一部分，如果地址的初始 n 位与 CIDR 前缀相同，则称其属于该 CIDR 块。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cni-rong-qi-wang-luo-jie-kou-container-network-interface&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#cni-rong-qi-wang-luo-jie-kou-container-network-interface&quot; aria-label=&quot;Anchor link for: cni-rong-qi-wang-luo-jie-kou-container-network-interface&quot;&gt;CNI — 容器网络接口 (Container Network Interface)&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;CNI (容器网络接口) 是云原生计算基金会 (Cloud Native Computing Foundation) 的一个项目，由一个规范和用于编写插件以在 Linux 容器中配置网络接口的库组成。CNI 只关心容器的网络连接性以及在容器被删除时移除已分配的资源。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;vip-xu-ni-ip-di-zhi-virtual-ip-address&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#vip-xu-ni-ip-di-zhi-virtual-ip-address&quot; aria-label=&quot;Anchor link for: vip-xu-ni-ip-di-zhi-virtual-ip-address&quot;&gt;VIP — 虚拟 IP 地址 (Virtual IP Address)&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;虚拟 IP 地址 (VIP) 是一种软件定义的 IP 地址，不对应于实际的物理网络接口。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;netfilter-linux-de-bao-guo-lu-kuang-jia&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#netfilter-linux-de-bao-guo-lu-kuang-jia&quot; aria-label=&quot;Anchor link for: netfilter-linux-de-bao-guo-lu-kuang-jia&quot;&gt;netfilter — Linux 的包过滤框架&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;netfilter 是 Linux 中的数据包过滤框架。实现此框架的软件负责数据包过滤、网络地址转换 (NAT) 和其他数据包处理。&lt;&#x2F;p&gt;
&lt;p&gt;netfilter、ip_tables、连接跟踪 (ip_conntrack, nf_conntrack) 和 NAT 子系统共同构成了该框架的主要部分。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;iptables-bao-chu-li-gong-ju&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#iptables-bao-chu-li-gong-ju&quot; aria-label=&quot;Anchor link for: iptables-bao-chu-li-gong-ju&quot;&gt;iptables — 包处理工具&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;iptables 是一个允许 Linux 系统管理员配置 netfilter 及其存储的链和规则的程序。IP 表中的每个规则都由多个分类器 (iptables 匹配) 和一个连接的动作 (iptables 目标) 组成。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;conntrack-lian-jie-gen-zong&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#conntrack-lian-jie-gen-zong&quot; aria-label=&quot;Anchor link for: conntrack-lian-jie-gen-zong&quot;&gt;conntrack — 连接跟踪&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;conntrack 是建立在 Netfilter 框架之上的用于处理连接跟踪的工具。连接跟踪允许内核跟踪所有逻辑网络连接或会话，并将每个连接或会话的数据包定向到正确的发送方或接收方。NAT 依赖此信息以相同的方式转换所有相关数据包，而 iptables 可以使用此信息充当有状态的防火墙。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ipvs-ip-xu-ni-fu-wu-qi-ip-virtual-server&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#ipvs-ip-xu-ni-fu-wu-qi-ip-virtual-server&quot; aria-label=&quot;Anchor link for: ipvs-ip-xu-ni-fu-wu-qi-ip-virtual-server&quot;&gt;IPVS — IP 虚拟服务器 (IP Virtual Server)&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;IPVS 作为 Linux 内核的一部分实现传输层负载均衡。&lt;&#x2F;p&gt;
&lt;p&gt;IPVS 是一个类似于 iptables 的工具。它基于 Linux 内核的 netfilter 钩子函数，但使用哈希表作为底层数据结构。这意味着，与 iptables 相比，IPVS 重定向流量的速度要快得多，在同步代理规则时性能要好得多，并提供更多的负载均衡算法。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dns-yu-ming-xi-tong-the-domain-name-system&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#dns-yu-ming-xi-tong-the-domain-name-system&quot; aria-label=&quot;Anchor link for: dns-yu-ming-xi-tong-the-domain-name-system&quot;&gt;DNS — 域名系统 (The Domain Name System)&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;域名系统 (DNS) 是一种用于将系统名称与 IP 地址关联的分散式命名系统。它将域名转换为数字 IP 地址，以便定位计算机服务。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Oh MySQL Emoji</title>
        <published>2019-10-14T11:12:33+08:00</published>
        <updated>2019-10-14T11:12:33+08:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://memwey.github.io/posts/oh-mysql-emoji/"/>
        <id>https://memwey.github.io/posts/oh-mysql-emoji/</id>
        
        <content type="html" xml:base="https://memwey.github.io/posts/oh-mysql-emoji/">&lt;p&gt;又是关于 &lt;code&gt;MySQL&lt;&#x2F;code&gt; 的, 标题来自于 &amp;lt;轮到你了&amp;gt; 这部&lt;del&gt;烂尾&lt;&#x2F;del&gt;日剧, 里面非常魔性的 Oh~my~Ju~lia~&lt;&#x2F;p&gt;
&lt;p&gt;在MySQL里面如何保存 &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Emoji&quot;&gt;Emoji&lt;&#x2F;a&gt;, 这个问题搜一搜很容易找到答案, 设置 &lt;strong&gt;CHARSET&lt;&#x2F;strong&gt; 为 &lt;code&gt;utf8mb4&lt;&#x2F;code&gt;, 看来天下苦 &lt;code&gt;MySQL&lt;&#x2F;code&gt; 久矣.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ji-chu-zhi-shi&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#ji-chu-zhi-shi&quot; aria-label=&quot;Anchor link for: ji-chu-zhi-shi&quot;&gt;基础知识&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;计算机最早是美国人发明的, 那时的编码都是 &lt;code&gt;ASCII&lt;&#x2F;code&gt; 码, 毕竟英文字符加上标点符号也就那么多嘛, 一个字节绰绰有余.&lt;&#x2F;p&gt;
&lt;p&gt;但是随着计算机的发展, 计算机面向的国家和语言越来越多, 一个字节根本不够用了, 于是就有了很多面向特定语言的编码, 比如汉字的&lt;code&gt;GBK&lt;&#x2F;code&gt;, &lt;code&gt;Big5&lt;&#x2F;code&gt;, 韩文的 &lt;code&gt;EUC-KR&lt;&#x2F;code&gt;, 日文的 &lt;code&gt;Shift_JIS&lt;&#x2F;code&gt; 什么的. 总体思想是, 既然一个字节不够用, 那就多几个字节就是了嘛.&lt;&#x2F;p&gt;
&lt;p&gt;但是问题又出现了, 同一个编码在不同语言中会有不同的含义,比如韩文编码 &lt;code&gt;EUC-KR&lt;&#x2F;code&gt; 中 &lt;code&gt;한국어&lt;&#x2F;code&gt; 的编码值正好对应着汉字编码 &lt;code&gt;GBK&lt;&#x2F;code&gt; 中的 &lt;code&gt;茄惫绢&lt;&#x2F;code&gt;. 还有那个著名的 &lt;code&gt;瓣B变巨肚&lt;&#x2F;code&gt;, 也正是同样的原因. 这样仿佛就变成了巴别塔的故事. 人们虽然用着同样的二进制编码, 但是却表达着不同的意思; 就像人们虽然同样发出声带的震动, 但是却无法互相理解对方的话语.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;International_Organization_for_Standardization&quot;&gt;国际标准化组织&lt;&#x2F;a&gt; 和 &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Unicode_Consortium&quot;&gt;统一码联盟&lt;&#x2F;a&gt; 意识到, 这样下去是不行的, 不如搞一个超大的字符集, 然后把人类所有字符都弄进去, 这样人类都可以用同一个标准了. 于是, 他们分别制定了 &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Universal_Coded_Character_Set&quot;&gt;USC&lt;&#x2F;a&gt; 和 &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Unicode&quot;&gt;Unicode&lt;&#x2F;a&gt;. 当然, 如果两个标准各搞各的, 那就和他们最初的想法背道而驰了, 所以目前这两个字符集在实际使用中是一致的. 一般还是把这个字符集叫 &lt;code&gt;Unicode&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Unicode&lt;&#x2F;code&gt; 的范围上限是 &lt;code&gt;0x10FFFF&lt;&#x2F;code&gt;, 换算成十进制就是 &lt;code&gt;1,114,111&lt;&#x2F;code&gt; 这么多. 所以如果以后外星人的文字太多, 说不定这个范围就不够了.&lt;&#x2F;p&gt;
&lt;p&gt;其实这里悄悄的偷换了一个概念, 之前在说编码, 现在变成了字符集了. 在很多之前提到的编码中, 这些编码既是字符集, 又是直接的编码. 而在 &lt;code&gt;Unicode&lt;&#x2F;code&gt; 中, 字符集实际上是与编码分开的两个概念, 而对应的编码, 实际上就是我们经常见到的 &lt;code&gt;UTF&lt;&#x2F;code&gt;. 其中 &lt;code&gt;UTF-8&lt;&#x2F;code&gt; 是我们最常见的一种编码了.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;UTF-8&lt;&#x2F;code&gt; 最大的特点, 就是它是一种变长的编码方式, 而且完全兼容 &lt;code&gt;ASCII&lt;&#x2F;code&gt;码.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;UTF-8&lt;&#x2F;code&gt; 的编码规则也很简单，只有二条:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对于单字节的符号, 字节的第一位设为&lt;code&gt;0&lt;&#x2F;code&gt;, 后面7位为这个符号的 Unicode 码. 对于 &lt;code&gt;0 - 127&lt;&#x2F;code&gt; 位的字符，UTF-8 编码和 ASCII 码是完全相同的.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;对于 &lt;code&gt;n&lt;&#x2F;code&gt; 字节的符号 &lt;code&gt;(n &amp;gt; 1)&lt;&#x2F;code&gt; , 第一个字节的前 &lt;code&gt;n&lt;&#x2F;code&gt; 位都设为 &lt;code&gt;1&lt;&#x2F;code&gt;, 第 &lt;code&gt;n + 1&lt;&#x2F;code&gt; 位设为 &lt;code&gt;0&lt;&#x2F;code&gt;, 后面字节的前两位一律设为 &lt;code&gt;10&lt;&#x2F;code&gt;. 剩下的没有提及的二进制位, 全部为这个符号的 Unicode 码.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Unicode符号范围&lt;&#x2F;th&gt;&lt;th&gt;UTF-8编码方式&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;U+0000 - U+007F&lt;&#x2F;td&gt;&lt;td&gt;0xxxxxxx&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;U+0080 - U+07FF&lt;&#x2F;td&gt;&lt;td&gt;110xxxxx 10xxxxxx&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;U+0800 - U+FFFF&lt;&#x2F;td&gt;&lt;td&gt;1110xxxx 10xxxxxx 10xxxxxx&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;U+010000 - U+10FFFF&lt;&#x2F;td&gt;&lt;td&gt;11110xxx 10xxxxxx 10xxxxxx 10xxxxxx&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;在这里我们发现, &lt;code&gt;U+0000 - U+FFFF&lt;&#x2F;code&gt; 这个&lt;strong&gt;平面&lt;&#x2F;strong&gt;(Plane), 即&lt;strong&gt;基本多文种平面&lt;&#x2F;strong&gt;, 简称 &lt;code&gt;BMP&lt;&#x2F;code&gt;, 用 &lt;code&gt;UTF-8&lt;&#x2F;code&gt; 进行编码, 只需要三个字节.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;lun-dao-ni-liao&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#lun-dao-ni-liao&quot; aria-label=&quot;Anchor link for: lun-dao-ni-liao&quot;&gt;轮到你了&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;在 &lt;code&gt;MySQL&lt;&#x2F;code&gt; 的 &lt;strong&gt;CHARSET&lt;&#x2F;strong&gt; 中, &lt;code&gt;utf8&lt;&#x2F;code&gt; 支持存储 1 - 3字节的字符, 即对应 &lt;code&gt;Unicode&lt;&#x2F;code&gt; 中 &lt;code&gt;BMP&lt;&#x2F;code&gt; 的部分, 而 &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Emoji&quot;&gt;Emoji&lt;&#x2F;a&gt;, 则大多数在 &lt;code&gt;BMP&lt;&#x2F;code&gt; 之外. 所以 &lt;code&gt;MySQL&lt;&#x2F;code&gt; 中的 &lt;code&gt;utf8&lt;&#x2F;code&gt; 是假的, 是化学的成分, 是加了特技的. 如果想储存真正的 &lt;code&gt;UTF-8&lt;&#x2F;code&gt; 的内容, 就一定要使用 &lt;code&gt;utf8mb4&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;当然, 并不是所有的 &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Emoji&quot;&gt;Emoji&lt;&#x2F;a&gt; 都在 &lt;code&gt;BMP&lt;&#x2F;code&gt; 之外, 比如 ☺ 这个表情, 它的编码是 &lt;code&gt;U+263A&lt;&#x2F;code&gt;, 还有 ☹️ , 编码是 &lt;code&gt;U+2639&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;当然, 也不是所有的汉字都被包含在了 &lt;code&gt;BMP&lt;&#x2F;code&gt; 里面了, 在 &lt;a href=&quot;https:&#x2F;&#x2F;www.compart.com&#x2F;en&#x2F;unicode&#x2F;block&quot;&gt;这里&lt;&#x2F;a&gt; 可以看到字符是按照一定的规律划分为 &lt;code&gt;Block&lt;&#x2F;code&gt; 放进来的, 在&lt;strong&gt;表意文字补充平面&lt;&#x2F;strong&gt;也就是 &lt;code&gt;U+20000 - U+2FFFF&lt;&#x2F;code&gt; 这个&lt;strong&gt;平面&lt;&#x2F;strong&gt;(Plane), 还是有很多 &lt;code&gt;CJK&lt;&#x2F;code&gt; 命名的 &lt;code&gt;Block&lt;&#x2F;code&gt; 的.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zai-lai-yi-ping&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#zai-lai-yi-ping&quot; aria-label=&quot;Anchor link for: zai-lai-yi-ping&quot;&gt;再来一瓶&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;你以为坑到这里就结束了吗&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;SQL&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-SQL &quot;&gt;&lt;code class=&quot;language-SQL&quot; data-lang=&quot;SQL&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;CREATE TABLE &lt;&#x2F;span&gt;&lt;span&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;emoji_test&lt;&#x2F;span&gt;&lt;span&gt;` (
&lt;&#x2F;span&gt;&lt;span&gt;  `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;` &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;INT&lt;&#x2F;span&gt;&lt;span&gt; UNSIGNED NOT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt; AUTO_INCREMENT,
&lt;&#x2F;span&gt;&lt;span&gt;  `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;emoji&lt;&#x2F;span&gt;&lt;span&gt;` &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;VARCHAR&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1024&lt;&#x2F;span&gt;&lt;span&gt;) NOT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;PRIMARY KEY&lt;&#x2F;span&gt;&lt;span&gt; (`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;`)
&lt;&#x2F;span&gt;&lt;span&gt;) ENGINE=InnoDB &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;DEFAULT&lt;&#x2F;span&gt;&lt;span&gt; CHARSET=utf8mb4;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;SQL&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-SQL &quot;&gt;&lt;code class=&quot;language-SQL&quot; data-lang=&quot;SQL&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SET&lt;&#x2F;span&gt;&lt;span&gt; NAMES utf8mb4;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MySQL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; SELECT * FROM emoji_test;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;+----+-------+
&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;emoji &lt;&#x2F;span&gt;&lt;span&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;+----+-------+
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;😃      &lt;&#x2F;span&gt;&lt;span&gt;|
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;9 &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;😂      &lt;&#x2F;span&gt;&lt;span&gt;|
&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;🤦      &lt;&#x2F;span&gt;&lt;span&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;+----+-------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt; rows in set (0.001 sec)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MySQL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; SELECT * FROM emoji_test WHERE emoji = &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;😂&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;+----+-------+
&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;emoji &lt;&#x2F;span&gt;&lt;span&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;+----+-------+
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;😃      &lt;&#x2F;span&gt;&lt;span&gt;|
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;9 &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;😂      &lt;&#x2F;span&gt;&lt;span&gt;|
&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;🤦      &lt;&#x2F;span&gt;&lt;span&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;+----+-------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt; rows in set (0.001 sec)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;是不是很神奇呢, 看下表的信息呢&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;SQL&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-SQL &quot;&gt;&lt;code class=&quot;language-SQL&quot; data-lang=&quot;SQL&quot;&gt;&lt;span&gt;MySQL [test]&amp;gt; SHOW TABLE STATUS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span&gt; Name = &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;emoji_test&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;------------+--------+---------+------------+------+----------------+-------------+-----------------+--------------+-----------+----------------+---------------------+---------------------+------------+--------------------+----------+----------------+---------+
&lt;&#x2F;span&gt;&lt;span&gt;| Name       | Engine | Version | Row_format | Rows | Avg_row_length | Data_length | Max_data_length | Index_length | Data_free | Auto_increment | Create_time         | Update_time         | Check_time | Collation          | Checksum | Create_options | Comment |
&lt;&#x2F;span&gt;&lt;span&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;------------+--------+---------+------------+------+----------------+-------------+-----------------+--------------+-----------+----------------+---------------------+---------------------+------------+--------------------+----------+----------------+---------+
&lt;&#x2F;span&gt;&lt;span&gt;| emoji_test | InnoDB |      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt; | Dynamic    |    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt; |           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5461&lt;&#x2F;span&gt;&lt;span&gt; |       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16384&lt;&#x2F;span&gt;&lt;span&gt; |               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt; |            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt; |         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt; |             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span&gt; | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2019&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16 11&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;28&lt;&#x2F;span&gt;&lt;span&gt; | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2019&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16 11&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;25&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt; | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;       | utf8mb4_general_ci |     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt; |                |         |
&lt;&#x2F;span&gt;&lt;span&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;------------+--------+---------+------------+------+----------------+-------------+-----------------+--------------+-----------+----------------+---------------------+---------------------+------------+--------------------+----------+----------------+---------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; row in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;001&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以看到此时默认的字符序是 &lt;code&gt;utf8mb4_general_ci&lt;&#x2F;code&gt;, 使用 &lt;code&gt;WEIGHT_STRING&lt;&#x2F;code&gt; 来查询这些 Emoji 的字符序&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;SQL&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-SQL &quot;&gt;&lt;code class=&quot;language-SQL&quot; data-lang=&quot;SQL&quot;&gt;&lt;span&gt;MySQL [test]&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SET&lt;&#x2F;span&gt;&lt;span&gt; @s = &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;😂&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; COLLATE utf8mb4_general_ci;
&lt;&#x2F;span&gt;&lt;span&gt;Query OK, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt; rows affected (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;003&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;MySQL [test]&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span&gt; @s, HEX(@s), HEX(WEIGHT_STRING(@s));
&lt;&#x2F;span&gt;&lt;span&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;------+----------+------------------------+
&lt;&#x2F;span&gt;&lt;span&gt;| @s   | HEX(@s)  | HEX(WEIGHT_STRING(@s)) |
&lt;&#x2F;span&gt;&lt;span&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;------+----------+------------------------+
&lt;&#x2F;span&gt;&lt;span&gt;| 😂     | F09F9882 | FFFD                   |
&lt;&#x2F;span&gt;&lt;span&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;------+----------+------------------------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; row in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;001&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;MySQL [test]&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SET&lt;&#x2F;span&gt;&lt;span&gt; @s = &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;😃&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; COLLATE utf8mb4_general_ci;
&lt;&#x2F;span&gt;&lt;span&gt;Query OK, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt; rows affected (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;001&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;MySQL [test]&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span&gt; @s, HEX(@s), HEX(WEIGHT_STRING(@s));
&lt;&#x2F;span&gt;&lt;span&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;------+----------+------------------------+
&lt;&#x2F;span&gt;&lt;span&gt;| @s   | HEX(@s)  | HEX(WEIGHT_STRING(@s)) |
&lt;&#x2F;span&gt;&lt;span&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;------+----------+------------------------+
&lt;&#x2F;span&gt;&lt;span&gt;| 😃     | F09F9883 | FFFD                   |
&lt;&#x2F;span&gt;&lt;span&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;------+----------+------------------------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; row in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;001&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以看到, 它们的编码虽然不同, 但是字符序的值是相同的, 都是 &lt;code&gt;0xFFFD&lt;&#x2F;code&gt;, 所以在匹配的时候, 它们被认为是同一个字符, 这又是 &lt;code&gt;MySQL&lt;&#x2F;code&gt; 的一个大坑&lt;&#x2F;p&gt;
&lt;p&gt;要是想粗暴点解决问题的话, 直接使用 &lt;code&gt;utf8mb4_bin&lt;&#x2F;code&gt; 作为字符序就好了&lt;&#x2F;p&gt;
&lt;h2 id=&quot;you-lai-yi-ping&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#you-lai-yi-ping&quot; aria-label=&quot;Anchor link for: you-lai-yi-ping&quot;&gt;又来一瓶&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;但是这还不是结束, 当业务代码连接数据库并插入一些 Emoji 时, 还是可能遇到如下错误&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;ERROR 1366: Incorrect string value: &amp;#39;\xF0\x9D\x8C\x86&amp;#39; for column &amp;#39;column_name&amp;#39; at row 1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这个是因为客户端到 MySQL 服务器的连接还是 utf8 而非 utf8mb4, 所以你需要在业务逻辑中做类似如下语句的事情&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;SET NAMES utf8mb4
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;或者修改 MySQL 的配置文件, 当然这样不太现实, 需要重启 MySQL 进程.&lt;&#x2F;p&gt;
&lt;p&gt;这样你才能终于用上 Emoji&lt;&#x2F;p&gt;
&lt;h2 id=&quot;can-kao-zi-liao&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#can-kao-zi-liao&quot; aria-label=&quot;Anchor link for: can-kao-zi-liao&quot;&gt;参考资料&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;41147829&#x2F;how-can-i-search-by-emoji-in-mysql-using-utf8mb4&quot;&gt;How can I search by emoji in MySQL using utf8mb4?&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ruanyifeng.com&#x2F;blog&#x2F;2007&#x2F;10&#x2F;ascii_unicode_and_utf-8.html&quot;&gt;字符编码笔记：ASCII，Unicode 和 UTF-8
&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.zhihu.com&#x2F;question&#x2F;60072951&quot;&gt;如何通俗地理解Unicode、UTF-8、ASCII、GBK等字符编码？&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@adamhooper&#x2F;in-mysql-never-use-utf8-use-utf8mb4-11761243e434&quot;&gt;In MySQL, never use “utf8”. Use “utf8mb4”.&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;mathiasbynens.be&#x2F;notes&#x2F;mysql-utf8mb4&quot;&gt;How to support full Unicode in MySQL databases&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;5.7&#x2F;en&#x2F;charset-connection.html&quot;&gt;Connection Character Sets and Collations&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;10957238&#x2F;incorrect-string-value-when-trying-to-insert-utf-8-into-mysql-via-jdbc&quot;&gt;“Incorrect string value” when trying to insert UTF-8 into MySQL via JDBC?&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;kuo-zhan-yue-du&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#kuo-zhan-yue-du&quot; aria-label=&quot;Anchor link for: kuo-zhan-yue-du&quot;&gt;扩展阅读&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;53714077&quot;&gt;其实你并不懂 Unicode&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;eev.ee&#x2F;blog&#x2F;2015&#x2F;09&#x2F;12&#x2F;dark-corners-of-unicode&#x2F;&quot;&gt;Dark corners of Unicode&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;mysql.taobao.org&#x2F;monthly&#x2F;2017&#x2F;03&#x2F;06&#x2F;&quot;&gt;MySQL · 实现分析 · 对字符集和字符序支持的实现&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3.7&#x2F;library&#x2F;unicodedata.html&quot;&gt;unicodedata — Unicode Database&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Oh MySQL IN Subquery</title>
        <published>2019-09-21T15:22:58+08:00</published>
        <updated>2019-09-21T15:22:58+08:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://memwey.github.io/posts/oh-mysql-in-subquery/"/>
        <id>https://memwey.github.io/posts/oh-mysql-in-subquery/</id>
        
        <content type="html" xml:base="https://memwey.github.io/posts/oh-mysql-in-subquery/">&lt;p&gt;感觉 &lt;code&gt;MySQL&lt;&#x2F;code&gt; 的坑实在是有点多,记录一下这个 &lt;code&gt;MySQL&lt;&#x2F;code&gt; 的坑, 也记录一下这个教训吧, 下次在数据库中直接操作一定要多小心&lt;&#x2F;p&gt;
&lt;h2 id=&quot;xian-xiang-hui-fang&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#xian-xiang-hui-fang&quot; aria-label=&quot;Anchor link for: xian-xiang-hui-fang&quot;&gt;现象回放&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;现在有两张表, 表结构如下, 无关字段已经省略&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;team&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;+-------------+---------------------+
&lt;&#x2F;span&gt;&lt;span&gt;| Field       | Type                |
&lt;&#x2F;span&gt;&lt;span&gt;+-------------+---------------------+
&lt;&#x2F;span&gt;&lt;span&gt;| id          | int(10) unsigned    |
&lt;&#x2F;span&gt;&lt;span&gt;| status      | tinyint(3) unsigned |
&lt;&#x2F;span&gt;&lt;span&gt;+-------------+---------------------+
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;player&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;+-------------+---------------------+
&lt;&#x2F;span&gt;&lt;span&gt;| Field       | Type                |
&lt;&#x2F;span&gt;&lt;span&gt;+-------------+---------------------+
&lt;&#x2F;span&gt;&lt;span&gt;| id          | int(10) unsigned    |
&lt;&#x2F;span&gt;&lt;span&gt;| team_id     | int(10) unsigned    |
&lt;&#x2F;span&gt;&lt;span&gt;| status      | tinyint(3) unsigned |
&lt;&#x2F;span&gt;&lt;span&gt;+-------------+---------------------+
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;容易理解, 这是简单的一对多的关系, 一个足球队 team 里面, 有多个球员 player&lt;&#x2F;p&gt;
&lt;p&gt;现在想取出有 player 的状态为 &lt;code&gt;1&lt;&#x2F;code&gt; 的 team&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;SQL&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-SQL &quot;&gt;&lt;code class=&quot;language-SQL&quot; data-lang=&quot;SQL&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt; team &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span&gt; id IN (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span&gt; id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span&gt; team_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt; player &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span&gt; status = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) AS a);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;理论上, 这条语句是不能执行的, 注意这里&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;...... SELECT id FROM (SELECT team_id FROM ......&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;但是, 不知道为何, 这条语句是可以执行的, 而且等价于&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;SQL&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-SQL &quot;&gt;&lt;code class=&quot;language-SQL&quot; data-lang=&quot;SQL&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt; team;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果单独把最外层的 IN 里面的 subquery 取出来, &lt;code&gt;MySQL&lt;&#x2F;code&gt; 会报错&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;SQL&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-SQL &quot;&gt;&lt;code class=&quot;language-SQL&quot; data-lang=&quot;SQL&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span&gt; id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span&gt; team_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt; player &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span&gt; status = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) AS a;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;ERROR 1054 (42S22): Unknown column &#x27;id&#x27; in &#x27;field list&#x27;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;再试着把 id 改为不存在的字段&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;SQL&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-SQL &quot;&gt;&lt;code class=&quot;language-SQL&quot; data-lang=&quot;SQL&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt; team &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span&gt; id IN (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span&gt; not_exist_field &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span&gt; team_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt; player &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span&gt; status = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) AS a);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;ERROR 1054 (42S22): Unknown column &#x27;not_exist_field&#x27; in &#x27;field list&#x27;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;这样才能如预期的报错&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wen-ti-pai-cha&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#wen-ti-pai-cha&quot; aria-label=&quot;Anchor link for: wen-ti-pai-cha&quot;&gt;问题排查&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;先 EXPLAIN 试试呢&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;SQL&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-SQL &quot;&gt;&lt;code class=&quot;language-SQL&quot; data-lang=&quot;SQL&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*************************** &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;. row &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;***************************
&lt;&#x2F;span&gt;&lt;span&gt;           id: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;  select_type: SIMPLE
&lt;&#x2F;span&gt;&lt;span&gt;        table: team
&lt;&#x2F;span&gt;&lt;span&gt;   partitions: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL
&lt;&#x2F;span&gt;&lt;span&gt;         type: ALL
&lt;&#x2F;span&gt;&lt;span&gt;possible_keys: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL
&lt;&#x2F;span&gt;&lt;span&gt;          key: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL
&lt;&#x2F;span&gt;&lt;span&gt;      key_len: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL
&lt;&#x2F;span&gt;&lt;span&gt;          ref: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL
&lt;&#x2F;span&gt;&lt;span&gt;         rows: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;     filtered: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;00
&lt;&#x2F;span&gt;&lt;span&gt;        Extra: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*************************** &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;. row &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;***************************
&lt;&#x2F;span&gt;&lt;span&gt;           id: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;  select_type: SIMPLE
&lt;&#x2F;span&gt;&lt;span&gt;        table: player
&lt;&#x2F;span&gt;&lt;span&gt;   partitions: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL
&lt;&#x2F;span&gt;&lt;span&gt;         type: ALL
&lt;&#x2F;span&gt;&lt;span&gt;possible_keys: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL
&lt;&#x2F;span&gt;&lt;span&gt;          key: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL
&lt;&#x2F;span&gt;&lt;span&gt;      key_len: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL
&lt;&#x2F;span&gt;&lt;span&gt;          ref: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL
&lt;&#x2F;span&gt;&lt;span&gt;         rows: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5
&lt;&#x2F;span&gt;&lt;span&gt;     filtered: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;00
&lt;&#x2F;span&gt;&lt;span&gt;        Extra: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Using where&lt;&#x2F;span&gt;&lt;span&gt;; FirstMatch(team); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Using join&lt;&#x2F;span&gt;&lt;span&gt; buffer (Block Nested Loop)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt; rows in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt; warnings (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;001&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;好像看不出来什么问题呢, 不过有 warnings, 看一下呢&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;SQL&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-SQL &quot;&gt;&lt;code class=&quot;language-SQL&quot; data-lang=&quot;SQL&quot;&gt;&lt;span&gt;SHOW WARNINGS\G
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;*************************** 1. row ***************************
&lt;&#x2F;span&gt;&lt;span&gt;  Level: Note
&lt;&#x2F;span&gt;&lt;span&gt;   Code: 1276
&lt;&#x2F;span&gt;&lt;span&gt;Message: Field or reference &amp;#39;test.team.id&amp;#39; of SELECT #2 was resolved in SELECT #1
&lt;&#x2F;span&gt;&lt;span&gt;*************************** 2. row ***************************
&lt;&#x2F;span&gt;&lt;span&gt;  Level: Note
&lt;&#x2F;span&gt;&lt;span&gt;   Code: 1003
&lt;&#x2F;span&gt;&lt;span&gt;Message: &#x2F;* select#1 *&#x2F; select `test`.`team`.`id` AS `id`,`test`.`team`.`status` AS `status` from `test`.`team` semi join (`test`.`player`) where (`test`.`player`.`status` = 1)
&lt;&#x2F;span&gt;&lt;span&gt;2 rows in set (0.001 sec)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里出现了一个 &lt;code&gt;semi join&lt;&#x2F;code&gt;, 没有见过呢, 查看一下文档, 大意就是, 比如使用 &lt;code&gt;INNER JOIN&lt;&#x2F;code&gt; 的时候, 会返回匹配次数个结果. 但是我们并不关注匹配的次数, 比如如下语句, 我想取出有球员的 status 为 0 的球队, 可以这样写&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;SQL&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-SQL &quot;&gt;&lt;code class=&quot;language-SQL&quot; data-lang=&quot;SQL&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt; team &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;INNER JOIN&lt;&#x2F;span&gt;&lt;span&gt; player ON &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;team&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;= team_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;WHERE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;player&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;status &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果一个球队里有多个 status 为 0 的球员, 那么就会出现多个记录, 比如这样&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;+----+--------+----+---------+--------+
&lt;&#x2F;span&gt;&lt;span&gt;| id | status | id | team_id | status |
&lt;&#x2F;span&gt;&lt;span&gt;+----+--------+----+---------+--------+
&lt;&#x2F;span&gt;&lt;span&gt;|  1 |      0 |  1 |       1 |      0 |
&lt;&#x2F;span&gt;&lt;span&gt;|  1 |      0 |  2 |       1 |      0 |
&lt;&#x2F;span&gt;&lt;span&gt;|  2 |      0 |  5 |       2 |      0 |
&lt;&#x2F;span&gt;&lt;span&gt;|  2 |      0 |  6 |       2 |      0 |
&lt;&#x2F;span&gt;&lt;span&gt;+----+--------+----+---------+--------+
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样明显有些冗余的数据了. 当然我们可以用 &lt;code&gt;DISTINCT&lt;&#x2F;code&gt; 什么的再处理一遍, 但是这样效率会比较低. 那么, 就可以用类似的子查询就方便多了&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;SQL&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-SQL &quot;&gt;&lt;code class=&quot;language-SQL&quot; data-lang=&quot;SQL&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt; team &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span&gt; id IN (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span&gt; team_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt; player &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span&gt; status = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;返回的结果也简洁多了&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;+----+--------+
&lt;&#x2F;span&gt;&lt;span&gt;| id | status |
&lt;&#x2F;span&gt;&lt;span&gt;+----+--------+
&lt;&#x2F;span&gt;&lt;span&gt;|  1 |      0 |
&lt;&#x2F;span&gt;&lt;span&gt;|  2 |      0 |
&lt;&#x2F;span&gt;&lt;span&gt;+----+--------+
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;当然, 要这样优化还是有很多条件的, 林林总总的, 可以去官方文档查看&lt;&#x2F;p&gt;
&lt;p&gt;看了这么多, 感觉还是和这个问题没什么关系啊, 试着 EXPLAIN 一下正确的语句&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;SQL&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-SQL &quot;&gt;&lt;code class=&quot;language-SQL&quot; data-lang=&quot;SQL&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*************************** &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;. row &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;***************************
&lt;&#x2F;span&gt;&lt;span&gt;           id: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;  select_type: SIMPLE
&lt;&#x2F;span&gt;&lt;span&gt;        table: team
&lt;&#x2F;span&gt;&lt;span&gt;   partitions: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL
&lt;&#x2F;span&gt;&lt;span&gt;         type: ALL
&lt;&#x2F;span&gt;&lt;span&gt;possible_keys: PRIMARY
&lt;&#x2F;span&gt;&lt;span&gt;          key: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL
&lt;&#x2F;span&gt;&lt;span&gt;      key_len: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL
&lt;&#x2F;span&gt;&lt;span&gt;          ref: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL
&lt;&#x2F;span&gt;&lt;span&gt;         rows: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;     filtered: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;00
&lt;&#x2F;span&gt;&lt;span&gt;        Extra: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*************************** &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;. row &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;***************************
&lt;&#x2F;span&gt;&lt;span&gt;           id: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;  select_type: SIMPLE
&lt;&#x2F;span&gt;&lt;span&gt;        table: player
&lt;&#x2F;span&gt;&lt;span&gt;   partitions: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL
&lt;&#x2F;span&gt;&lt;span&gt;         type: ALL
&lt;&#x2F;span&gt;&lt;span&gt;possible_keys: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL
&lt;&#x2F;span&gt;&lt;span&gt;          key: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL
&lt;&#x2F;span&gt;&lt;span&gt;      key_len: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL
&lt;&#x2F;span&gt;&lt;span&gt;          ref: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL
&lt;&#x2F;span&gt;&lt;span&gt;         rows: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5
&lt;&#x2F;span&gt;&lt;span&gt;     filtered: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;00
&lt;&#x2F;span&gt;&lt;span&gt;        Extra: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Using where&lt;&#x2F;span&gt;&lt;span&gt;; FirstMatch(team); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Using join&lt;&#x2F;span&gt;&lt;span&gt; buffer (Block Nested Loop)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt; rows in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; warning (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;001&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;再看看 warnings&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;SQL&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-SQL &quot;&gt;&lt;code class=&quot;language-SQL&quot; data-lang=&quot;SQL&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*************************** &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;. row &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;***************************
&lt;&#x2F;span&gt;&lt;span&gt;  Level: Note
&lt;&#x2F;span&gt;&lt;span&gt;   Code: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1003
&lt;&#x2F;span&gt;&lt;span&gt;Message: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* select#1 *&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select &lt;&#x2F;span&gt;&lt;span&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;`.`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;team&lt;&#x2F;span&gt;&lt;span&gt;`.`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;` AS `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;`,`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;`.`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;team&lt;&#x2F;span&gt;&lt;span&gt;`.`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;status&lt;&#x2F;span&gt;&lt;span&gt;` AS `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;status&lt;&#x2F;span&gt;&lt;span&gt;` &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;`.`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;team&lt;&#x2F;span&gt;&lt;span&gt;` semi &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt; (`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;`.`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;player&lt;&#x2F;span&gt;&lt;span&gt;`) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span&gt; ((`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;`.`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;player&lt;&#x2F;span&gt;&lt;span&gt;`.`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;team_id&lt;&#x2F;span&gt;&lt;span&gt;` = `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;`.`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;team&lt;&#x2F;span&gt;&lt;span&gt;`.`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;`) and (`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;`.`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;player&lt;&#x2F;span&gt;&lt;span&gt;`.`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;status&lt;&#x2F;span&gt;&lt;span&gt;` = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; row in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;001&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;对照着实际运行的语句的 Note, 发现错误的语句缺少了以下这个条件&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;((&lt;code&gt;test&lt;&#x2F;code&gt;.&lt;code&gt;player&lt;&#x2F;code&gt;.&lt;code&gt;team_id&lt;&#x2F;code&gt; = &lt;code&gt;test&lt;&#x2F;code&gt;.&lt;code&gt;team&lt;&#x2F;code&gt;.&lt;code&gt;id&lt;&#x2F;code&gt;)&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;难道就是你! 但是为什么又有&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Field or reference &#x27;test.team.id&#x27; of SELECT #2 was resolved in SELECT #1&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;这个问题呢&lt;&#x2F;p&gt;
&lt;p&gt;总感觉是个Bug......&lt;&#x2F;p&gt;
&lt;p&gt;To Be Continued......&lt;&#x2F;p&gt;
&lt;h2 id=&quot;can-kao-zi-liao&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#can-kao-zi-liao&quot; aria-label=&quot;Anchor link for: can-kao-zi-liao&quot;&gt;参考资料&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;5.7&#x2F;en&#x2F;semijoins.html&quot;&gt;Optimizing Subqueries, Derived Tables, and View References with Semijoin Transformations&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Yes</title>
        <published>2018-12-14T23:34:15+08:00</published>
        <updated>2018-12-14T23:34:15+08:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://memwey.github.io/posts/yes/"/>
        <id>https://memwey.github.io/posts/yes/</id>
        
        <content type="html" xml:base="https://memwey.github.io/posts/yes/">&lt;p&gt;最近看到一个有趣的 &lt;code&gt;GNU&#x2F;Linux&lt;&#x2F;code&gt; 命令, &lt;code&gt;yes&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;先 &lt;code&gt;man&lt;&#x2F;code&gt; 一下&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;YES&lt;&#x2F;span&gt;&lt;span&gt;(1)                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;BSD&lt;&#x2F;span&gt;&lt;span&gt; General Commands Manual                   YES(1)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NAME
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;yes&lt;&#x2F;span&gt;&lt;span&gt; -- be repetitively affirmative
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SYNOPSIS
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;yes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;expletive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;DESCRIPTION
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;yes&lt;&#x2F;span&gt;&lt;span&gt; outputs expletive, or, by default, ``y&amp;#39;&amp;#39;, forever.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HISTORY
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;The&lt;&#x2F;span&gt;&lt;span&gt; yes command appeared in 4.0BSD.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;4th&lt;&#x2F;span&gt;&lt;span&gt; Berkeley Distribution        June 6, 1993        4th Berkeley Distribution
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;END&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;emmmmm, 在 &lt;code&gt;macOS&lt;&#x2F;code&gt; 下并没有 &lt;code&gt;--help&lt;&#x2F;code&gt; 或者 &lt;code&gt;-h&lt;&#x2F;code&gt; 的选项&lt;&#x2F;p&gt;
&lt;p&gt;试试 &lt;code&gt;Linux&lt;&#x2F;code&gt; 下呢&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;➜&lt;&#x2F;span&gt;&lt;span&gt;  &#x2F; yes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --help
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Usage:&lt;&#x2F;span&gt;&lt;span&gt; yes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;STRING&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;or:&lt;&#x2F;span&gt;&lt;span&gt;  yes OPTION
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Repeatedly&lt;&#x2F;span&gt;&lt;span&gt; output a line with all specified STRING(s)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; or &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;--help&lt;&#x2F;span&gt;&lt;span&gt;     display this help and exit
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;--version&lt;&#x2F;span&gt;&lt;span&gt;  output version information and exit
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GNU&lt;&#x2F;span&gt;&lt;span&gt; coreutils online help: &amp;lt;https:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;coreutils&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Full&lt;&#x2F;span&gt;&lt;span&gt; documentation at: &amp;lt;https:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;coreutils&#x2F;yes&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;or&lt;&#x2F;span&gt;&lt;span&gt; available locally via: info &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(coreutils) yes invocation&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;有了&lt;&#x2F;p&gt;
&lt;p&gt;简单来说这个命令就是可以反复的输出一个字符串, 这个字符串的默认值是 &lt;code&gt;y&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;于是有了一些特别的用法, 比如, 注意这里没有 &lt;code&gt;f&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;yes &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rm -r&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;还有&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;yes &lt;&#x2F;span&gt;&lt;span&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;yes&lt;&#x2F;span&gt;&lt;span&gt; yes)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;好孩子不要乱试&lt;&#x2F;p&gt;
&lt;p&gt;当然这个命令的效果其实一般都有替代, 比如加上 &lt;code&gt;-f&lt;&#x2F;code&gt;, &lt;code&gt;-y&lt;&#x2F;code&gt; 什么的, 生成一个大文件也可以用 &lt;code&gt;&#x2F;dev&#x2F;urandom&lt;&#x2F;code&gt; 来做&lt;&#x2F;p&gt;
&lt;p&gt;还可以在冬天做暖手宝, 噗&lt;&#x2F;p&gt;
&lt;p&gt;最后, 跟我一起在命令行输入&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;yes &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;AMD, yes!&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;果然人类的本质就是复读机&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>重新开始</title>
        <published>2018-09-17T23:26:20+08:00</published>
        <updated>2018-09-17T23:26:20+08:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://memwey.github.io/posts/restart/"/>
        <id>https://memwey.github.io/posts/restart/</id>
        
        <content type="html" xml:base="https://memwey.github.io/posts/restart/">&lt;p&gt;新的博客, 重新开始&lt;&#x2F;p&gt;
&lt;p&gt;这次尝试着坚持一下吧&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>红黑树笔记</title>
        <published>2016-09-13T23:32:27+08:00</published>
        <updated>2016-09-13T23:32:27+08:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://memwey.github.io/posts/red-black-tree/"/>
        <id>https://memwey.github.io/posts/red-black-tree/</id>
        
        <content type="html" xml:base="https://memwey.github.io/posts/red-black-tree/">&lt;p&gt;最近研究了一下红黑树的一些性质和思想, 在这里记录一下.&lt;&#x2F;p&gt;
&lt;p&gt;Map, 或者在 &lt;code&gt;Python&lt;&#x2F;code&gt; 等一些语言中叫做 dictionary 的常用的以键值对形式储存的数据结构一般有两种实现方式, 在 &lt;code&gt;C++&lt;&#x2F;code&gt; 的 &lt;code&gt;STL&lt;&#x2F;code&gt; 中使用了红黑树的方式, 而在&lt;code&gt;Python&lt;&#x2F;code&gt;中使用了哈希表的方式.&lt;&#x2F;p&gt;
&lt;p&gt;一般认为采用哈希表的方式查找删除的时间复杂度为 &lt;code&gt;O(1)&lt;&#x2F;code&gt;, 而红黑树为 &lt;code&gt;O(logn)&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Python&lt;&#x2F;code&gt; 中的哈希表使用开放寻址法解决冲突.&lt;&#x2F;p&gt;
&lt;p&gt;对于普通的二叉查找树来说, 查找和插入的时间复杂度在最坏的情况下可能会变成 &lt;code&gt;O(n)&lt;&#x2F;code&gt;, 即完全偏向一边的不平衡情况使其成为一个单链表. 如果只是在树的叶子上增加节点而不进行其他的调整, 很容易会使只向下增长的树不平衡. 为了保证 &lt;code&gt;O(logn)&lt;&#x2F;code&gt; 的时间复杂度, 我们需要一种动态的机制, 来调整树的父节点, 乃至于根节点.&lt;&#x2F;p&gt;
&lt;p&gt;红黑树是一种动态调整的实现方式. 红黑树其实是在 &lt;code&gt;2, 3-树&lt;&#x2F;code&gt; 的基础上实现的. 他们也完全可以等价的转换. 不过 &lt;code&gt;2, 3-树&lt;&#x2F;code&gt; 在程序的实现上比较复杂, 而且查找操作也和二叉搜索树有一些不同, 所以在程序实现中一般使用红黑树.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;2, 3-树&lt;&#x2F;code&gt; 和红黑树他们共同的思想是, 将树的叶子节点上的操作造成的影响, 逐步的传递给父节点, 按照一定的方式对当前子树进行调整. 父节点再传递给它的父节点, 调整更大一些的子树. 最终传递到根节点, 调整整颗树.&lt;&#x2F;p&gt;
&lt;p&gt;可以这样理解, 在红黑树中, 用红色来标记正在累计调整的节点. 当节点M的两个子节点均被标记, 则M取消子节点的标记, 并标记自己, 使调整向根节点传递.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>在CentOS上使用较新的软件</title>
        <published>2016-08-02T23:30:33+08:00</published>
        <updated>2016-08-02T23:30:33+08:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://memwey.github.io/posts/centos-latest-software/"/>
        <id>https://memwey.github.io/posts/centos-latest-software/</id>
        
        <content type="html" xml:base="https://memwey.github.io/posts/centos-latest-software/">&lt;p&gt;公司的服务器都是 &lt;code&gt;CentOS&lt;&#x2F;code&gt; 的, 带的软件都比较旧, 让我这个不更新会死星人很难过啊.&lt;&#x2F;p&gt;
&lt;p&gt;开玩笑的, 主要问题是 &lt;code&gt;git&lt;&#x2F;code&gt; 版本太旧, &lt;code&gt;clone&lt;&#x2F;code&gt; 的时候会报错, 然后也需要 &lt;code&gt;python3.5&lt;&#x2F;code&gt;. 在 &lt;code&gt;git&lt;&#x2F;code&gt; 上面发现 &lt;a href=&quot;https:&#x2F;&#x2F;ius.io&#x2F;&quot;&gt;ius&lt;&#x2F;a&gt; 来解决这个问题.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ius.io&#x2F;&quot;&gt;ius&lt;&#x2F;a&gt; 是一个社区项目, 目的是为 &lt;a href=&quot;https:&#x2F;&#x2F;www.kernel.org&#x2F;&quot;&gt;Linux&lt;&#x2F;a&gt; 的企业发行版提供一些更新版本的RPM包.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; yum install epel-release
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; yum install https:&#x2F;&#x2F;centos6.iuscommunity.org&#x2F;ius-release.rpm
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;为了解决一些冲突和共存的问题, 有一些 &lt;code&gt;package&lt;&#x2F;code&gt; 在 &lt;a href=&quot;https:&#x2F;&#x2F;ius.io&#x2F;&quot;&gt;ius&lt;&#x2F;a&gt; 中的包名有一些改动&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; yum install git2u
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; yum install python35u
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;一般的命名规则是&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;{name}{major_version}{minor_version}u&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这样就可以在 &lt;code&gt;CentOS&lt;&#x2F;code&gt; 上使用较新的软件啦.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Linux后台命令</title>
        <published>2016-06-15T23:28:24+08:00</published>
        <updated>2016-06-15T23:28:24+08:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://memwey.github.io/posts/linux-backgroud/"/>
        <id>https://memwey.github.io/posts/linux-backgroud/</id>
        
        <content type="html" xml:base="https://memwey.github.io/posts/linux-backgroud/">&lt;p&gt;最近在跑 DHT 网络拟真的时候涉及到一些 linux 后台运行的一些东西,现在总结一下&lt;&#x2F;p&gt;
&lt;p&gt;例如&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nohup&lt;&#x2F;span&gt;&lt;span&gt; ..&#x2F;src&#x2F;OverSim&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -c&lt;&#x2F;span&gt;&lt;span&gt; ChordChurn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -u&lt;&#x2F;span&gt;&lt;span&gt; Cmdenv &amp;gt; out.file &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;使得 &lt;code&gt;..&#x2F;src&#x2F;OverSim -c ChordChurn -u Cmdenv&lt;&#x2F;code&gt; 命令在后台运行,并将 &lt;code&gt;stderr&lt;&#x2F;code&gt; 重定向到 &lt;code&gt;stdout&lt;&#x2F;code&gt; 中然后再将 &lt;code&gt;stdout&lt;&#x2F;code&gt; 重定向到 &lt;code&gt;out.file&lt;&#x2F;code&gt;, 并且在当前终端关闭时仍然运行&lt;&#x2F;p&gt;
&lt;p&gt;具体说一下吧&lt;&#x2F;p&gt;
&lt;h2 id=&quot;nohup&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#nohup&quot; aria-label=&quot;Anchor link for: nohup&quot;&gt;nohup&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;退出终端的时候,一般在终端中运行的进程会随之关闭,因为此时终端中的子进程会收到 &lt;code&gt;SIGHUP&lt;&#x2F;code&gt; 信号. 而 &lt;code&gt;nohup&lt;&#x2F;code&gt; 使得进程忽略所有 &lt;code&gt;SIGHUP&lt;&#x2F;code&gt; 信号. &lt;code&gt;stdout&lt;&#x2F;code&gt; 默认会重定向到 &lt;code&gt;nohup.out&lt;&#x2F;code&gt; 文件中&lt;&#x2F;p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#&quot; aria-label=&quot;Anchor link for: &quot;&gt;&amp;amp;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;在命令中末尾加入 &lt;code&gt;&amp;amp;&lt;&#x2F;code&gt; 符号,使进程在后台运行&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2-1&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#2-1&quot; aria-label=&quot;Anchor link for: 2-1&quot;&gt;2&amp;gt;&amp;amp;1&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;放在 &lt;code&gt;&amp;gt;&lt;&#x2F;code&gt; 后面的 &lt;code&gt;&amp;amp;&lt;&#x2F;code&gt;, 表示重定向的目标不是一个文件, 而是一个文件描述符, 文件描述符&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 =&amp;gt; stdout&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;2 =&amp;gt; stderr&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;0 =&amp;gt; stdin&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;qi-ta-yi-xie-ming-ling-he-cao-zuo&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#qi-ta-yi-xie-ming-ling-he-cao-zuo&quot; aria-label=&quot;Anchor link for: qi-ta-yi-xie-ming-ling-he-cao-zuo&quot;&gt;其他一些命令和操作&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;Control+z&lt;&#x2F;code&gt; 可以发出 &lt;code&gt;SIGSTOP&lt;&#x2F;code&gt; 信号, 使当前前台进程暂停并放入后台&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;fg [job_id]&lt;&#x2F;code&gt;使进程在前台运行&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;bg [job_id]&lt;&#x2F;code&gt;使进程在后台运行&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;jobs&lt;&#x2F;code&gt; 查看后台进程&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>第一篇博客</title>
        <published>2016-06-14T23:22:32+08:00</published>
        <updated>2016-06-14T23:22:32+08:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://memwey.github.io/posts/first-blog/"/>
        <id>https://memwey.github.io/posts/first-blog/</id>
        
        <content type="html" xml:base="https://memwey.github.io/posts/first-blog/">&lt;p&gt;其实很早就想弄个博客什么的, 觉得有些东西费了很大的力气解决了, 然后久而久之就忘了......记录下来应该会好一点吧, 这样觉得.&lt;&#x2F;p&gt;
&lt;p&gt;所以还是写一些东西吧, 嗯嗯......&lt;&#x2F;p&gt;
&lt;p&gt;其实还是不太喜欢这种不怎么能自己定制的东西......总有一种不知所措的感觉......自己写一个后台倒是没什么问题, 前端的话就实在是无力了, 噗&lt;&#x2F;p&gt;
&lt;p&gt;对 Markdown 的语法还不那么熟悉, 而且好像 Markdown 有一些不同的解释器, 很麻烦啊&lt;&#x2F;p&gt;
&lt;p&gt;每次生成的静态网页还要在本地生成了之后看过效果......啊, 真的很麻烦&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>关于</title>
        <published>2016-06-14T00:00:00+00:00</published>
        <updated>2025-10-30T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://memwey.github.io/about/"/>
        <id>https://memwey.github.io/about/</id>
        
        <content type="html" xml:base="https://memwey.github.io/about/">&lt;p&gt;Gopher &amp;amp; Pythonista&lt;&#x2F;p&gt;
&lt;h2 id=&quot;guan-yu-bo-ke&quot;&gt;关于博客&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;应该也许大概会在这里做一些技术方面的笔记 _(:_」∠)_&lt;&#x2F;li&gt;
&lt;li&gt;因为拖延症严重的不行所以可能不会经常更新......唔, 努力更新一下吧&lt;&#x2F;li&gt;
&lt;li&gt;偶尔聊聊历史&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;guan-yu-gong-zuo&quot;&gt;关于工作&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;xian-zai-de&quot;&gt;现在的&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;開発 @&lt;a href=&quot;https:&#x2F;&#x2F;www.netstars.co.jp&#x2F;&quot;&gt;株式会社ネットスターズ&lt;&#x2F;a&gt; @东京, 日本&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;ceng-jing-de&quot;&gt;曾经的&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;中级运维开发工程师 @&lt;a href=&quot;https:&#x2F;&#x2F;www.datastory.com.cn&#x2F;&quot;&gt;数说故事&lt;&#x2F;a&gt; @广州, 中国&lt;&#x2F;li&gt;
&lt;li&gt;后端开发工程师 @画音 @广州, 中国&lt;&#x2F;li&gt;
&lt;li&gt;后端开发工程师 @壁虎科技 @广州, 中国&lt;&#x2F;li&gt;
&lt;li&gt;Senior Engineer @&lt;a href=&quot;https:&#x2F;&#x2F;www.bigo.sg&#x2F;&quot;&gt;BIGO&lt;&#x2F;a&gt; @广州, 中国&lt;&#x2F;li&gt;
&lt;li&gt;Python Engineer @&lt;a href=&quot;https:&#x2F;&#x2F;www.akulaku.com&#x2F;&quot;&gt;Akulaku&lt;&#x2F;a&gt; @深圳, 中国&lt;&#x2F;li&gt;
&lt;li&gt;服务器端开发工程师 @&lt;a href=&quot;https:&#x2F;&#x2F;www.cmcm.com&#x2F;&quot;&gt;猎豹移动&lt;&#x2F;a&gt; @珠海, 中国&lt;&#x2F;li&gt;
&lt;li&gt;Python 开发实习生 @&lt;a href=&quot;http:&#x2F;&#x2F;www.cnicg.cn&#x2F;&quot;&gt;广州中国科学院计算机网络信息中心&lt;&#x2F;a&gt; @广州, 中国&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;guan-yu-jiao-yu&quot;&gt;关于教育&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;学生 @&lt;a href=&quot;https:&#x2F;&#x2F;www.jnu.edu.cn&#x2F;&quot;&gt;暨南大学&lt;&#x2F;a&gt; @广州, 中国&lt;&#x2F;li&gt;
&lt;li&gt;学生 @&lt;a href=&quot;http:&#x2F;&#x2F;www.shimen.org&#x2F;&quot;&gt;石门中学&lt;&#x2F;a&gt; @佛山, 中国&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>链接</title>
        <published>2016-06-14T00:00:00+00:00</published>
        <updated>2025-09-07T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://memwey.github.io/link/"/>
        <id>https://memwey.github.io/link/</id>
        
        <content type="html" xml:base="https://memwey.github.io/link/">&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;leoeatle.github.io&quot;&gt;LeoEatle&#x27;s World&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
</feed>
